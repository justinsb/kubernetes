/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_util.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				var yynn195 int = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	if !yyhl209 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				var yynn234 int = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
			}
			if yyr234 || yy2arr234 {
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep234 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	if !yyhl243 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				x.Medium.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				x.Medium.CodecEncodeSelf(e)
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				var yynn524 int = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
			}
			if yyr524 || yy2arr524 {
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep524 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	if !yyhl539 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [5]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.FSType != ""
			yyq550[4] = x.ReadOnly != false
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				var yynn550 int = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
			}
			if yyr550 || yy2arr550 {
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep550 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyq581 [4]bool
			_, _, _ = yysep581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[3] = x.ReadOnly != false
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				var yynn581 int = 3
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
			}
			if yyr581 || yy2arr581 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr581 || yy2arr581 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy586 := *x.Lun
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeInt(int64(yy586))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy588 := *x.Lun
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(yy588))
					}
				}
			}
			if yyr581 || yy2arr581 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr581 || yy2arr581 {
				if yyq581[3] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq581[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep581 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		switch yys598 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv599 := &x.TargetWWNs
				yym600 := z.DecBinary()
				_ = yym600
				if false {
				} else {
					z.F.DecSliceStringX(yyv599, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	if !yyhl598 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv606 := &x.TargetWWNs
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			z.F.DecSliceStringX(yyv606, false, d)
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [4]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[1] = x.FSType != ""
			yyq613[2] = x.Partition != 0
			yyq613[3] = x.ReadOnly != false
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(4)
			} else {
				var yynn613 int = 1
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
			}
			if yyr613 || yy2arr613 {
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep613 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		switch yys628 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	if !yyhl628 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [2]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(2)
			} else {
				var yynn639 int = 2
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
			}
			if yyr639 || yy2arr639 {
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr639 || yy2arr639 {
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep639 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym646 := z.DecBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl647 := r.ReadMapStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl647, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl647 := r.ReadArrayStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys648Slc
	var yyhl648 bool = l >= 0
	for yyj648 := 0; ; yyj648++ {
		if yyhl648 {
			if yyj648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys648Slc = r.DecodeBytes(yys648Slc, true, true)
		yys648 := string(yys648Slc)
		switch yys648 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys648)
		} // end switch yys648
	} // end for yyj648
	if !yyhl648 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj651 int
	var yyb651 bool
	var yyhl651 bool = l >= 0
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj651++
		if yyhl651 {
			yyb651 = yyj651 > l
		} else {
			yyb651 = r.CheckBreak()
		}
		if yyb651 {
			break
		}
		z.DecStructFieldNotFound(yyj651-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyq655 [1]bool
			_, _, _ = yysep655, yyq655, yy2arr655
			const yyr655 bool = false
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(1)
			} else {
				var yynn655 int = 1
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
			}
			if yyr655 || yy2arr655 {
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep655 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym659 := z.DecBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl660 := r.ReadMapStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl660, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl660 := r.ReadArrayStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys661Slc
	var yyhl661 bool = l >= 0
	for yyj661 := 0; ; yyj661++ {
		if yyhl661 {
			if yyj661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys661Slc = r.DecodeBytes(yys661Slc, true, true)
		yys661 := string(yys661Slc)
		switch yys661 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys661)
		} // end switch yys661
	} // end for yyj661
	if !yyhl661 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [3]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[2] = x.ReadOnly != false
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(3)
			} else {
				var yynn666 int = 2
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
			}
			if yyr666 || yy2arr666 {
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr666 || yy2arr666 {
				yym671 := z.EncBinary()
				_ = yym671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr666 || yy2arr666 {
				if yyq666[2] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep666 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym676 := z.DecBinary()
	_ = yym676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl677 := r.ReadMapStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl677, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl677 := r.ReadArrayStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys678Slc
	var yyhl678 bool = l >= 0
	for yyj678 := 0; ; yyj678++ {
		if yyhl678 {
			if yyj678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys678Slc = r.DecodeBytes(yys678Slc, true, true)
		yys678 := string(yys678Slc)
		switch yys678 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys678)
		} // end switch yys678
	} // end for yyj678
	if !yyhl678 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj682 int
	var yyb682 bool
	var yyhl682 bool = l >= 0
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj682++
		if yyhl682 {
			yyb682 = yyj682 > l
		} else {
			yyb682 = r.CheckBreak()
		}
		if yyb682 {
			break
		}
		z.DecStructFieldNotFound(yyj682-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[2] = x.ReadOnly != false
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				var yynn687 int = 2
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
			}
			if yyr687 || yy2arr687 {
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr687 || yy2arr687 {
				yym692 := z.EncBinary()
				_ = yym692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr687 || yy2arr687 {
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq687[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep687 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		switch yys699 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	if !yyhl699 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	r.ReadEnd()
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [8]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[2] = x.FSType != ""
			yyq708[7] = x.ReadOnly != false
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(8)
			} else {
				var yynn708 int = 6
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
			}
			if yyr708 || yy2arr708 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym713 := z.EncBinary()
				_ = yym713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[2] {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq708[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym720 := z.EncBinary()
				_ = yym720
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr708 || yy2arr708 {
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr708 || yy2arr708 {
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym726 := z.EncBinary()
				_ = yym726
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr708 || yy2arr708 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[7] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq708[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep708 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym731 := z.DecBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl732 := r.ReadMapStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl732, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl732 := r.ReadArrayStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys733Slc
	var yyhl733 bool = l >= 0
	for yyj733 := 0; ; yyj733++ {
		if yyhl733 {
			if yyj733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys733Slc = r.DecodeBytes(yys733Slc, true, true)
		yys733 := string(yys733Slc)
		switch yys733 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv734 := &x.CephMonitors
				yym735 := z.DecBinary()
				_ = yym735
				if false {
				} else {
					z.F.DecSliceStringX(yyv734, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys733)
		} // end switch yys733
	} // end for yyj733
	if !yyhl733 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj743 int
	var yyb743 bool
	var yyhl743 bool = l >= 0
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv744 := &x.CephMonitors
		yym745 := z.DecBinary()
		_ = yym745
		if false {
		} else {
			z.F.DecSliceStringX(yyv744, false, d)
		}
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj743++
		if yyhl743 {
			yyb743 = yyj743 > l
		} else {
			yyb743 = r.CheckBreak()
		}
		if yyb743 {
			break
		}
		z.DecStructFieldNotFound(yyj743-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [3]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[1] = x.FSType != ""
			yyq754[2] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(3)
			} else {
				var yynn754 int = 1
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[1] {
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq754[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[2] {
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl765 := r.ReadMapStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl765, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl765 := r.ReadArrayStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys766Slc
	var yyhl766 bool = l >= 0
	for yyj766 := 0; ; yyj766++ {
		if yyhl766 {
			if yyj766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys766Slc = r.DecodeBytes(yys766Slc, true, true)
		yys766 := string(yys766Slc)
		switch yys766 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys766)
		} // end switch yys766
	} // end for yyj766
	if !yyhl766 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj770 int
	var yyb770 bool
	var yyhl770 bool = l >= 0
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj770++
		if yyhl770 {
			yyb770 = yyj770 > l
		} else {
			yyb770 = r.CheckBreak()
		}
		if yyb770 {
			break
		}
		z.DecStructFieldNotFound(yyj770-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym774 := z.EncBinary()
		_ = yym774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep775 := !z.EncBinary()
			yy2arr775 := z.EncBasicHandle().StructToArray
			var yyq775 [5]bool
			_, _, _ = yysep775, yyq775, yy2arr775
			const yyr775 bool = false
			yyq775[1] = x.User != ""
			yyq775[2] = x.SecretFile != ""
			yyq775[3] = x.SecretRef != nil
			yyq775[4] = x.ReadOnly != false
			if yyr775 || yy2arr775 {
				r.EncodeArrayStart(5)
			} else {
				var yynn775 int = 1
				for _, b := range yyq775 {
					if b {
						yynn775++
					}
				}
				r.EncodeMapStart(yynn775)
			}
			if yyr775 || yy2arr775 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[1] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[2] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq775[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[4] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq775[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep775 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym789 := z.DecBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl790 := r.ReadMapStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl790, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl790 := r.ReadArrayStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys791Slc
	var yyhl791 bool = l >= 0
	for yyj791 := 0; ; yyj791++ {
		if yyhl791 {
			if yyj791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys791Slc = r.DecodeBytes(yys791Slc, true, true)
		yys791 := string(yys791Slc)
		switch yys791 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv792 := &x.Monitors
				yym793 := z.DecBinary()
				_ = yym793
				if false {
				} else {
					z.F.DecSliceStringX(yyv792, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys791)
		} // end switch yys791
	} // end for yyj791
	if !yyhl791 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj798 int
	var yyb798 bool
	var yyhl798 bool = l >= 0
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv799 := &x.Monitors
		yym800 := z.DecBinary()
		_ = yym800
		if false {
		} else {
			z.F.DecSliceStringX(yyv799, false, d)
		}
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj798++
		if yyhl798 {
			yyb798 = yyj798 > l
		} else {
			yyb798 = r.CheckBreak()
		}
		if yyb798 {
			break
		}
		z.DecStructFieldNotFound(yyj798-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym805 := z.EncBinary()
		_ = yym805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep806 := !z.EncBinary()
			yy2arr806 := z.EncBasicHandle().StructToArray
			var yyq806 [1]bool
			_, _, _ = yysep806, yyq806, yy2arr806
			const yyr806 bool = false
			if yyr806 || yy2arr806 {
				r.EncodeArrayStart(1)
			} else {
				var yynn806 int = 1
				for _, b := range yyq806 {
					if b {
						yynn806++
					}
				}
				r.EncodeMapStart(yynn806)
			}
			if yyr806 || yy2arr806 {
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep806 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		switch yys812 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	if !yyhl812 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [1]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = len(x.Items) != 0
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(1)
			} else {
				var yynn817 int = 0
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym819 := z.EncBinary()
						_ = yym819
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym820 := z.EncBinary()
						_ = yym820
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		switch yys823 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv824 := &x.Items
				yym825 := z.DecBinary()
				_ = yym825
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	if !yyhl823 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj826 int
	var yyb826 bool
	var yyhl826 bool = l >= 0
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv827 := &x.Items
		yym828 := z.DecBinary()
		_ = yym828
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv827), d)
		}
	}
	for {
		yyj826++
		if yyhl826 {
			yyb826 = yyj826 > l
		} else {
			yyb826 = r.CheckBreak()
		}
		if yyb826 {
			break
		}
		z.DecStructFieldNotFound(yyj826-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym829 := z.EncBinary()
		_ = yym829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep830 := !z.EncBinary()
			yy2arr830 := z.EncBasicHandle().StructToArray
			var yyq830 [2]bool
			_, _, _ = yysep830, yyq830, yy2arr830
			const yyr830 bool = false
			if yyr830 || yy2arr830 {
				r.EncodeArrayStart(2)
			} else {
				var yynn830 int = 2
				for _, b := range yyq830 {
					if b {
						yynn830++
					}
				}
				r.EncodeMapStart(yynn830)
			}
			if yyr830 || yy2arr830 {
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr830 || yy2arr830 {
				yy835 := &x.FieldRef
				yy835.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy836 := &x.FieldRef
				yy836.CodecEncodeSelf(e)
			}
			if yysep830 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		switch yys839 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv841 := &x.FieldRef
				yyv841.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	if !yyhl839 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj842 int
	var yyb842 bool
	var yyhl842 bool = l >= 0
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv844 := &x.FieldRef
		yyv844.CodecDecodeSelf(d)
	}
	for {
		yyj842++
		if yyhl842 {
			yyb842 = yyj842 > l
		} else {
			yyb842 = r.CheckBreak()
		}
		if yyb842 {
			break
		}
		z.DecStructFieldNotFound(yyj842-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [5]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[0] = x.Name != ""
			yyq846[1] = x.HostPort != 0
			yyq846[3] = x.Protocol != ""
			yyq846[4] = x.HostIP != ""
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(5)
			} else {
				var yynn846 int = 1
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				if yyq846[0] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[4] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym860 := z.DecBinary()
	_ = yym860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl861 := r.ReadMapStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl861, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl861 := r.ReadArrayStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys862Slc
	var yyhl862 bool = l >= 0
	for yyj862 := 0; ; yyj862++ {
		if yyhl862 {
			if yyj862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys862Slc = r.DecodeBytes(yys862Slc, true, true)
		yys862 := string(yys862Slc)
		switch yys862 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys862)
		} // end switch yys862
	} // end for yyj862
	if !yyhl862 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj868 int
	var yyb868 bool
	var yyhl868 bool = l >= 0
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj868++
		if yyhl868 {
			yyb868 = yyj868 > l
		} else {
			yyb868 = r.CheckBreak()
		}
		if yyb868 {
			break
		}
		z.DecStructFieldNotFound(yyj868-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym874 := z.EncBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep875 := !z.EncBinary()
			yy2arr875 := z.EncBasicHandle().StructToArray
			var yyq875 [3]bool
			_, _, _ = yysep875, yyq875, yy2arr875
			const yyr875 bool = false
			yyq875[1] = x.ReadOnly != false
			if yyr875 || yy2arr875 {
				r.EncodeArrayStart(3)
			} else {
				var yynn875 int = 2
				for _, b := range yyq875 {
					if b {
						yynn875++
					}
				}
				r.EncodeMapStart(yynn875)
			}
			if yyr875 || yy2arr875 {
				yym877 := z.EncBinary()
				_ = yym877
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym878 := z.EncBinary()
				_ = yym878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr875 || yy2arr875 {
				if yyq875[1] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq875[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr875 || yy2arr875 {
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep875 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		switch yys887 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	if !yyhl887 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj891 int
	var yyb891 bool
	var yyhl891 bool = l >= 0
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj891++
		if yyhl891 {
			yyb891 = yyj891 > l
		} else {
			yyb891 = r.CheckBreak()
		}
		if yyb891 {
			break
		}
		z.DecStructFieldNotFound(yyj891-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym895 := z.EncBinary()
		_ = yym895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep896 := !z.EncBinary()
			yy2arr896 := z.EncBasicHandle().StructToArray
			var yyq896 [3]bool
			_, _, _ = yysep896, yyq896, yy2arr896
			const yyr896 bool = false
			yyq896[1] = x.Value != ""
			yyq896[2] = x.ValueFrom != nil
			if yyr896 || yy2arr896 {
				r.EncodeArrayStart(3)
			} else {
				var yynn896 int = 1
				for _, b := range yyq896 {
					if b {
						yynn896++
					}
				}
				r.EncodeMapStart(yynn896)
			}
			if yyr896 || yy2arr896 {
				yym898 := z.EncBinary()
				_ = yym898
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym899 := z.EncBinary()
				_ = yym899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[1] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq896[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq896[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		switch yys906 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	if !yyhl906 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj910 int
	var yyb910 bool
	var yyhl910 bool = l >= 0
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj910++
		if yyhl910 {
			yyb910 = yyj910 > l
		} else {
			yyb910 = r.CheckBreak()
		}
		if yyb910 {
			break
		}
		z.DecStructFieldNotFound(yyj910-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [1]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(1)
			} else {
				var yynn915 int = 1
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
			}
			if yyr915 || yy2arr915 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep915 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym917 := z.DecBinary()
	_ = yym917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl918 := r.ReadMapStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl918, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl918 := r.ReadArrayStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys919Slc
	var yyhl919 bool = l >= 0
	for yyj919 := 0; ; yyj919++ {
		if yyhl919 {
			if yyj919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys919Slc = r.DecodeBytes(yys919Slc, true, true)
		yys919 := string(yys919Slc)
		switch yys919 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys919)
		} // end switch yys919
	} // end for yyj919
	if !yyhl919 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj921 int
	var yyb921 bool
	var yyhl921 bool = l >= 0
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj921++
		if yyhl921 {
			yyb921 = yyj921 > l
		} else {
			yyb921 = r.CheckBreak()
		}
		if yyb921 {
			break
		}
		z.DecStructFieldNotFound(yyj921-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym923 := z.EncBinary()
		_ = yym923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep924 := !z.EncBinary()
			yy2arr924 := z.EncBasicHandle().StructToArray
			var yyq924 [2]bool
			_, _, _ = yysep924, yyq924, yy2arr924
			const yyr924 bool = false
			if yyr924 || yy2arr924 {
				r.EncodeArrayStart(2)
			} else {
				var yynn924 int = 2
				for _, b := range yyq924 {
					if b {
						yynn924++
					}
				}
				r.EncodeMapStart(yynn924)
			}
			if yyr924 || yy2arr924 {
				yym926 := z.EncBinary()
				_ = yym926
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				yym927 := z.EncBinary()
				_ = yym927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr924 || yy2arr924 {
				yym929 := z.EncBinary()
				_ = yym929
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep924 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym931 := z.DecBinary()
	_ = yym931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl932 := r.ReadMapStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl932, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl932 := r.ReadArrayStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys933Slc
	var yyhl933 bool = l >= 0
	for yyj933 := 0; ; yyj933++ {
		if yyhl933 {
			if yyj933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys933Slc = r.DecodeBytes(yys933Slc, true, true)
		yys933 := string(yys933Slc)
		switch yys933 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys933)
		} // end switch yys933
	} // end for yyj933
	if !yyhl933 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj936 int
	var yyb936 bool
	var yyhl936 bool = l >= 0
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj936++
		if yyhl936 {
			yyb936 = yyj936 > l
		} else {
			yyb936 = r.CheckBreak()
		}
		if yyb936 {
			break
		}
		z.DecStructFieldNotFound(yyj936-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym939 := z.EncBinary()
		_ = yym939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep940 := !z.EncBinary()
			yy2arr940 := z.EncBasicHandle().StructToArray
			var yyq940 [4]bool
			_, _, _ = yysep940, yyq940, yy2arr940
			const yyr940 bool = false
			yyq940[0] = x.Path != ""
			yyq940[1] = true
			yyq940[2] = x.Host != ""
			yyq940[3] = x.Scheme != ""
			if yyr940 || yy2arr940 {
				r.EncodeArrayStart(4)
			} else {
				var yynn940 int = 0
				for _, b := range yyq940 {
					if b {
						yynn940++
					}
				}
				r.EncodeMapStart(yynn940)
			}
			if yyr940 || yy2arr940 {
				if yyq940[0] {
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[1] {
					yy945 := &x.Port
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy945) {
					} else if !yym946 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy945)
					} else {
						z.EncFallback(yy945)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq940[1] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy947 := &x.Port
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy947) {
					} else if !yym948 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy947)
					} else {
						z.EncFallback(yy947)
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[2] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep940 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym953 := z.DecBinary()
	_ = yym953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl954 := r.ReadMapStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl954, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl954 := r.ReadArrayStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys955Slc
	var yyhl955 bool = l >= 0
	for yyj955 := 0; ; yyj955++ {
		if yyhl955 {
			if yyj955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys955Slc = r.DecodeBytes(yys955Slc, true, true)
		yys955 := string(yys955Slc)
		switch yys955 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv957 := &x.Port
				yym958 := z.DecBinary()
				_ = yym958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv957) {
				} else if !yym958 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv957)
				} else {
					z.DecFallback(yyv957, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys955)
		} // end switch yys955
	} // end for yyj955
	if !yyhl955 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv963 := &x.Port
		yym964 := z.DecBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv963) {
		} else if !yym964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv963)
		} else {
			z.DecFallback(yyv963, false)
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym967 := z.EncBinary()
	_ = yym967
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym969 := z.EncBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep970 := !z.EncBinary()
			yy2arr970 := z.EncBasicHandle().StructToArray
			var yyq970 [1]bool
			_, _, _ = yysep970, yyq970, yy2arr970
			const yyr970 bool = false
			yyq970[0] = true
			if yyr970 || yy2arr970 {
				r.EncodeArrayStart(1)
			} else {
				var yynn970 int = 0
				for _, b := range yyq970 {
					if b {
						yynn970++
					}
				}
				r.EncodeMapStart(yynn970)
			}
			if yyr970 || yy2arr970 {
				if yyq970[0] {
					yy972 := &x.Port
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else if z.HasExtensions() && z.EncExt(yy972) {
					} else if !yym973 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy972)
					} else {
						z.EncFallback(yy972)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[0] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy974 := &x.Port
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else if z.HasExtensions() && z.EncExt(yy974) {
					} else if !yym975 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy974)
					} else {
						z.EncFallback(yy974)
					}
				}
			}
			if yysep970 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl977 := r.ReadMapStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl977, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl977 := r.ReadArrayStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys978Slc
	var yyhl978 bool = l >= 0
	for yyj978 := 0; ; yyj978++ {
		if yyhl978 {
			if yyj978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys978Slc = r.DecodeBytes(yys978Slc, true, true)
		yys978 := string(yys978Slc)
		switch yys978 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv979 := &x.Port
				yym980 := z.DecBinary()
				_ = yym980
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv979) {
				} else if !yym980 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv979)
				} else {
					z.DecFallback(yyv979, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys978)
		} // end switch yys978
	} // end for yyj978
	if !yyhl978 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj981 int
	var yyb981 bool
	var yyhl981 bool = l >= 0
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv982 := &x.Port
		yym983 := z.DecBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv982) {
		} else if !yym983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv982)
		} else {
			z.DecFallback(yyv982, false)
		}
	}
	for {
		yyj981++
		if yyhl981 {
			yyb981 = yyj981 > l
		} else {
			yyb981 = r.CheckBreak()
		}
		if yyb981 {
			break
		}
		z.DecStructFieldNotFound(yyj981-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [1]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[0] = len(x.Command) != 0
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(1)
			} else {
				var yynn985 int = 0
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
			}
			if yyr985 || yy2arr985 {
				if yyq985[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym987 := z.EncBinary()
						_ = yym987
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq985[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym988 := z.EncBinary()
						_ = yym988
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep985 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym989 := z.DecBinary()
	_ = yym989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl990 := r.ReadMapStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl990, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl990 := r.ReadArrayStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys991Slc
	var yyhl991 bool = l >= 0
	for yyj991 := 0; ; yyj991++ {
		if yyhl991 {
			if yyj991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys991Slc = r.DecodeBytes(yys991Slc, true, true)
		yys991 := string(yys991Slc)
		switch yys991 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv992 := &x.Command
				yym993 := z.DecBinary()
				_ = yym993
				if false {
				} else {
					z.F.DecSliceStringX(yyv992, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys991)
		} // end switch yys991
	} // end for yyj991
	if !yyhl991 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv995 := &x.Command
		yym996 := z.DecBinary()
		_ = yym996
		if false {
		} else {
			z.F.DecSliceStringX(yyv995, false, d)
		}
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [5]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq998[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq998[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq998[3] = x.InitialDelaySeconds != 0
			yyq998[4] = x.TimeoutSeconds != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(5)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			var yyn999 bool
			if x.Handler.Exec == nil {
				yyn999 = true
				goto LABEL999
			}
		LABEL999:
			if yyr998 || yy2arr998 {
				if yyn999 {
					r.EncodeNil()
				} else {
					if yyq998[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn999 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1000 bool
			if x.Handler.HTTPGet == nil {
				yyn1000 = true
				goto LABEL1000
			}
		LABEL1000:
			if yyr998 || yy2arr998 {
				if yyn1000 {
					r.EncodeNil()
				} else {
					if yyq998[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn1000 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1001 bool
			if x.Handler.TCPSocket == nil {
				yyn1001 = true
				goto LABEL1001
			}
		LABEL1001:
			if yyr998 || yy2arr998 {
				if yyn1001 {
					r.EncodeNil()
				} else {
					if yyq998[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn1001 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[3] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[4] {
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1008 := z.DecBinary()
	_ = yym1008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1009 := r.ReadMapStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1009, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1009 := r.ReadArrayStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1010Slc
	var yyhl1010 bool = l >= 0
	for yyj1010 := 0; ; yyj1010++ {
		if yyhl1010 {
			if yyj1010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1010Slc = r.DecodeBytes(yys1010Slc, true, true)
		yys1010 := string(yys1010Slc)
		switch yys1010 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1010)
		} // end switch yys1010
	} // end for yyj1010
	if !yyhl1010 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1016 int
	var yyb1016 bool
	var yyhl1016 bool = l >= 0
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1016++
	if yyhl1016 {
		yyb1016 = yyj1016 > l
	} else {
		yyb1016 = r.CheckBreak()
	}
	if yyb1016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj1016++
		if yyhl1016 {
			yyb1016 = yyj1016 > l
		} else {
			yyb1016 = r.CheckBreak()
		}
		if yyb1016 {
			break
		}
		z.DecStructFieldNotFound(yyj1016-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1022 := z.EncBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1024 := z.EncBinary()
	_ = yym1024
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1025 := z.DecBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1026 := z.EncBinary()
		_ = yym1026
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1027 := !z.EncBinary()
			yy2arr1027 := z.EncBasicHandle().StructToArray
			var yyq1027 [2]bool
			_, _, _ = yysep1027, yyq1027, yy2arr1027
			const yyr1027 bool = false
			yyq1027[0] = len(x.Add) != 0
			yyq1027[1] = len(x.Drop) != 0
			if yyr1027 || yy2arr1027 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1027 int = 0
				for _, b := range yyq1027 {
					if b {
						yynn1027++
					}
				}
				r.EncodeMapStart(yynn1027)
			}
			if yyr1027 || yy2arr1027 {
				if yyq1027[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1027[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1030 := z.EncBinary()
						_ = yym1030
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1027 || yy2arr1027 {
				if yyq1027[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1032 := z.EncBinary()
						_ = yym1032
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1027[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1027 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1034 := z.DecBinary()
	_ = yym1034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1035 := r.ReadMapStart()
			if yyl1035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1035, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1035 := r.ReadArrayStart()
			if yyl1035 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1035, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1036Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1036Slc
	var yyhl1036 bool = l >= 0
	for yyj1036 := 0; ; yyj1036++ {
		if yyhl1036 {
			if yyj1036 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1036Slc = r.DecodeBytes(yys1036Slc, true, true)
		yys1036 := string(yys1036Slc)
		switch yys1036 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1037 := &x.Add
				yym1038 := z.DecBinary()
				_ = yym1038
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1037), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1039 := &x.Drop
				yym1040 := z.DecBinary()
				_ = yym1040
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1039), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1036)
		} // end switch yys1036
	} // end for yyj1036
	if !yyhl1036 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1041 int
	var yyb1041 bool
	var yyhl1041 bool = l >= 0
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1042 := &x.Add
		yym1043 := z.DecBinary()
		_ = yym1043
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1042), d)
		}
	}
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1044 := &x.Drop
		yym1045 := z.DecBinary()
		_ = yym1045
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1044), d)
		}
	}
	for {
		yyj1041++
		if yyhl1041 {
			yyb1041 = yyj1041 > l
		} else {
			yyb1041 = r.CheckBreak()
		}
		if yyb1041 {
			break
		}
		z.DecStructFieldNotFound(yyj1041-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1046 := z.EncBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1047 := !z.EncBinary()
			yy2arr1047 := z.EncBasicHandle().StructToArray
			var yyq1047 [2]bool
			_, _, _ = yysep1047, yyq1047, yy2arr1047
			const yyr1047 bool = false
			yyq1047[0] = len(x.Limits) != 0
			yyq1047[1] = len(x.Requests) != 0
			if yyr1047 || yy2arr1047 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1047 int = 0
				for _, b := range yyq1047 {
					if b {
						yynn1047++
					}
				}
				r.EncodeMapStart(yynn1047)
			}
			if yyr1047 || yy2arr1047 {
				if yyq1047[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				if yyq1047[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1047 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1051 := r.ReadMapStart()
			if yyl1051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1051, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1051 := r.ReadArrayStart()
			if yyl1051 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1052Slc
	var yyhl1052 bool = l >= 0
	for yyj1052 := 0; ; yyj1052++ {
		if yyhl1052 {
			if yyj1052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1052Slc = r.DecodeBytes(yys1052Slc, true, true)
		yys1052 := string(yys1052Slc)
		switch yys1052 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1053 := &x.Limits
				yyv1053.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1054 := &x.Requests
				yyv1054.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1052)
		} // end switch yys1052
	} // end for yyj1052
	if !yyhl1052 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1055 int
	var yyb1055 bool
	var yyhl1055 bool = l >= 0
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1056 := &x.Limits
		yyv1056.CodecDecodeSelf(d)
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1057 := &x.Requests
		yyv1057.CodecDecodeSelf(d)
	}
	for {
		yyj1055++
		if yyhl1055 {
			yyb1055 = yyj1055 > l
		} else {
			yyb1055 = r.CheckBreak()
		}
		if yyb1055 {
			break
		}
		z.DecStructFieldNotFound(yyj1055-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1058 := z.EncBinary()
		_ = yym1058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1059 := !z.EncBinary()
			yy2arr1059 := z.EncBasicHandle().StructToArray
			var yyq1059 [18]bool
			_, _, _ = yysep1059, yyq1059, yy2arr1059
			const yyr1059 bool = false
			yyq1059[2] = len(x.Command) != 0
			yyq1059[3] = len(x.Args) != 0
			yyq1059[4] = x.WorkingDir != ""
			yyq1059[5] = len(x.Ports) != 0
			yyq1059[6] = len(x.Env) != 0
			yyq1059[7] = true
			yyq1059[8] = len(x.VolumeMounts) != 0
			yyq1059[9] = x.LivenessProbe != nil
			yyq1059[10] = x.ReadinessProbe != nil
			yyq1059[11] = x.Lifecycle != nil
			yyq1059[12] = x.TerminationMessagePath != ""
			yyq1059[14] = x.SecurityContext != nil
			yyq1059[15] = x.Stdin != false
			yyq1059[16] = x.StdinOnce != false
			yyq1059[17] = x.TTY != false
			if yyr1059 || yy2arr1059 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1059 int = 3
				for _, b := range yyq1059 {
					if b {
						yynn1059++
					}
				}
				r.EncodeMapStart(yynn1059)
			}
			if yyr1059 || yy2arr1059 {
				yym1061 := z.EncBinary()
				_ = yym1061
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1059 || yy2arr1059 {
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1068 := z.EncBinary()
						_ = yym1068
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1070 := z.EncBinary()
						_ = yym1070
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1071 := z.EncBinary()
						_ = yym1071
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[4] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1076 := z.EncBinary()
						_ = yym1076
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1077 := z.EncBinary()
						_ = yym1077
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1080 := z.EncBinary()
						_ = yym1080
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[7] {
					yy1082 := &x.Resources
					yy1082.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1083 := &x.Resources
					yy1083.CodecEncodeSelf(e)
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1085 := z.EncBinary()
						_ = yym1085
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[12] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[15] {
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[16] {
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1100 := z.EncBinary()
					_ = yym1100
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				if yyq1059[17] {
					yym1102 := z.EncBinary()
					_ = yym1102
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1059[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1059 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1104 := z.DecBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1105 := r.ReadMapStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1105, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1105 := r.ReadArrayStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1106Slc
	var yyhl1106 bool = l >= 0
	for yyj1106 := 0; ; yyj1106++ {
		if yyhl1106 {
			if yyj1106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1106Slc = r.DecodeBytes(yys1106Slc, true, true)
		yys1106 := string(yys1106Slc)
		switch yys1106 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1109 := &x.Command
				yym1110 := z.DecBinary()
				_ = yym1110
				if false {
				} else {
					z.F.DecSliceStringX(yyv1109, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1111 := &x.Args
				yym1112 := z.DecBinary()
				_ = yym1112
				if false {
				} else {
					z.F.DecSliceStringX(yyv1111, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1114 := &x.Ports
				yym1115 := z.DecBinary()
				_ = yym1115
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1114), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1116 := &x.Env
				yym1117 := z.DecBinary()
				_ = yym1117
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1116), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1118 := &x.Resources
				yyv1118.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1119 := &x.VolumeMounts
				yym1120 := z.DecBinary()
				_ = yym1120
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1119), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1106)
		} // end switch yys1106
	} // end for yyj1106
	if !yyhl1106 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1133 := &x.Command
		yym1134 := z.DecBinary()
		_ = yym1134
		if false {
		} else {
			z.F.DecSliceStringX(yyv1133, false, d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1135 := &x.Args
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			z.F.DecSliceStringX(yyv1135, false, d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1138 := &x.Ports
		yym1139 := z.DecBinary()
		_ = yym1139
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1138), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1140 := &x.Env
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1140), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1142 := &x.Resources
		yyv1142.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1143 := &x.VolumeMounts
		yym1144 := z.DecBinary()
		_ = yym1144
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1143), d)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [3]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Exec != nil
			yyq1155[1] = x.HTTPGet != nil
			yyq1155[2] = x.TCPSocket != nil
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1159 := z.DecBinary()
	_ = yym1159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1160 := r.ReadMapStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1160, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1160 := r.ReadArrayStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1161Slc
	var yyhl1161 bool = l >= 0
	for yyj1161 := 0; ; yyj1161++ {
		if yyhl1161 {
			if yyj1161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1161Slc = r.DecodeBytes(yys1161Slc, true, true)
		yys1161 := string(yys1161Slc)
		switch yys1161 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1161)
		} // end switch yys1161
	} // end for yyj1161
	if !yyhl1161 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1165 int
	var yyb1165 bool
	var yyhl1165 bool = l >= 0
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1165++
		if yyhl1165 {
			yyb1165 = yyj1165 > l
		} else {
			yyb1165 = r.CheckBreak()
		}
		if yyb1165 {
			break
		}
		z.DecStructFieldNotFound(yyj1165-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1169 := z.EncBinary()
		_ = yym1169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1170 := !z.EncBinary()
			yy2arr1170 := z.EncBasicHandle().StructToArray
			var yyq1170 [2]bool
			_, _, _ = yysep1170, yyq1170, yy2arr1170
			const yyr1170 bool = false
			yyq1170[0] = x.PostStart != nil
			yyq1170[1] = x.PreStop != nil
			if yyr1170 || yy2arr1170 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1170 int = 0
				for _, b := range yyq1170 {
					if b {
						yynn1170++
					}
				}
				r.EncodeMapStart(yynn1170)
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1170 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1173 := z.DecBinary()
	_ = yym1173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1174 := r.ReadMapStart()
			if yyl1174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1174, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1174 := r.ReadArrayStart()
			if yyl1174 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1174, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1175Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1175Slc
	var yyhl1175 bool = l >= 0
	for yyj1175 := 0; ; yyj1175++ {
		if yyhl1175 {
			if yyj1175 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1175Slc = r.DecodeBytes(yys1175Slc, true, true)
		yys1175 := string(yys1175Slc)
		switch yys1175 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1175)
		} // end switch yys1175
	} // end for yyj1175
	if !yyhl1175 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1178 int
	var yyb1178 bool
	var yyhl1178 bool = l >= 0
	yyj1178++
	if yyhl1178 {
		yyb1178 = yyj1178 > l
	} else {
		yyb1178 = r.CheckBreak()
	}
	if yyb1178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1178++
	if yyhl1178 {
		yyb1178 = yyj1178 > l
	} else {
		yyb1178 = r.CheckBreak()
	}
	if yyb1178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1178++
		if yyhl1178 {
			yyb1178 = yyj1178 > l
		} else {
			yyb1178 = r.CheckBreak()
		}
		if yyb1178 {
			break
		}
		z.DecStructFieldNotFound(yyj1178-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1181 := z.EncBinary()
	_ = yym1181
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1182 := z.DecBinary()
	_ = yym1182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1183 := z.EncBinary()
		_ = yym1183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1184 := !z.EncBinary()
			yy2arr1184 := z.EncBasicHandle().StructToArray
			var yyq1184 [2]bool
			_, _, _ = yysep1184, yyq1184, yy2arr1184
			const yyr1184 bool = false
			yyq1184[0] = x.Reason != ""
			yyq1184[1] = x.Message != ""
			if yyr1184 || yy2arr1184 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1184 int = 0
				for _, b := range yyq1184 {
					if b {
						yynn1184++
					}
				}
				r.EncodeMapStart(yynn1184)
			}
			if yyr1184 || yy2arr1184 {
				if yyq1184[0] {
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1184[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1184 || yy2arr1184 {
				if yyq1184[1] {
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1184[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1184 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1191 := z.DecBinary()
	_ = yym1191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1192 := r.ReadMapStart()
			if yyl1192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1192, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1192 := r.ReadArrayStart()
			if yyl1192 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1193Slc
	var yyhl1193 bool = l >= 0
	for yyj1193 := 0; ; yyj1193++ {
		if yyhl1193 {
			if yyj1193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1193Slc = r.DecodeBytes(yys1193Slc, true, true)
		yys1193 := string(yys1193Slc)
		switch yys1193 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1193)
		} // end switch yys1193
	} // end for yyj1193
	if !yyhl1193 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1199 := z.EncBinary()
		_ = yym1199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1200 := !z.EncBinary()
			yy2arr1200 := z.EncBasicHandle().StructToArray
			var yyq1200 [1]bool
			_, _, _ = yysep1200, yyq1200, yy2arr1200
			const yyr1200 bool = false
			yyq1200[0] = true
			if yyr1200 || yy2arr1200 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1200 int = 0
				for _, b := range yyq1200 {
					if b {
						yynn1200++
					}
				}
				r.EncodeMapStart(yynn1200)
			}
			if yyr1200 || yy2arr1200 {
				if yyq1200[0] {
					yy1202 := &x.StartedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1200[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1204 := &x.StartedAt
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1204) {
					} else if yym1205 {
						z.EncBinaryMarshal(yy1204)
					} else if !yym1205 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1204)
					} else {
						z.EncFallback(yy1204)
					}
				}
			}
			if yysep1200 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		switch yys1208 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1209 := &x.StartedAt
				yym1210 := z.DecBinary()
				_ = yym1210
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1209) {
				} else if yym1210 {
					z.DecBinaryUnmarshal(yyv1209)
				} else if !yym1210 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1209)
				} else {
					z.DecFallback(yyv1209, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	if !yyhl1208 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1211 int
	var yyb1211 bool
	var yyhl1211 bool = l >= 0
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1212 := &x.StartedAt
		yym1213 := z.DecBinary()
		_ = yym1213
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1212) {
		} else if yym1213 {
			z.DecBinaryUnmarshal(yyv1212)
		} else if !yym1213 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1212)
		} else {
			z.DecFallback(yyv1212, false)
		}
	}
	for {
		yyj1211++
		if yyhl1211 {
			yyb1211 = yyj1211 > l
		} else {
			yyb1211 = r.CheckBreak()
		}
		if yyb1211 {
			break
		}
		z.DecStructFieldNotFound(yyj1211-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1214 := z.EncBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1215 := !z.EncBinary()
			yy2arr1215 := z.EncBasicHandle().StructToArray
			var yyq1215 [7]bool
			_, _, _ = yysep1215, yyq1215, yy2arr1215
			const yyr1215 bool = false
			yyq1215[1] = x.Signal != 0
			yyq1215[2] = x.Reason != ""
			yyq1215[3] = x.Message != ""
			yyq1215[4] = true
			yyq1215[5] = true
			yyq1215[6] = x.ContainerID != ""
			if yyr1215 || yy2arr1215 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1215 int = 1
				for _, b := range yyq1215 {
					if b {
						yynn1215++
					}
				}
				r.EncodeMapStart(yynn1215)
			}
			if yyr1215 || yy2arr1215 {
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1218 := z.EncBinary()
				_ = yym1218
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[1] {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1215[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[2] {
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[3] {
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[4] {
					yy1229 := &x.StartedAt
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1229) {
					} else if yym1230 {
						z.EncBinaryMarshal(yy1229)
					} else if !yym1230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1229)
					} else {
						z.EncFallback(yy1229)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1231 := &x.StartedAt
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1231) {
					} else if yym1232 {
						z.EncBinaryMarshal(yy1231)
					} else if !yym1232 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1231)
					} else {
						z.EncFallback(yy1231)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[5] {
					yy1234 := &x.FinishedAt
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1234) {
					} else if yym1235 {
						z.EncBinaryMarshal(yy1234)
					} else if !yym1235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1234)
					} else {
						z.EncFallback(yy1234)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1236 := &x.FinishedAt
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1236) {
					} else if yym1237 {
						z.EncBinaryMarshal(yy1236)
					} else if !yym1237 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1236)
					} else {
						z.EncFallback(yy1236)
					}
				}
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[6] {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1215[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1215 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1241 := z.DecBinary()
	_ = yym1241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1242 := r.ReadMapStart()
			if yyl1242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1242 := r.ReadArrayStart()
			if yyl1242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1243Slc
	var yyhl1243 bool = l >= 0
	for yyj1243 := 0; ; yyj1243++ {
		if yyhl1243 {
			if yyj1243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1243Slc = r.DecodeBytes(yys1243Slc, true, true)
		yys1243 := string(yys1243Slc)
		switch yys1243 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1248 := &x.StartedAt
				yym1249 := z.DecBinary()
				_ = yym1249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1248) {
				} else if yym1249 {
					z.DecBinaryUnmarshal(yyv1248)
				} else if !yym1249 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1248)
				} else {
					z.DecFallback(yyv1248, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1250 := &x.FinishedAt
				yym1251 := z.DecBinary()
				_ = yym1251
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1250) {
				} else if yym1251 {
					z.DecBinaryUnmarshal(yyv1250)
				} else if !yym1251 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1250)
				} else {
					z.DecFallback(yyv1250, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1243)
		} // end switch yys1243
	} // end for yyj1243
	if !yyhl1243 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1253 int
	var yyb1253 bool
	var yyhl1253 bool = l >= 0
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1258 := &x.StartedAt
		yym1259 := z.DecBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1258) {
		} else if yym1259 {
			z.DecBinaryUnmarshal(yyv1258)
		} else if !yym1259 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1258)
		} else {
			z.DecFallback(yyv1258, false)
		}
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1260 := &x.FinishedAt
		yym1261 := z.DecBinary()
		_ = yym1261
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1260) {
		} else if yym1261 {
			z.DecBinaryUnmarshal(yyv1260)
		} else if !yym1261 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1260)
		} else {
			z.DecFallback(yyv1260, false)
		}
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1253++
		if yyhl1253 {
			yyb1253 = yyj1253 > l
		} else {
			yyb1253 = r.CheckBreak()
		}
		if yyb1253 {
			break
		}
		z.DecStructFieldNotFound(yyj1253-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1263 := z.EncBinary()
		_ = yym1263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1264 := !z.EncBinary()
			yy2arr1264 := z.EncBasicHandle().StructToArray
			var yyq1264 [3]bool
			_, _, _ = yysep1264, yyq1264, yy2arr1264
			const yyr1264 bool = false
			yyq1264[0] = x.Waiting != nil
			yyq1264[1] = x.Running != nil
			yyq1264[2] = x.Terminated != nil
			if yyr1264 || yy2arr1264 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1264 int = 0
				for _, b := range yyq1264 {
					if b {
						yynn1264++
					}
				}
				r.EncodeMapStart(yynn1264)
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1264 || yy2arr1264 {
				if yyq1264[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1264[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1264 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1268 := z.DecBinary()
	_ = yym1268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1269 := r.ReadMapStart()
			if yyl1269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1269, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1269 := r.ReadArrayStart()
			if yyl1269 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1270Slc
	var yyhl1270 bool = l >= 0
	for yyj1270 := 0; ; yyj1270++ {
		if yyhl1270 {
			if yyj1270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1270Slc = r.DecodeBytes(yys1270Slc, true, true)
		yys1270 := string(yys1270Slc)
		switch yys1270 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1270)
		} // end switch yys1270
	} // end for yyj1270
	if !yyhl1270 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1274 int
	var yyb1274 bool
	var yyhl1274 bool = l >= 0
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1274++
		if yyhl1274 {
			yyb1274 = yyj1274 > l
		} else {
			yyb1274 = r.CheckBreak()
		}
		if yyb1274 {
			break
		}
		z.DecStructFieldNotFound(yyj1274-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1278 := z.EncBinary()
		_ = yym1278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1279 := !z.EncBinary()
			yy2arr1279 := z.EncBasicHandle().StructToArray
			var yyq1279 [8]bool
			_, _, _ = yysep1279, yyq1279, yy2arr1279
			const yyr1279 bool = false
			yyq1279[1] = true
			yyq1279[2] = true
			yyq1279[7] = x.ContainerID != ""
			if yyr1279 || yy2arr1279 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1279 int = 5
				for _, b := range yyq1279 {
					if b {
						yynn1279++
					}
				}
				r.EncodeMapStart(yynn1279)
			}
			if yyr1279 || yy2arr1279 {
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[1] {
					yy1284 := &x.State
					yy1284.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1285 := &x.State
					yy1285.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[2] {
					yy1287 := &x.LastTerminationState
					yy1287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1288 := &x.LastTerminationState
					yy1288.CodecEncodeSelf(e)
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1279 || yy2arr1279 {
				yym1299 := z.EncBinary()
				_ = yym1299
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1300 := z.EncBinary()
				_ = yym1300
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[7] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1279[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1279 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1304 := z.DecBinary()
	_ = yym1304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1305 := r.ReadMapStart()
			if yyl1305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1305, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1305 := r.ReadArrayStart()
			if yyl1305 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1306Slc
	var yyhl1306 bool = l >= 0
	for yyj1306 := 0; ; yyj1306++ {
		if yyhl1306 {
			if yyj1306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1306Slc = r.DecodeBytes(yys1306Slc, true, true)
		yys1306 := string(yys1306Slc)
		switch yys1306 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1308 := &x.State
				yyv1308.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1309 := &x.LastTerminationState
				yyv1309.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1306)
		} // end switch yys1306
	} // end for yyj1306
	if !yyhl1306 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1315 int
	var yyb1315 bool
	var yyhl1315 bool = l >= 0
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1317 := &x.State
		yyv1317.CodecDecodeSelf(d)
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1318 := &x.LastTerminationState
		yyv1318.CodecDecodeSelf(d)
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1315++
		if yyhl1315 {
			yyb1315 = yyj1315 > l
		} else {
			yyb1315 = r.CheckBreak()
		}
		if yyb1315 {
			break
		}
		z.DecStructFieldNotFound(yyj1315-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1324 := z.EncBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1325 := z.DecBinary()
	_ = yym1325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1326 := z.EncBinary()
	_ = yym1326
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1327 := z.DecBinary()
	_ = yym1327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1328 := z.EncBinary()
		_ = yym1328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1329 := !z.EncBinary()
			yy2arr1329 := z.EncBasicHandle().StructToArray
			var yyq1329 [6]bool
			_, _, _ = yysep1329, yyq1329, yy2arr1329
			const yyr1329 bool = false
			yyq1329[2] = true
			yyq1329[3] = true
			yyq1329[4] = x.Reason != ""
			yyq1329[5] = x.Message != ""
			if yyr1329 || yy2arr1329 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1329 int = 2
				for _, b := range yyq1329 {
					if b {
						yynn1329++
					}
				}
				r.EncodeMapStart(yynn1329)
			}
			if yyr1329 || yy2arr1329 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1329 || yy2arr1329 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[2] {
					yy1333 := &x.LastProbeTime
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1333) {
					} else if yym1334 {
						z.EncBinaryMarshal(yy1333)
					} else if !yym1334 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1333)
					} else {
						z.EncFallback(yy1333)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1329[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1335 := &x.LastProbeTime
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1335) {
					} else if yym1336 {
						z.EncBinaryMarshal(yy1335)
					} else if !yym1336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1335)
					} else {
						z.EncFallback(yy1335)
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[3] {
					yy1338 := &x.LastTransitionTime
					yym1339 := z.EncBinary()
					_ = yym1339
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1338) {
					} else if yym1339 {
						z.EncBinaryMarshal(yy1338)
					} else if !yym1339 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1338)
					} else {
						z.EncFallback(yy1338)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1329[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1340 := &x.LastTransitionTime
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1340) {
					} else if yym1341 {
						z.EncBinaryMarshal(yy1340)
					} else if !yym1341 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1340)
					} else {
						z.EncFallback(yy1340)
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[4] {
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1329[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1344 := z.EncBinary()
					_ = yym1344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1329 || yy2arr1329 {
				if yyq1329[5] {
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1329[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1347 := z.EncBinary()
					_ = yym1347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1329 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1348 := z.DecBinary()
	_ = yym1348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1349 := r.ReadMapStart()
			if yyl1349 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1349, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1349 := r.ReadArrayStart()
			if yyl1349 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1350Slc
	var yyhl1350 bool = l >= 0
	for yyj1350 := 0; ; yyj1350++ {
		if yyhl1350 {
			if yyj1350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1350Slc = r.DecodeBytes(yys1350Slc, true, true)
		yys1350 := string(yys1350Slc)
		switch yys1350 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1353 := &x.LastProbeTime
				yym1354 := z.DecBinary()
				_ = yym1354
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1353) {
				} else if yym1354 {
					z.DecBinaryUnmarshal(yyv1353)
				} else if !yym1354 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1353)
				} else {
					z.DecFallback(yyv1353, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1355 := &x.LastTransitionTime
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1355) {
				} else if yym1356 {
					z.DecBinaryUnmarshal(yyv1355)
				} else if !yym1356 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1355)
				} else {
					z.DecFallback(yyv1355, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1350)
		} // end switch yys1350
	} // end for yyj1350
	if !yyhl1350 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1359 int
	var yyb1359 bool
	var yyhl1359 bool = l >= 0
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1362 := &x.LastProbeTime
		yym1363 := z.DecBinary()
		_ = yym1363
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1362) {
		} else if yym1363 {
			z.DecBinaryUnmarshal(yyv1362)
		} else if !yym1363 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1362)
		} else {
			z.DecFallback(yyv1362, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1364 := &x.LastTransitionTime
		yym1365 := z.DecBinary()
		_ = yym1365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1364) {
		} else if yym1365 {
			z.DecBinaryUnmarshal(yyv1364)
		} else if !yym1365 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1364)
		} else {
			z.DecFallback(yyv1364, false)
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1359++
		if yyhl1359 {
			yyb1359 = yyj1359 > l
		} else {
			yyb1359 = r.CheckBreak()
		}
		if yyb1359 {
			break
		}
		z.DecStructFieldNotFound(yyj1359-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1368 := z.EncBinary()
	_ = yym1368
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1369 := z.DecBinary()
	_ = yym1369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1370 := z.EncBinary()
		_ = yym1370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1371 := !z.EncBinary()
			yy2arr1371 := z.EncBasicHandle().StructToArray
			var yyq1371 [4]bool
			_, _, _ = yysep1371, yyq1371, yy2arr1371
			const yyr1371 bool = false
			yyq1371[0] = x.Kind != ""
			yyq1371[1] = x.APIVersion != ""
			yyq1371[2] = true
			if yyr1371 || yy2arr1371 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1371 int = 1
				for _, b := range yyq1371 {
					if b {
						yynn1371++
					}
				}
				r.EncodeMapStart(yynn1371)
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[0] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[1] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if yyq1371[2] {
					yy1379 := &x.ListMeta
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1379) {
					} else {
						z.EncFallback(yy1379)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1371[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1381 := &x.ListMeta
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1381) {
					} else {
						z.EncFallback(yy1381)
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1371 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1386 := z.DecBinary()
	_ = yym1386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1387 := r.ReadMapStart()
			if yyl1387 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1387, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1387 := r.ReadArrayStart()
			if yyl1387 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1388Slc
	var yyhl1388 bool = l >= 0
	for yyj1388 := 0; ; yyj1388++ {
		if yyhl1388 {
			if yyj1388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1388Slc = r.DecodeBytes(yys1388Slc, true, true)
		yys1388 := string(yys1388Slc)
		switch yys1388 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1391 := &x.ListMeta
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1391) {
				} else {
					z.DecFallback(yyv1391, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1393 := &x.Items
				yym1394 := z.DecBinary()
				_ = yym1394
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1393), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1388)
		} // end switch yys1388
	} // end for yyj1388
	if !yyhl1388 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1395 int
	var yyb1395 bool
	var yyhl1395 bool = l >= 0
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1398 := &x.ListMeta
		yym1399 := z.DecBinary()
		_ = yym1399
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1398) {
		} else {
			z.DecFallback(yyv1398, false)
		}
	}
	yyj1395++
	if yyhl1395 {
		yyb1395 = yyj1395 > l
	} else {
		yyb1395 = r.CheckBreak()
	}
	if yyb1395 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1400 := &x.Items
		yym1401 := z.DecBinary()
		_ = yym1401
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1400), d)
		}
	}
	for {
		yyj1395++
		if yyhl1395 {
			yyb1395 = yyj1395 > l
		} else {
			yyb1395 = r.CheckBreak()
		}
		if yyb1395 {
			break
		}
		z.DecStructFieldNotFound(yyj1395-1, "")
	}
	r.ReadEnd()
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1402 := z.EncBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1403 := z.DecBinary()
	_ = yym1403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1404 := z.EncBinary()
		_ = yym1404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1405 := !z.EncBinary()
			yy2arr1405 := z.EncBasicHandle().StructToArray
			var yyq1405 [11]bool
			_, _, _ = yysep1405, yyq1405, yy2arr1405
			const yyr1405 bool = false
			yyq1405[2] = x.RestartPolicy != ""
			yyq1405[3] = x.TerminationGracePeriodSeconds != nil
			yyq1405[4] = x.ActiveDeadlineSeconds != nil
			yyq1405[5] = x.DNSPolicy != ""
			yyq1405[6] = len(x.NodeSelector) != 0
			yyq1405[8] = x.NodeName != ""
			yyq1405[9] = x.SecurityContext != nil
			yyq1405[10] = len(x.ImagePullSecrets) != 0
			if yyr1405 || yy2arr1405 {
				r.EncodeArrayStart(11)
			} else {
				var yynn1405 int = 3
				for _, b := range yyq1405 {
					if b {
						yynn1405++
					}
				}
				r.EncodeMapStart(yynn1405)
			}
			if yyr1405 || yy2arr1405 {
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1414 := *x.TerminationGracePeriodSeconds
						yym1415 := z.EncBinary()
						_ = yym1415
						if false {
						} else {
							r.EncodeInt(int64(yy1414))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1416 := *x.TerminationGracePeriodSeconds
						yym1417 := z.EncBinary()
						_ = yym1417
						if false {
						} else {
							r.EncodeInt(int64(yy1416))
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1419 := *x.ActiveDeadlineSeconds
						yym1420 := z.EncBinary()
						_ = yym1420
						if false {
						} else {
							r.EncodeInt(int64(yy1419))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1421 := *x.ActiveDeadlineSeconds
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							r.EncodeInt(int64(yy1421))
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1425 := z.EncBinary()
						_ = yym1425
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1426 := z.EncBinary()
						_ = yym1426
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				yym1429 := z.EncBinary()
				_ = yym1429
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[8] {
					yym1431 := z.EncBinary()
					_ = yym1431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1405[8] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[9] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1405 || yy2arr1405 {
				if yyq1405[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1435 := z.EncBinary()
						_ = yym1435
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1405[10] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1436 := z.EncBinary()
						_ = yym1436
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1405 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1437 := z.DecBinary()
	_ = yym1437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1438 := r.ReadMapStart()
			if yyl1438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1438, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1438 := r.ReadArrayStart()
			if yyl1438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1439Slc
	var yyhl1439 bool = l >= 0
	for yyj1439 := 0; ; yyj1439++ {
		if yyhl1439 {
			if yyj1439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1439Slc = r.DecodeBytes(yys1439Slc, true, true)
		yys1439 := string(yys1439Slc)
		switch yys1439 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1440 := &x.Volumes
				yym1441 := z.DecBinary()
				_ = yym1441
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1440), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1442 := &x.Containers
				yym1443 := z.DecBinary()
				_ = yym1443
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1442), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1446 := z.DecBinary()
				_ = yym1446
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1448 := z.DecBinary()
				_ = yym1448
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1450 := &x.NodeSelector
				yym1451 := z.DecBinary()
				_ = yym1451
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1450, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1455 := &x.ImagePullSecrets
				yym1456 := z.DecBinary()
				_ = yym1456
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1455), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1439)
		} // end switch yys1439
	} // end for yyj1439
	if !yyhl1439 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1457 int
	var yyb1457 bool
	var yyhl1457 bool = l >= 0
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1458 := &x.Volumes
		yym1459 := z.DecBinary()
		_ = yym1459
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1458), d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1460 := &x.Containers
		yym1461 := z.DecBinary()
		_ = yym1461
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1460), d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1464 := z.DecBinary()
		_ = yym1464
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1466 := z.DecBinary()
		_ = yym1466
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1468 := &x.NodeSelector
		yym1469 := z.DecBinary()
		_ = yym1469
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1468, false, d)
		}
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1473 := &x.ImagePullSecrets
		yym1474 := z.DecBinary()
		_ = yym1474
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1473), d)
		}
	}
	for {
		yyj1457++
		if yyhl1457 {
			yyb1457 = yyj1457 > l
		} else {
			yyb1457 = r.CheckBreak()
		}
		if yyb1457 {
			break
		}
		z.DecStructFieldNotFound(yyj1457-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1475 := z.EncBinary()
		_ = yym1475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1476 := !z.EncBinary()
			yy2arr1476 := z.EncBasicHandle().StructToArray
			var yyq1476 [4]bool
			_, _, _ = yysep1476, yyq1476, yy2arr1476
			const yyr1476 bool = false
			yyq1476[0] = x.HostNetwork != false
			yyq1476[1] = x.HostPID != false
			yyq1476[2] = x.HostIPC != false
			yyq1476[3] = len(x.SupplementalGroups) != 0
			if yyr1476 || yy2arr1476 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1476 int = 0
				for _, b := range yyq1476 {
					if b {
						yynn1476++
					}
				}
				r.EncodeMapStart(yynn1476)
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[0] {
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[1] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[2] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1476[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				if yyq1476[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1487 := z.EncBinary()
						_ = yym1487
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1488 := z.EncBinary()
						_ = yym1488
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yysep1476 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1489 := z.DecBinary()
	_ = yym1489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1490 := r.ReadMapStart()
			if yyl1490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1490, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1490 := r.ReadArrayStart()
			if yyl1490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1491Slc
	var yyhl1491 bool = l >= 0
	for yyj1491 := 0; ; yyj1491++ {
		if yyhl1491 {
			if yyj1491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1491Slc = r.DecodeBytes(yys1491Slc, true, true)
		yys1491 := string(yys1491Slc)
		switch yys1491 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1495 := &x.SupplementalGroups
				yym1496 := z.DecBinary()
				_ = yym1496
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1495, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1491)
		} // end switch yys1491
	} // end for yyj1491
	if !yyhl1491 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1497 int
	var yyb1497 bool
	var yyhl1497 bool = l >= 0
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1497++
	if yyhl1497 {
		yyb1497 = yyj1497 > l
	} else {
		yyb1497 = r.CheckBreak()
	}
	if yyb1497 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1501 := &x.SupplementalGroups
		yym1502 := z.DecBinary()
		_ = yym1502
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1501, false, d)
		}
	}
	for {
		yyj1497++
		if yyhl1497 {
			yyb1497 = yyj1497 > l
		} else {
			yyb1497 = r.CheckBreak()
		}
		if yyb1497 {
			break
		}
		z.DecStructFieldNotFound(yyj1497-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1503 := z.EncBinary()
		_ = yym1503
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1504 := !z.EncBinary()
			yy2arr1504 := z.EncBasicHandle().StructToArray
			var yyq1504 [8]bool
			_, _, _ = yysep1504, yyq1504, yy2arr1504
			const yyr1504 bool = false
			yyq1504[0] = x.Phase != ""
			yyq1504[1] = len(x.Conditions) != 0
			yyq1504[2] = x.Message != ""
			yyq1504[3] = x.Reason != ""
			yyq1504[4] = x.HostIP != ""
			yyq1504[5] = x.PodIP != ""
			yyq1504[6] = x.StartTime != nil
			yyq1504[7] = len(x.ContainerStatuses) != 0
			if yyr1504 || yy2arr1504 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1504 int = 0
				for _, b := range yyq1504 {
					if b {
						yynn1504++
					}
				}
				r.EncodeMapStart(yynn1504)
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1504[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1508 := z.EncBinary()
						_ = yym1508
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[2] {
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[3] {
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[4] {
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[5] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1522 := z.EncBinary()
						_ = yym1522
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1522 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1522 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1504[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1523 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1523 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				if yyq1504[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1525 := z.EncBinary()
						_ = yym1525
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1504[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1504 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1527 := z.DecBinary()
	_ = yym1527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1528 := r.ReadMapStart()
			if yyl1528 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1528, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1528 := r.ReadArrayStart()
			if yyl1528 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1529Slc
	var yyhl1529 bool = l >= 0
	for yyj1529 := 0; ; yyj1529++ {
		if yyhl1529 {
			if yyj1529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1529Slc = r.DecodeBytes(yys1529Slc, true, true)
		yys1529 := string(yys1529Slc)
		switch yys1529 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1531 := &x.Conditions
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1531), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1538 := z.DecBinary()
				_ = yym1538
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1538 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1538 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1539 := &x.ContainerStatuses
				yym1540 := z.DecBinary()
				_ = yym1540
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1529)
		} // end switch yys1529
	} // end for yyj1529
	if !yyhl1529 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1541 int
	var yyb1541 bool
	var yyhl1541 bool = l >= 0
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1543 := &x.Conditions
		yym1544 := z.DecBinary()
		_ = yym1544
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1543), d)
		}
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1550 := z.DecBinary()
		_ = yym1550
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1550 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1550 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1551 := &x.ContainerStatuses
		yym1552 := z.DecBinary()
		_ = yym1552
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1551), d)
		}
	}
	for {
		yyj1541++
		if yyhl1541 {
			yyb1541 = yyj1541 > l
		} else {
			yyb1541 = r.CheckBreak()
		}
		if yyb1541 {
			break
		}
		z.DecStructFieldNotFound(yyj1541-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1553 := z.EncBinary()
		_ = yym1553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1554 := !z.EncBinary()
			yy2arr1554 := z.EncBasicHandle().StructToArray
			var yyq1554 [4]bool
			_, _, _ = yysep1554, yyq1554, yy2arr1554
			const yyr1554 bool = false
			yyq1554[0] = x.Kind != ""
			yyq1554[1] = x.APIVersion != ""
			yyq1554[2] = true
			yyq1554[3] = true
			if yyr1554 || yy2arr1554 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1554 int = 0
				for _, b := range yyq1554 {
					if b {
						yynn1554++
					}
				}
				r.EncodeMapStart(yynn1554)
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[0] {
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[1] {
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1554[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[2] {
					yy1562 := &x.ObjectMeta
					yy1562.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1563 := &x.ObjectMeta
					yy1563.CodecEncodeSelf(e)
				}
			}
			if yyr1554 || yy2arr1554 {
				if yyq1554[3] {
					yy1565 := &x.Status
					yy1565.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1554[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1566 := &x.Status
					yy1566.CodecEncodeSelf(e)
				}
			}
			if yysep1554 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1567 := z.DecBinary()
	_ = yym1567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1568 := r.ReadMapStart()
			if yyl1568 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1568, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1568 := r.ReadArrayStart()
			if yyl1568 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1569Slc
	var yyhl1569 bool = l >= 0
	for yyj1569 := 0; ; yyj1569++ {
		if yyhl1569 {
			if yyj1569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1569Slc = r.DecodeBytes(yys1569Slc, true, true)
		yys1569 := string(yys1569Slc)
		switch yys1569 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1572 := &x.ObjectMeta
				yyv1572.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1573 := &x.Status
				yyv1573.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1569)
		} // end switch yys1569
	} // end for yyj1569
	if !yyhl1569 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1574 int
	var yyb1574 bool
	var yyhl1574 bool = l >= 0
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1577 := &x.ObjectMeta
		yyv1577.CodecDecodeSelf(d)
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1578 := &x.Status
		yyv1578.CodecDecodeSelf(d)
	}
	for {
		yyj1574++
		if yyhl1574 {
			yyb1574 = yyj1574 > l
		} else {
			yyb1574 = r.CheckBreak()
		}
		if yyb1574 {
			break
		}
		z.DecStructFieldNotFound(yyj1574-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1579 := z.EncBinary()
		_ = yym1579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1580 := !z.EncBinary()
			yy2arr1580 := z.EncBasicHandle().StructToArray
			var yyq1580 [5]bool
			_, _, _ = yysep1580, yyq1580, yy2arr1580
			const yyr1580 bool = false
			yyq1580[0] = x.Kind != ""
			yyq1580[1] = x.APIVersion != ""
			yyq1580[2] = true
			yyq1580[3] = true
			yyq1580[4] = true
			if yyr1580 || yy2arr1580 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1580 int = 0
				for _, b := range yyq1580 {
					if b {
						yynn1580++
					}
				}
				r.EncodeMapStart(yynn1580)
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[0] {
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1580[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1583 := z.EncBinary()
					_ = yym1583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[1] {
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1580[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1586 := z.EncBinary()
					_ = yym1586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[2] {
					yy1588 := &x.ObjectMeta
					yy1588.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1589 := &x.ObjectMeta
					yy1589.CodecEncodeSelf(e)
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[3] {
					yy1591 := &x.Spec
					yy1591.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1592 := &x.Spec
					yy1592.CodecEncodeSelf(e)
				}
			}
			if yyr1580 || yy2arr1580 {
				if yyq1580[4] {
					yy1594 := &x.Status
					yy1594.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1580[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1595 := &x.Status
					yy1595.CodecEncodeSelf(e)
				}
			}
			if yysep1580 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1596 := z.DecBinary()
	_ = yym1596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1597 := r.ReadMapStart()
			if yyl1597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1597, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1597 := r.ReadArrayStart()
			if yyl1597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1598Slc
	var yyhl1598 bool = l >= 0
	for yyj1598 := 0; ; yyj1598++ {
		if yyhl1598 {
			if yyj1598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1598Slc = r.DecodeBytes(yys1598Slc, true, true)
		yys1598 := string(yys1598Slc)
		switch yys1598 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1601 := &x.ObjectMeta
				yyv1601.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1602 := &x.Spec
				yyv1602.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1603 := &x.Status
				yyv1603.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1598)
		} // end switch yys1598
	} // end for yyj1598
	if !yyhl1598 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1604 int
	var yyb1604 bool
	var yyhl1604 bool = l >= 0
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1607 := &x.ObjectMeta
		yyv1607.CodecDecodeSelf(d)
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1608 := &x.Spec
		yyv1608.CodecDecodeSelf(d)
	}
	yyj1604++
	if yyhl1604 {
		yyb1604 = yyj1604 > l
	} else {
		yyb1604 = r.CheckBreak()
	}
	if yyb1604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1609 := &x.Status
		yyv1609.CodecDecodeSelf(d)
	}
	for {
		yyj1604++
		if yyhl1604 {
			yyb1604 = yyj1604 > l
		} else {
			yyb1604 = r.CheckBreak()
		}
		if yyb1604 {
			break
		}
		z.DecStructFieldNotFound(yyj1604-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1610 := z.EncBinary()
		_ = yym1610
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1611 := !z.EncBinary()
			yy2arr1611 := z.EncBasicHandle().StructToArray
			var yyq1611 [2]bool
			_, _, _ = yysep1611, yyq1611, yy2arr1611
			const yyr1611 bool = false
			yyq1611[0] = true
			yyq1611[1] = true
			if yyr1611 || yy2arr1611 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1611 int = 0
				for _, b := range yyq1611 {
					if b {
						yynn1611++
					}
				}
				r.EncodeMapStart(yynn1611)
			}
			if yyr1611 || yy2arr1611 {
				if yyq1611[0] {
					yy1613 := &x.ObjectMeta
					yy1613.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1611[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1614 := &x.ObjectMeta
					yy1614.CodecEncodeSelf(e)
				}
			}
			if yyr1611 || yy2arr1611 {
				if yyq1611[1] {
					yy1616 := &x.Spec
					yy1616.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1611[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1617 := &x.Spec
					yy1617.CodecEncodeSelf(e)
				}
			}
			if yysep1611 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1618 := z.DecBinary()
	_ = yym1618
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1619 := r.ReadMapStart()
			if yyl1619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1619, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1619 := r.ReadArrayStart()
			if yyl1619 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1619, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1620Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1620Slc
	var yyhl1620 bool = l >= 0
	for yyj1620 := 0; ; yyj1620++ {
		if yyhl1620 {
			if yyj1620 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1620Slc = r.DecodeBytes(yys1620Slc, true, true)
		yys1620 := string(yys1620Slc)
		switch yys1620 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1621 := &x.ObjectMeta
				yyv1621.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1622 := &x.Spec
				yyv1622.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1620)
		} // end switch yys1620
	} // end for yyj1620
	if !yyhl1620 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1623 int
	var yyb1623 bool
	var yyhl1623 bool = l >= 0
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1624 := &x.ObjectMeta
		yyv1624.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1625 := &x.Spec
		yyv1625.CodecDecodeSelf(d)
	}
	for {
		yyj1623++
		if yyhl1623 {
			yyb1623 = yyj1623 > l
		} else {
			yyb1623 = r.CheckBreak()
		}
		if yyb1623 {
			break
		}
		z.DecStructFieldNotFound(yyj1623-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1626 := z.EncBinary()
		_ = yym1626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1627 := !z.EncBinary()
			yy2arr1627 := z.EncBasicHandle().StructToArray
			var yyq1627 [4]bool
			_, _, _ = yysep1627, yyq1627, yy2arr1627
			const yyr1627 bool = false
			yyq1627[0] = x.Kind != ""
			yyq1627[1] = x.APIVersion != ""
			yyq1627[2] = true
			yyq1627[3] = true
			if yyr1627 || yy2arr1627 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1627 int = 0
				for _, b := range yyq1627 {
					if b {
						yynn1627++
					}
				}
				r.EncodeMapStart(yynn1627)
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[0] {
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1627[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[1] {
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1627[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1633 := z.EncBinary()
					_ = yym1633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[2] {
					yy1635 := &x.ObjectMeta
					yy1635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1627[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1636 := &x.ObjectMeta
					yy1636.CodecEncodeSelf(e)
				}
			}
			if yyr1627 || yy2arr1627 {
				if yyq1627[3] {
					yy1638 := &x.Template
					yy1638.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1627[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1639 := &x.Template
					yy1639.CodecEncodeSelf(e)
				}
			}
			if yysep1627 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1640 := z.DecBinary()
	_ = yym1640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1641 := r.ReadMapStart()
			if yyl1641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1641, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1641 := r.ReadArrayStart()
			if yyl1641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1642Slc
	var yyhl1642 bool = l >= 0
	for yyj1642 := 0; ; yyj1642++ {
		if yyhl1642 {
			if yyj1642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1642Slc = r.DecodeBytes(yys1642Slc, true, true)
		yys1642 := string(yys1642Slc)
		switch yys1642 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1645 := &x.ObjectMeta
				yyv1645.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1646 := &x.Template
				yyv1646.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1642)
		} // end switch yys1642
	} // end for yyj1642
	if !yyhl1642 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1647 int
	var yyb1647 bool
	var yyhl1647 bool = l >= 0
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1650 := &x.ObjectMeta
		yyv1650.CodecDecodeSelf(d)
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1651 := &x.Template
		yyv1651.CodecDecodeSelf(d)
	}
	for {
		yyj1647++
		if yyhl1647 {
			yyb1647 = yyj1647 > l
		} else {
			yyb1647 = r.CheckBreak()
		}
		if yyb1647 {
			break
		}
		z.DecStructFieldNotFound(yyj1647-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1652 := z.EncBinary()
		_ = yym1652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1653 := !z.EncBinary()
			yy2arr1653 := z.EncBasicHandle().StructToArray
			var yyq1653 [4]bool
			_, _, _ = yysep1653, yyq1653, yy2arr1653
			const yyr1653 bool = false
			yyq1653[0] = x.Kind != ""
			yyq1653[1] = x.APIVersion != ""
			yyq1653[2] = true
			if yyr1653 || yy2arr1653 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1653 int = 1
				for _, b := range yyq1653 {
					if b {
						yynn1653++
					}
				}
				r.EncodeMapStart(yynn1653)
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[0] {
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[1] {
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[2] {
					yy1661 := &x.ListMeta
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1661) {
					} else {
						z.EncFallback(yy1661)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1663 := &x.ListMeta
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1663) {
					} else {
						z.EncFallback(yy1663)
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1666 := z.EncBinary()
					_ = yym1666
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1653 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		switch yys1670 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1673 := &x.ListMeta
				yym1674 := z.DecBinary()
				_ = yym1674
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1673) {
				} else {
					z.DecFallback(yyv1673, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1675 := &x.Items
				yym1676 := z.DecBinary()
				_ = yym1676
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1675), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	if !yyhl1670 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1677 int
	var yyb1677 bool
	var yyhl1677 bool = l >= 0
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1680 := &x.ListMeta
		yym1681 := z.DecBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1680) {
		} else {
			z.DecFallback(yyv1680, false)
		}
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1682 := &x.Items
		yym1683 := z.DecBinary()
		_ = yym1683
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1682), d)
		}
	}
	for {
		yyj1677++
		if yyhl1677 {
			yyb1677 = yyj1677 > l
		} else {
			yyb1677 = r.CheckBreak()
		}
		if yyb1677 {
			break
		}
		z.DecStructFieldNotFound(yyj1677-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1684 := z.EncBinary()
		_ = yym1684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1685 := !z.EncBinary()
			yy2arr1685 := z.EncBasicHandle().StructToArray
			var yyq1685 [3]bool
			_, _, _ = yysep1685, yyq1685, yy2arr1685
			const yyr1685 bool = false
			yyq1685[2] = x.Template != nil
			if yyr1685 || yy2arr1685 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1685 int = 2
				for _, b := range yyq1685 {
					if b {
						yynn1685++
					}
				}
				r.EncodeMapStart(yynn1685)
			}
			if yyr1685 || yy2arr1685 {
				yym1687 := z.EncBinary()
				_ = yym1687
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1688 := z.EncBinary()
				_ = yym1688
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1685 || yy2arr1685 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1685 || yy2arr1685 {
				if yyq1685[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1685[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1685 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1693 := z.DecBinary()
	_ = yym1693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1694 := r.ReadMapStart()
			if yyl1694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1694 := r.ReadArrayStart()
			if yyl1694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1695Slc
	var yyhl1695 bool = l >= 0
	for yyj1695 := 0; ; yyj1695++ {
		if yyhl1695 {
			if yyj1695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1695Slc = r.DecodeBytes(yys1695Slc, true, true)
		yys1695 := string(yys1695Slc)
		switch yys1695 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1697 := &x.Selector
				yym1698 := z.DecBinary()
				_ = yym1698
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1697, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1695)
		} // end switch yys1695
	} // end for yyj1695
	if !yyhl1695 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1700 int
	var yyb1700 bool
	var yyhl1700 bool = l >= 0
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1702 := &x.Selector
		yym1703 := z.DecBinary()
		_ = yym1703
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1702, false, d)
		}
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1700++
		if yyhl1700 {
			yyb1700 = yyj1700 > l
		} else {
			yyb1700 = r.CheckBreak()
		}
		if yyb1700 {
			break
		}
		z.DecStructFieldNotFound(yyj1700-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1705 := z.EncBinary()
		_ = yym1705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1706 := !z.EncBinary()
			yy2arr1706 := z.EncBasicHandle().StructToArray
			var yyq1706 [2]bool
			_, _, _ = yysep1706, yyq1706, yy2arr1706
			const yyr1706 bool = false
			yyq1706[1] = x.ObservedGeneration != 0
			if yyr1706 || yy2arr1706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1706 int = 1
				for _, b := range yyq1706 {
					if b {
						yynn1706++
					}
				}
				r.EncodeMapStart(yynn1706)
			}
			if yyr1706 || yy2arr1706 {
				yym1708 := z.EncBinary()
				_ = yym1708
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1709 := z.EncBinary()
				_ = yym1709
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1706 || yy2arr1706 {
				if yyq1706[1] {
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1706[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1713 := z.DecBinary()
	_ = yym1713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1714 := r.ReadMapStart()
			if yyl1714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1714 := r.ReadArrayStart()
			if yyl1714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1715Slc
	var yyhl1715 bool = l >= 0
	for yyj1715 := 0; ; yyj1715++ {
		if yyhl1715 {
			if yyj1715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1715Slc = r.DecodeBytes(yys1715Slc, true, true)
		yys1715 := string(yys1715Slc)
		switch yys1715 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1715)
		} // end switch yys1715
	} // end for yyj1715
	if !yyhl1715 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1718 int
	var yyb1718 bool
	var yyhl1718 bool = l >= 0
	yyj1718++
	if yyhl1718 {
		yyb1718 = yyj1718 > l
	} else {
		yyb1718 = r.CheckBreak()
	}
	if yyb1718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1718++
	if yyhl1718 {
		yyb1718 = yyj1718 > l
	} else {
		yyb1718 = r.CheckBreak()
	}
	if yyb1718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1718++
		if yyhl1718 {
			yyb1718 = yyj1718 > l
		} else {
			yyb1718 = r.CheckBreak()
		}
		if yyb1718 {
			break
		}
		z.DecStructFieldNotFound(yyj1718-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1721 := z.EncBinary()
		_ = yym1721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1722 := !z.EncBinary()
			yy2arr1722 := z.EncBasicHandle().StructToArray
			var yyq1722 [5]bool
			_, _, _ = yysep1722, yyq1722, yy2arr1722
			const yyr1722 bool = false
			yyq1722[0] = x.Kind != ""
			yyq1722[1] = x.APIVersion != ""
			yyq1722[2] = true
			yyq1722[3] = true
			yyq1722[4] = true
			if yyr1722 || yy2arr1722 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1722 int = 0
				for _, b := range yyq1722 {
					if b {
						yynn1722++
					}
				}
				r.EncodeMapStart(yynn1722)
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[0] {
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1722[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[1] {
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1722[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[2] {
					yy1730 := &x.ObjectMeta
					yy1730.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1722[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1731 := &x.ObjectMeta
					yy1731.CodecEncodeSelf(e)
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[3] {
					yy1733 := &x.Spec
					yy1733.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1722[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1734 := &x.Spec
					yy1734.CodecEncodeSelf(e)
				}
			}
			if yyr1722 || yy2arr1722 {
				if yyq1722[4] {
					yy1736 := &x.Status
					yy1736.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1722[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1737 := &x.Status
					yy1737.CodecEncodeSelf(e)
				}
			}
			if yysep1722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1738 := z.DecBinary()
	_ = yym1738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1739 := r.ReadMapStart()
			if yyl1739 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1739, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1739 := r.ReadArrayStart()
			if yyl1739 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1740Slc
	var yyhl1740 bool = l >= 0
	for yyj1740 := 0; ; yyj1740++ {
		if yyhl1740 {
			if yyj1740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1740Slc = r.DecodeBytes(yys1740Slc, true, true)
		yys1740 := string(yys1740Slc)
		switch yys1740 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1743 := &x.ObjectMeta
				yyv1743.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1744 := &x.Spec
				yyv1744.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1745 := &x.Status
				yyv1745.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1740)
		} // end switch yys1740
	} // end for yyj1740
	if !yyhl1740 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1746 int
	var yyb1746 bool
	var yyhl1746 bool = l >= 0
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1749 := &x.ObjectMeta
		yyv1749.CodecDecodeSelf(d)
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1750 := &x.Spec
		yyv1750.CodecDecodeSelf(d)
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1751 := &x.Status
		yyv1751.CodecDecodeSelf(d)
	}
	for {
		yyj1746++
		if yyhl1746 {
			yyb1746 = yyj1746 > l
		} else {
			yyb1746 = r.CheckBreak()
		}
		if yyb1746 {
			break
		}
		z.DecStructFieldNotFound(yyj1746-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1752 := z.EncBinary()
		_ = yym1752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1753 := !z.EncBinary()
			yy2arr1753 := z.EncBasicHandle().StructToArray
			var yyq1753 [4]bool
			_, _, _ = yysep1753, yyq1753, yy2arr1753
			const yyr1753 bool = false
			yyq1753[0] = x.Kind != ""
			yyq1753[1] = x.APIVersion != ""
			yyq1753[2] = true
			if yyr1753 || yy2arr1753 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1753 int = 1
				for _, b := range yyq1753 {
					if b {
						yynn1753++
					}
				}
				r.EncodeMapStart(yynn1753)
			}
			if yyr1753 || yy2arr1753 {
				if yyq1753[0] {
					yym1755 := z.EncBinary()
					_ = yym1755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1753[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1756 := z.EncBinary()
					_ = yym1756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1753 || yy2arr1753 {
				if yyq1753[1] {
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1753[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1753 || yy2arr1753 {
				if yyq1753[2] {
					yy1761 := &x.ListMeta
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1761) {
					} else {
						z.EncFallback(yy1761)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1753[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1763 := &x.ListMeta
					yym1764 := z.EncBinary()
					_ = yym1764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1763) {
					} else {
						z.EncFallback(yy1763)
					}
				}
			}
			if yyr1753 || yy2arr1753 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1753 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1768 := z.DecBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1769 := r.ReadMapStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1769, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1769 := r.ReadArrayStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1770Slc
	var yyhl1770 bool = l >= 0
	for yyj1770 := 0; ; yyj1770++ {
		if yyhl1770 {
			if yyj1770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1770Slc = r.DecodeBytes(yys1770Slc, true, true)
		yys1770 := string(yys1770Slc)
		switch yys1770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1773 := &x.ListMeta
				yym1774 := z.DecBinary()
				_ = yym1774
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1773) {
				} else {
					z.DecFallback(yyv1773, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1775 := &x.Items
				yym1776 := z.DecBinary()
				_ = yym1776
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1775), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1770)
		} // end switch yys1770
	} // end for yyj1770
	if !yyhl1770 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1777 int
	var yyb1777 bool
	var yyhl1777 bool = l >= 0
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1780 := &x.ListMeta
		yym1781 := z.DecBinary()
		_ = yym1781
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1780) {
		} else {
			z.DecFallback(yyv1780, false)
		}
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1782 := &x.Items
		yym1783 := z.DecBinary()
		_ = yym1783
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1782), d)
		}
	}
	for {
		yyj1777++
		if yyhl1777 {
			yyb1777 = yyj1777 > l
		} else {
			yyb1777 = r.CheckBreak()
		}
		if yyb1777 {
			break
		}
		z.DecStructFieldNotFound(yyj1777-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1784 := z.EncBinary()
		_ = yym1784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1785 := !z.EncBinary()
			yy2arr1785 := z.EncBasicHandle().StructToArray
			var yyq1785 [4]bool
			_, _, _ = yysep1785, yyq1785, yy2arr1785
			const yyr1785 bool = false
			yyq1785[0] = x.Kind != ""
			yyq1785[1] = x.APIVersion != ""
			yyq1785[2] = true
			if yyr1785 || yy2arr1785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1785 int = 1
				for _, b := range yyq1785 {
					if b {
						yynn1785++
					}
				}
				r.EncodeMapStart(yynn1785)
			}
			if yyr1785 || yy2arr1785 {
				if yyq1785[0] {
					yym1787 := z.EncBinary()
					_ = yym1787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1785[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				if yyq1785[1] {
					yym1790 := z.EncBinary()
					_ = yym1790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1785[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1791 := z.EncBinary()
					_ = yym1791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				if yyq1785[2] {
					yy1793 := &x.ListMeta
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1793) {
					} else {
						z.EncFallback(yy1793)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1785[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1795 := &x.ListMeta
					yym1796 := z.EncBinary()
					_ = yym1796
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1795) {
					} else {
						z.EncFallback(yy1795)
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1798 := z.EncBinary()
					_ = yym1798
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1800 := z.DecBinary()
	_ = yym1800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1801 := r.ReadMapStart()
			if yyl1801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1801 := r.ReadArrayStart()
			if yyl1801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1802Slc
	var yyhl1802 bool = l >= 0
	for yyj1802 := 0; ; yyj1802++ {
		if yyhl1802 {
			if yyj1802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1802Slc = r.DecodeBytes(yys1802Slc, true, true)
		yys1802 := string(yys1802Slc)
		switch yys1802 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1805 := &x.ListMeta
				yym1806 := z.DecBinary()
				_ = yym1806
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1805) {
				} else {
					z.DecFallback(yyv1805, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1807 := &x.Items
				yym1808 := z.DecBinary()
				_ = yym1808
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1807), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1802)
		} // end switch yys1802
	} // end for yyj1802
	if !yyhl1802 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1809 int
	var yyb1809 bool
	var yyhl1809 bool = l >= 0
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1812 := &x.ListMeta
		yym1813 := z.DecBinary()
		_ = yym1813
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1812) {
		} else {
			z.DecFallback(yyv1812, false)
		}
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1814 := &x.Items
		yym1815 := z.DecBinary()
		_ = yym1815
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1814), d)
		}
	}
	for {
		yyj1809++
		if yyhl1809 {
			yyb1809 = yyj1809 > l
		} else {
			yyb1809 = r.CheckBreak()
		}
		if yyb1809 {
			break
		}
		z.DecStructFieldNotFound(yyj1809-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1816 := z.EncBinary()
	_ = yym1816
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1817 := z.DecBinary()
	_ = yym1817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1818 := z.EncBinary()
	_ = yym1818
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1819 := z.DecBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1820 := z.EncBinary()
		_ = yym1820
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1821 := !z.EncBinary()
			yy2arr1821 := z.EncBasicHandle().StructToArray
			var yyq1821 [1]bool
			_, _, _ = yysep1821, yyq1821, yy2arr1821
			const yyr1821 bool = false
			yyq1821[0] = true
			if yyr1821 || yy2arr1821 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1821 int = 0
				for _, b := range yyq1821 {
					if b {
						yynn1821++
					}
				}
				r.EncodeMapStart(yynn1821)
			}
			if yyr1821 || yy2arr1821 {
				if yyq1821[0] {
					yy1823 := &x.LoadBalancer
					yy1823.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1821[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1824 := &x.LoadBalancer
					yy1824.CodecEncodeSelf(e)
				}
			}
			if yysep1821 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1825 := z.DecBinary()
	_ = yym1825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1826 := r.ReadMapStart()
			if yyl1826 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1826, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1826 := r.ReadArrayStart()
			if yyl1826 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1827Slc
	var yyhl1827 bool = l >= 0
	for yyj1827 := 0; ; yyj1827++ {
		if yyhl1827 {
			if yyj1827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1827Slc = r.DecodeBytes(yys1827Slc, true, true)
		yys1827 := string(yys1827Slc)
		switch yys1827 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1828 := &x.LoadBalancer
				yyv1828.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1827)
		} // end switch yys1827
	} // end for yyj1827
	if !yyhl1827 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1829 int
	var yyb1829 bool
	var yyhl1829 bool = l >= 0
	yyj1829++
	if yyhl1829 {
		yyb1829 = yyj1829 > l
	} else {
		yyb1829 = r.CheckBreak()
	}
	if yyb1829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1830 := &x.LoadBalancer
		yyv1830.CodecDecodeSelf(d)
	}
	for {
		yyj1829++
		if yyhl1829 {
			yyb1829 = yyj1829 > l
		} else {
			yyb1829 = r.CheckBreak()
		}
		if yyb1829 {
			break
		}
		z.DecStructFieldNotFound(yyj1829-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1831 := z.EncBinary()
		_ = yym1831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1832 := !z.EncBinary()
			yy2arr1832 := z.EncBasicHandle().StructToArray
			var yyq1832 [1]bool
			_, _, _ = yysep1832, yyq1832, yy2arr1832
			const yyr1832 bool = false
			yyq1832[0] = len(x.Ingress) != 0
			if yyr1832 || yy2arr1832 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1832 int = 0
				for _, b := range yyq1832 {
					if b {
						yynn1832++
					}
				}
				r.EncodeMapStart(yynn1832)
			}
			if yyr1832 || yy2arr1832 {
				if yyq1832[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1834 := z.EncBinary()
						_ = yym1834
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1832[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1835 := z.EncBinary()
						_ = yym1835
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1832 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1836 := z.DecBinary()
	_ = yym1836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1837 := r.ReadMapStart()
			if yyl1837 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1837, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1837 := r.ReadArrayStart()
			if yyl1837 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1838Slc
	var yyhl1838 bool = l >= 0
	for yyj1838 := 0; ; yyj1838++ {
		if yyhl1838 {
			if yyj1838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1838Slc = r.DecodeBytes(yys1838Slc, true, true)
		yys1838 := string(yys1838Slc)
		switch yys1838 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1839 := &x.Ingress
				yym1840 := z.DecBinary()
				_ = yym1840
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1839), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1838)
		} // end switch yys1838
	} // end for yyj1838
	if !yyhl1838 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1841 int
	var yyb1841 bool
	var yyhl1841 bool = l >= 0
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1842 := &x.Ingress
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1842), d)
		}
	}
	for {
		yyj1841++
		if yyhl1841 {
			yyb1841 = yyj1841 > l
		} else {
			yyb1841 = r.CheckBreak()
		}
		if yyb1841 {
			break
		}
		z.DecStructFieldNotFound(yyj1841-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1844 := z.EncBinary()
		_ = yym1844
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1845 := !z.EncBinary()
			yy2arr1845 := z.EncBasicHandle().StructToArray
			var yyq1845 [2]bool
			_, _, _ = yysep1845, yyq1845, yy2arr1845
			const yyr1845 bool = false
			yyq1845[0] = x.IP != ""
			yyq1845[1] = x.Hostname != ""
			if yyr1845 || yy2arr1845 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1845 int = 0
				for _, b := range yyq1845 {
					if b {
						yynn1845++
					}
				}
				r.EncodeMapStart(yynn1845)
			}
			if yyr1845 || yy2arr1845 {
				if yyq1845[0] {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1845[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				if yyq1845[1] {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1845[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1845 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1852 := z.DecBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1853 := r.ReadMapStart()
			if yyl1853 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1853, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1853 := r.ReadArrayStart()
			if yyl1853 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1854Slc
	var yyhl1854 bool = l >= 0
	for yyj1854 := 0; ; yyj1854++ {
		if yyhl1854 {
			if yyj1854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1854Slc = r.DecodeBytes(yys1854Slc, true, true)
		yys1854 := string(yys1854Slc)
		switch yys1854 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1854)
		} // end switch yys1854
	} // end for yyj1854
	if !yyhl1854 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1857 int
	var yyb1857 bool
	var yyhl1857 bool = l >= 0
	yyj1857++
	if yyhl1857 {
		yyb1857 = yyj1857 > l
	} else {
		yyb1857 = r.CheckBreak()
	}
	if yyb1857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1857++
	if yyhl1857 {
		yyb1857 = yyj1857 > l
	} else {
		yyb1857 = r.CheckBreak()
	}
	if yyb1857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1857++
		if yyhl1857 {
			yyb1857 = yyj1857 > l
		} else {
			yyb1857 = r.CheckBreak()
		}
		if yyb1857 {
			break
		}
		z.DecStructFieldNotFound(yyj1857-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1860 := z.EncBinary()
		_ = yym1860
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1861 := !z.EncBinary()
			yy2arr1861 := z.EncBasicHandle().StructToArray
			var yyq1861 [7]bool
			_, _, _ = yysep1861, yyq1861, yy2arr1861
			const yyr1861 bool = false
			yyq1861[0] = x.Type != ""
			yyq1861[3] = x.ClusterIP != ""
			yyq1861[4] = len(x.ExternalIPs) != 0
			yyq1861[5] = x.LoadBalancerIP != ""
			yyq1861[6] = x.SessionAffinity != ""
			if yyr1861 || yy2arr1861 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1861 int = 2
				for _, b := range yyq1861 {
					if b {
						yynn1861++
					}
				}
				r.EncodeMapStart(yynn1861)
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1861 || yy2arr1861 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1864 := z.EncBinary()
					_ = yym1864
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[3] {
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[3] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1871 := z.EncBinary()
					_ = yym1871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1873 := z.EncBinary()
						_ = yym1873
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1861[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1874 := z.EncBinary()
						_ = yym1874
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[5] {
					yym1876 := z.EncBinary()
					_ = yym1876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[5] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				if yyq1861[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1861[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yysep1861 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1879 := z.DecBinary()
	_ = yym1879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1880 := r.ReadMapStart()
			if yyl1880 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1880, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1880 := r.ReadArrayStart()
			if yyl1880 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1880, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1881Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1881Slc
	var yyhl1881 bool = l >= 0
	for yyj1881 := 0; ; yyj1881++ {
		if yyhl1881 {
			if yyj1881 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1881Slc = r.DecodeBytes(yys1881Slc, true, true)
		yys1881 := string(yys1881Slc)
		switch yys1881 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1883 := &x.Ports
				yym1884 := z.DecBinary()
				_ = yym1884
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1883), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1885 := &x.Selector
				yym1886 := z.DecBinary()
				_ = yym1886
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1885, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1888 := &x.ExternalIPs
				yym1889 := z.DecBinary()
				_ = yym1889
				if false {
				} else {
					z.F.DecSliceStringX(yyv1888, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1881)
		} // end switch yys1881
	} // end for yyj1881
	if !yyhl1881 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1892 int
	var yyb1892 bool
	var yyhl1892 bool = l >= 0
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1894 := &x.Ports
		yym1895 := z.DecBinary()
		_ = yym1895
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1894), d)
		}
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1896 := &x.Selector
		yym1897 := z.DecBinary()
		_ = yym1897
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1896, false, d)
		}
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1899 := &x.ExternalIPs
		yym1900 := z.DecBinary()
		_ = yym1900
		if false {
		} else {
			z.F.DecSliceStringX(yyv1899, false, d)
		}
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1892++
	if yyhl1892 {
		yyb1892 = yyj1892 > l
	} else {
		yyb1892 = r.CheckBreak()
	}
	if yyb1892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1892++
		if yyhl1892 {
			yyb1892 = yyj1892 > l
		} else {
			yyb1892 = r.CheckBreak()
		}
		if yyb1892 {
			break
		}
		z.DecStructFieldNotFound(yyj1892-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1903 := z.EncBinary()
		_ = yym1903
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1904 := !z.EncBinary()
			yy2arr1904 := z.EncBasicHandle().StructToArray
			var yyq1904 [5]bool
			_, _, _ = yysep1904, yyq1904, yy2arr1904
			const yyr1904 bool = false
			if yyr1904 || yy2arr1904 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1904 int = 5
				for _, b := range yyq1904 {
					if b {
						yynn1904++
					}
				}
				r.EncodeMapStart(yynn1904)
			}
			if yyr1904 || yy2arr1904 {
				yym1906 := z.EncBinary()
				_ = yym1906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1907 := z.EncBinary()
				_ = yym1907
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1904 || yy2arr1904 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1904 || yy2arr1904 {
				yym1910 := z.EncBinary()
				_ = yym1910
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1911 := z.EncBinary()
				_ = yym1911
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1904 || yy2arr1904 {
				yy1913 := &x.TargetPort
				yym1914 := z.EncBinary()
				_ = yym1914
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1913) {
				} else if !yym1914 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1913)
				} else {
					z.EncFallback(yy1913)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				yy1915 := &x.TargetPort
				yym1916 := z.EncBinary()
				_ = yym1916
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1915) {
				} else if !yym1916 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1915)
				} else {
					z.EncFallback(yy1915)
				}
			}
			if yyr1904 || yy2arr1904 {
				yym1918 := z.EncBinary()
				_ = yym1918
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				yym1919 := z.EncBinary()
				_ = yym1919
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yysep1904 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1920 := z.DecBinary()
	_ = yym1920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1921 := r.ReadMapStart()
			if yyl1921 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1921, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1921 := r.ReadArrayStart()
			if yyl1921 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1921, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1922Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1922Slc
	var yyhl1922 bool = l >= 0
	for yyj1922 := 0; ; yyj1922++ {
		if yyhl1922 {
			if yyj1922 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1922Slc = r.DecodeBytes(yys1922Slc, true, true)
		yys1922 := string(yys1922Slc)
		switch yys1922 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1926 := &x.TargetPort
				yym1927 := z.DecBinary()
				_ = yym1927
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1926) {
				} else if !yym1927 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1926)
				} else {
					z.DecFallback(yyv1926, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1922)
		} // end switch yys1922
	} // end for yyj1922
	if !yyhl1922 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1929 int
	var yyb1929 bool
	var yyhl1929 bool = l >= 0
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1933 := &x.TargetPort
		yym1934 := z.DecBinary()
		_ = yym1934
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1933) {
		} else if !yym1934 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1933)
		} else {
			z.DecFallback(yyv1933, false)
		}
	}
	yyj1929++
	if yyhl1929 {
		yyb1929 = yyj1929 > l
	} else {
		yyb1929 = r.CheckBreak()
	}
	if yyb1929 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1929++
		if yyhl1929 {
			yyb1929 = yyj1929 > l
		} else {
			yyb1929 = r.CheckBreak()
		}
		if yyb1929 {
			break
		}
		z.DecStructFieldNotFound(yyj1929-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1936 := z.EncBinary()
		_ = yym1936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1937 := !z.EncBinary()
			yy2arr1937 := z.EncBasicHandle().StructToArray
			var yyq1937 [5]bool
			_, _, _ = yysep1937, yyq1937, yy2arr1937
			const yyr1937 bool = false
			yyq1937[0] = x.Kind != ""
			yyq1937[1] = x.APIVersion != ""
			yyq1937[2] = true
			yyq1937[3] = true
			yyq1937[4] = true
			if yyr1937 || yy2arr1937 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1937 int = 0
				for _, b := range yyq1937 {
					if b {
						yynn1937++
					}
				}
				r.EncodeMapStart(yynn1937)
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[0] {
					yym1939 := z.EncBinary()
					_ = yym1939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[1] {
					yym1942 := z.EncBinary()
					_ = yym1942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1937[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[2] {
					yy1945 := &x.ObjectMeta
					yy1945.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1946 := &x.ObjectMeta
					yy1946.CodecEncodeSelf(e)
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[3] {
					yy1948 := &x.Spec
					yy1948.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1949 := &x.Spec
					yy1949.CodecEncodeSelf(e)
				}
			}
			if yyr1937 || yy2arr1937 {
				if yyq1937[4] {
					yy1951 := &x.Status
					yy1951.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1937[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1952 := &x.Status
					yy1952.CodecEncodeSelf(e)
				}
			}
			if yysep1937 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1953 := z.DecBinary()
	_ = yym1953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1954 := r.ReadMapStart()
			if yyl1954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1954, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1954 := r.ReadArrayStart()
			if yyl1954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1955Slc
	var yyhl1955 bool = l >= 0
	for yyj1955 := 0; ; yyj1955++ {
		if yyhl1955 {
			if yyj1955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1955Slc = r.DecodeBytes(yys1955Slc, true, true)
		yys1955 := string(yys1955Slc)
		switch yys1955 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1958 := &x.ObjectMeta
				yyv1958.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1959 := &x.Spec
				yyv1959.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1960 := &x.Status
				yyv1960.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1955)
		} // end switch yys1955
	} // end for yyj1955
	if !yyhl1955 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1961 int
	var yyb1961 bool
	var yyhl1961 bool = l >= 0
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1964 := &x.ObjectMeta
		yyv1964.CodecDecodeSelf(d)
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1965 := &x.Spec
		yyv1965.CodecDecodeSelf(d)
	}
	yyj1961++
	if yyhl1961 {
		yyb1961 = yyj1961 > l
	} else {
		yyb1961 = r.CheckBreak()
	}
	if yyb1961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1966 := &x.Status
		yyv1966.CodecDecodeSelf(d)
	}
	for {
		yyj1961++
		if yyhl1961 {
			yyb1961 = yyj1961 > l
		} else {
			yyb1961 = r.CheckBreak()
		}
		if yyb1961 {
			break
		}
		z.DecStructFieldNotFound(yyj1961-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1967 := z.EncBinary()
		_ = yym1967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1968 := !z.EncBinary()
			yy2arr1968 := z.EncBasicHandle().StructToArray
			var yyq1968 [5]bool
			_, _, _ = yysep1968, yyq1968, yy2arr1968
			const yyr1968 bool = false
			yyq1968[0] = x.Kind != ""
			yyq1968[1] = x.APIVersion != ""
			yyq1968[2] = true
			yyq1968[4] = len(x.ImagePullSecrets) != 0
			if yyr1968 || yy2arr1968 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1968 int = 1
				for _, b := range yyq1968 {
					if b {
						yynn1968++
					}
				}
				r.EncodeMapStart(yynn1968)
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[0] {
					yym1970 := z.EncBinary()
					_ = yym1970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1968[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[1] {
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1968[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[2] {
					yy1976 := &x.ObjectMeta
					yy1976.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1968[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1977 := &x.ObjectMeta
					yy1977.CodecEncodeSelf(e)
				}
			}
			if yyr1968 || yy2arr1968 {
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr1968 || yy2arr1968 {
				if yyq1968[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1982 := z.EncBinary()
						_ = yym1982
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1968[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1983 := z.EncBinary()
						_ = yym1983
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1968 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1984 := z.DecBinary()
	_ = yym1984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1985 := r.ReadMapStart()
			if yyl1985 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1985, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1985 := r.ReadArrayStart()
			if yyl1985 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1986Slc
	var yyhl1986 bool = l >= 0
	for yyj1986 := 0; ; yyj1986++ {
		if yyhl1986 {
			if yyj1986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1986Slc = r.DecodeBytes(yys1986Slc, true, true)
		yys1986 := string(yys1986Slc)
		switch yys1986 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1989 := &x.ObjectMeta
				yyv1989.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv1990 := &x.Secrets
				yym1991 := z.DecBinary()
				_ = yym1991
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv1990), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1992 := &x.ImagePullSecrets
				yym1993 := z.DecBinary()
				_ = yym1993
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1992), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1986)
		} // end switch yys1986
	} // end for yyj1986
	if !yyhl1986 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1994 int
	var yyb1994 bool
	var yyhl1994 bool = l >= 0
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1997 := &x.ObjectMeta
		yyv1997.CodecDecodeSelf(d)
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv1998 := &x.Secrets
		yym1999 := z.DecBinary()
		_ = yym1999
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv1998), d)
		}
	}
	yyj1994++
	if yyhl1994 {
		yyb1994 = yyj1994 > l
	} else {
		yyb1994 = r.CheckBreak()
	}
	if yyb1994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2000 := &x.ImagePullSecrets
		yym2001 := z.DecBinary()
		_ = yym2001
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2000), d)
		}
	}
	for {
		yyj1994++
		if yyhl1994 {
			yyb1994 = yyj1994 > l
		} else {
			yyb1994 = r.CheckBreak()
		}
		if yyb1994 {
			break
		}
		z.DecStructFieldNotFound(yyj1994-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2002 := z.EncBinary()
		_ = yym2002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2003 := !z.EncBinary()
			yy2arr2003 := z.EncBasicHandle().StructToArray
			var yyq2003 [4]bool
			_, _, _ = yysep2003, yyq2003, yy2arr2003
			const yyr2003 bool = false
			yyq2003[0] = x.Kind != ""
			yyq2003[1] = x.APIVersion != ""
			yyq2003[2] = true
			if yyr2003 || yy2arr2003 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2003 int = 1
				for _, b := range yyq2003 {
					if b {
						yynn2003++
					}
				}
				r.EncodeMapStart(yynn2003)
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[0] {
					yym2005 := z.EncBinary()
					_ = yym2005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2003[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[1] {
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2003[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2009 := z.EncBinary()
					_ = yym2009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if yyq2003[2] {
					yy2011 := &x.ListMeta
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2011) {
					} else {
						z.EncFallback(yy2011)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2003[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2013 := &x.ListMeta
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2013) {
					} else {
						z.EncFallback(yy2013)
					}
				}
			}
			if yyr2003 || yy2arr2003 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2003 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2018 := z.DecBinary()
	_ = yym2018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2019 := r.ReadMapStart()
			if yyl2019 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2019, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2019 := r.ReadArrayStart()
			if yyl2019 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2020Slc
	var yyhl2020 bool = l >= 0
	for yyj2020 := 0; ; yyj2020++ {
		if yyhl2020 {
			if yyj2020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2020Slc = r.DecodeBytes(yys2020Slc, true, true)
		yys2020 := string(yys2020Slc)
		switch yys2020 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2023 := &x.ListMeta
				yym2024 := z.DecBinary()
				_ = yym2024
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2023) {
				} else {
					z.DecFallback(yyv2023, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2025 := &x.Items
				yym2026 := z.DecBinary()
				_ = yym2026
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2025), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2020)
		} // end switch yys2020
	} // end for yyj2020
	if !yyhl2020 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2027 int
	var yyb2027 bool
	var yyhl2027 bool = l >= 0
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2030 := &x.ListMeta
		yym2031 := z.DecBinary()
		_ = yym2031
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2030) {
		} else {
			z.DecFallback(yyv2030, false)
		}
	}
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2032 := &x.Items
		yym2033 := z.DecBinary()
		_ = yym2033
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2032), d)
		}
	}
	for {
		yyj2027++
		if yyhl2027 {
			yyb2027 = yyj2027 > l
		} else {
			yyb2027 = r.CheckBreak()
		}
		if yyb2027 {
			break
		}
		z.DecStructFieldNotFound(yyj2027-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2034 := z.EncBinary()
		_ = yym2034
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2035 := !z.EncBinary()
			yy2arr2035 := z.EncBasicHandle().StructToArray
			var yyq2035 [4]bool
			_, _, _ = yysep2035, yyq2035, yy2arr2035
			const yyr2035 bool = false
			yyq2035[0] = x.Kind != ""
			yyq2035[1] = x.APIVersion != ""
			yyq2035[2] = true
			if yyr2035 || yy2arr2035 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2035 int = 1
				for _, b := range yyq2035 {
					if b {
						yynn2035++
					}
				}
				r.EncodeMapStart(yynn2035)
			}
			if yyr2035 || yy2arr2035 {
				if yyq2035[0] {
					yym2037 := z.EncBinary()
					_ = yym2037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2035[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2035 || yy2arr2035 {
				if yyq2035[1] {
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2035[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2041 := z.EncBinary()
					_ = yym2041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2035 || yy2arr2035 {
				if yyq2035[2] {
					yy2043 := &x.ObjectMeta
					yy2043.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2035[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2044 := &x.ObjectMeta
					yy2044.CodecEncodeSelf(e)
				}
			}
			if yyr2035 || yy2arr2035 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2035 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		switch yys2050 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2053 := &x.ObjectMeta
				yyv2053.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2054 := &x.Subsets
				yym2055 := z.DecBinary()
				_ = yym2055
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2054), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	if !yyhl2050 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2056 int
	var yyb2056 bool
	var yyhl2056 bool = l >= 0
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2059 := &x.ObjectMeta
		yyv2059.CodecDecodeSelf(d)
	}
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2060 := &x.Subsets
		yym2061 := z.DecBinary()
		_ = yym2061
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2060), d)
		}
	}
	for {
		yyj2056++
		if yyhl2056 {
			yyb2056 = yyj2056 > l
		} else {
			yyb2056 = r.CheckBreak()
		}
		if yyb2056 {
			break
		}
		z.DecStructFieldNotFound(yyj2056-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2062 := z.EncBinary()
		_ = yym2062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2063 := !z.EncBinary()
			yy2arr2063 := z.EncBasicHandle().StructToArray
			var yyq2063 [3]bool
			_, _, _ = yysep2063, yyq2063, yy2arr2063
			const yyr2063 bool = false
			if yyr2063 || yy2arr2063 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2063 int = 3
				for _, b := range yyq2063 {
					if b {
						yynn2063++
					}
				}
				r.EncodeMapStart(yynn2063)
			}
			if yyr2063 || yy2arr2063 {
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yysep2063 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2074 := r.ReadMapStart()
			if yyl2074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2074, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2074 := r.ReadArrayStart()
			if yyl2074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2075Slc
	var yyhl2075 bool = l >= 0
	for yyj2075 := 0; ; yyj2075++ {
		if yyhl2075 {
			if yyj2075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2075Slc = r.DecodeBytes(yys2075Slc, true, true)
		yys2075 := string(yys2075Slc)
		switch yys2075 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2076 := &x.Addresses
				yym2077 := z.DecBinary()
				_ = yym2077
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2076), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2078 := &x.NotReadyAddresses
				yym2079 := z.DecBinary()
				_ = yym2079
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2078), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2080 := &x.Ports
				yym2081 := z.DecBinary()
				_ = yym2081
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2080), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2075)
		} // end switch yys2075
	} // end for yyj2075
	if !yyhl2075 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2082 int
	var yyb2082 bool
	var yyhl2082 bool = l >= 0
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2083 := &x.Addresses
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2083), d)
		}
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2085 := &x.NotReadyAddresses
		yym2086 := z.DecBinary()
		_ = yym2086
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2085), d)
		}
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2087 := &x.Ports
		yym2088 := z.DecBinary()
		_ = yym2088
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2087), d)
		}
	}
	for {
		yyj2082++
		if yyhl2082 {
			yyb2082 = yyj2082 > l
		} else {
			yyb2082 = r.CheckBreak()
		}
		if yyb2082 {
			break
		}
		z.DecStructFieldNotFound(yyj2082-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [2]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2090 int = 2
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
			}
			if yyr2090 || yy2arr2090 {
				yym2092 := z.EncBinary()
				_ = yym2092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				yym2093 := z.EncBinary()
				_ = yym2093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2090 || yy2arr2090 {
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yysep2090 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2095 := z.DecBinary()
	_ = yym2095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2096 := r.ReadMapStart()
			if yyl2096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2096, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2096 := r.ReadArrayStart()
			if yyl2096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2096, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2097Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2097Slc
	var yyhl2097 bool = l >= 0
	for yyj2097 := 0; ; yyj2097++ {
		if yyhl2097 {
			if yyj2097 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2097Slc = r.DecodeBytes(yys2097Slc, true, true)
		yys2097 := string(yys2097Slc)
		switch yys2097 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2097)
		} // end switch yys2097
	} // end for yyj2097
	if !yyhl2097 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2100 int
	var yyb2100 bool
	var yyhl2100 bool = l >= 0
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2100++
	if yyhl2100 {
		yyb2100 = yyj2100 > l
	} else {
		yyb2100 = r.CheckBreak()
	}
	if yyb2100 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2100++
		if yyhl2100 {
			yyb2100 = yyj2100 > l
		} else {
			yyb2100 = r.CheckBreak()
		}
		if yyb2100 {
			break
		}
		z.DecStructFieldNotFound(yyj2100-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2103 := z.EncBinary()
		_ = yym2103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2104 := !z.EncBinary()
			yy2arr2104 := z.EncBasicHandle().StructToArray
			var yyq2104 [3]bool
			_, _, _ = yysep2104, yyq2104, yy2arr2104
			const yyr2104 bool = false
			if yyr2104 || yy2arr2104 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2104 int = 3
				for _, b := range yyq2104 {
					if b {
						yynn2104++
					}
				}
				r.EncodeMapStart(yynn2104)
			}
			if yyr2104 || yy2arr2104 {
				yym2106 := z.EncBinary()
				_ = yym2106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2107 := z.EncBinary()
				_ = yym2107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2104 || yy2arr2104 {
				yym2109 := z.EncBinary()
				_ = yym2109
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2110 := z.EncBinary()
				_ = yym2110
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2104 || yy2arr2104 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yysep2104 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2112 := z.DecBinary()
	_ = yym2112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2113 := r.ReadMapStart()
			if yyl2113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2113, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2113 := r.ReadArrayStart()
			if yyl2113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2114Slc
	var yyhl2114 bool = l >= 0
	for yyj2114 := 0; ; yyj2114++ {
		if yyhl2114 {
			if yyj2114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2114Slc = r.DecodeBytes(yys2114Slc, true, true)
		yys2114 := string(yys2114Slc)
		switch yys2114 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2114)
		} // end switch yys2114
	} // end for yyj2114
	if !yyhl2114 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2118 int
	var yyb2118 bool
	var yyhl2118 bool = l >= 0
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2118++
		if yyhl2118 {
			yyb2118 = yyj2118 > l
		} else {
			yyb2118 = r.CheckBreak()
		}
		if yyb2118 {
			break
		}
		z.DecStructFieldNotFound(yyj2118-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2122 := z.EncBinary()
		_ = yym2122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2123 := !z.EncBinary()
			yy2arr2123 := z.EncBasicHandle().StructToArray
			var yyq2123 [4]bool
			_, _, _ = yysep2123, yyq2123, yy2arr2123
			const yyr2123 bool = false
			yyq2123[0] = x.Kind != ""
			yyq2123[1] = x.APIVersion != ""
			yyq2123[2] = true
			if yyr2123 || yy2arr2123 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2123 int = 1
				for _, b := range yyq2123 {
					if b {
						yynn2123++
					}
				}
				r.EncodeMapStart(yynn2123)
			}
			if yyr2123 || yy2arr2123 {
				if yyq2123[0] {
					yym2125 := z.EncBinary()
					_ = yym2125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2123[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				if yyq2123[1] {
					yym2128 := z.EncBinary()
					_ = yym2128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2123[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				if yyq2123[2] {
					yy2131 := &x.ListMeta
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2131) {
					} else {
						z.EncFallback(yy2131)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2123[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2133 := &x.ListMeta
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2133) {
					} else {
						z.EncFallback(yy2133)
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2123 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2138 := z.DecBinary()
	_ = yym2138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2139 := r.ReadMapStart()
			if yyl2139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2139, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2139 := r.ReadArrayStart()
			if yyl2139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2140Slc
	var yyhl2140 bool = l >= 0
	for yyj2140 := 0; ; yyj2140++ {
		if yyhl2140 {
			if yyj2140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2140Slc = r.DecodeBytes(yys2140Slc, true, true)
		yys2140 := string(yys2140Slc)
		switch yys2140 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2143 := &x.ListMeta
				yym2144 := z.DecBinary()
				_ = yym2144
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2143) {
				} else {
					z.DecFallback(yyv2143, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2145 := &x.Items
				yym2146 := z.DecBinary()
				_ = yym2146
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2140)
		} // end switch yys2140
	} // end for yyj2140
	if !yyhl2140 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2147 int
	var yyb2147 bool
	var yyhl2147 bool = l >= 0
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2150 := &x.ListMeta
		yym2151 := z.DecBinary()
		_ = yym2151
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2150) {
		} else {
			z.DecFallback(yyv2150, false)
		}
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2152 := &x.Items
		yym2153 := z.DecBinary()
		_ = yym2153
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2152), d)
		}
	}
	for {
		yyj2147++
		if yyhl2147 {
			yyb2147 = yyj2147 > l
		} else {
			yyb2147 = r.CheckBreak()
		}
		if yyb2147 {
			break
		}
		z.DecStructFieldNotFound(yyj2147-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2154 := z.EncBinary()
		_ = yym2154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2155 := !z.EncBinary()
			yy2arr2155 := z.EncBasicHandle().StructToArray
			var yyq2155 [4]bool
			_, _, _ = yysep2155, yyq2155, yy2arr2155
			const yyr2155 bool = false
			yyq2155[0] = x.PodCIDR != ""
			yyq2155[1] = x.ExternalID != ""
			yyq2155[2] = x.ProviderID != ""
			yyq2155[3] = x.Unschedulable != false
			if yyr2155 || yy2arr2155 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2155 int = 0
				for _, b := range yyq2155 {
					if b {
						yynn2155++
					}
				}
				r.EncodeMapStart(yynn2155)
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[0] {
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[1] {
					yym2160 := z.EncBinary()
					_ = yym2160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2161 := z.EncBinary()
					_ = yym2161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[2] {
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2155[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2155 || yy2arr2155 {
				if yyq2155[3] {
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2155[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2168 := z.DecBinary()
	_ = yym2168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2169 := r.ReadMapStart()
			if yyl2169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2169, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2169 := r.ReadArrayStart()
			if yyl2169 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2170Slc
	var yyhl2170 bool = l >= 0
	for yyj2170 := 0; ; yyj2170++ {
		if yyhl2170 {
			if yyj2170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2170Slc = r.DecodeBytes(yys2170Slc, true, true)
		yys2170 := string(yys2170Slc)
		switch yys2170 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2170)
		} // end switch yys2170
	} // end for yyj2170
	if !yyhl2170 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2175 int
	var yyb2175 bool
	var yyhl2175 bool = l >= 0
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2175++
		if yyhl2175 {
			yyb2175 = yyj2175 > l
		} else {
			yyb2175 = r.CheckBreak()
		}
		if yyb2175 {
			break
		}
		z.DecStructFieldNotFound(yyj2175-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2180 := z.EncBinary()
		_ = yym2180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2181 := !z.EncBinary()
			yy2arr2181 := z.EncBasicHandle().StructToArray
			var yyq2181 [1]bool
			_, _, _ = yysep2181, yyq2181, yy2arr2181
			const yyr2181 bool = false
			if yyr2181 || yy2arr2181 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2181 int = 1
				for _, b := range yyq2181 {
					if b {
						yynn2181++
					}
				}
				r.EncodeMapStart(yynn2181)
			}
			if yyr2181 || yy2arr2181 {
				yym2183 := z.EncBinary()
				_ = yym2183
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2184 := z.EncBinary()
				_ = yym2184
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2181 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2185 := z.DecBinary()
	_ = yym2185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2186 := r.ReadMapStart()
			if yyl2186 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2186, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2186 := r.ReadArrayStart()
			if yyl2186 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2186, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2187Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2187Slc
	var yyhl2187 bool = l >= 0
	for yyj2187 := 0; ; yyj2187++ {
		if yyhl2187 {
			if yyj2187 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2187Slc = r.DecodeBytes(yys2187Slc, true, true)
		yys2187 := string(yys2187Slc)
		switch yys2187 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2187)
		} // end switch yys2187
	} // end for yyj2187
	if !yyhl2187 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2189 int
	var yyb2189 bool
	var yyhl2189 bool = l >= 0
	yyj2189++
	if yyhl2189 {
		yyb2189 = yyj2189 > l
	} else {
		yyb2189 = r.CheckBreak()
	}
	if yyb2189 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2189++
		if yyhl2189 {
			yyb2189 = yyj2189 > l
		} else {
			yyb2189 = r.CheckBreak()
		}
		if yyb2189 {
			break
		}
		z.DecStructFieldNotFound(yyj2189-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2191 := z.EncBinary()
		_ = yym2191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2192 := !z.EncBinary()
			yy2arr2192 := z.EncBasicHandle().StructToArray
			var yyq2192 [1]bool
			_, _, _ = yysep2192, yyq2192, yy2arr2192
			const yyr2192 bool = false
			yyq2192[0] = true
			if yyr2192 || yy2arr2192 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2192 int = 0
				for _, b := range yyq2192 {
					if b {
						yynn2192++
					}
				}
				r.EncodeMapStart(yynn2192)
			}
			if yyr2192 || yy2arr2192 {
				if yyq2192[0] {
					yy2194 := &x.KubeletEndpoint
					yy2194.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2192[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2195 := &x.KubeletEndpoint
					yy2195.CodecEncodeSelf(e)
				}
			}
			if yysep2192 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2196 := z.DecBinary()
	_ = yym2196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2197 := r.ReadMapStart()
			if yyl2197 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2197, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2197 := r.ReadArrayStart()
			if yyl2197 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2198Slc
	var yyhl2198 bool = l >= 0
	for yyj2198 := 0; ; yyj2198++ {
		if yyhl2198 {
			if yyj2198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2198Slc = r.DecodeBytes(yys2198Slc, true, true)
		yys2198 := string(yys2198Slc)
		switch yys2198 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2199 := &x.KubeletEndpoint
				yyv2199.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2198)
		} // end switch yys2198
	} // end for yyj2198
	if !yyhl2198 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2200 int
	var yyb2200 bool
	var yyhl2200 bool = l >= 0
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2201 := &x.KubeletEndpoint
		yyv2201.CodecDecodeSelf(d)
	}
	for {
		yyj2200++
		if yyhl2200 {
			yyb2200 = yyj2200 > l
		} else {
			yyb2200 = r.CheckBreak()
		}
		if yyb2200 {
			break
		}
		z.DecStructFieldNotFound(yyj2200-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2202 := z.EncBinary()
		_ = yym2202
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2203 := !z.EncBinary()
			yy2arr2203 := z.EncBasicHandle().StructToArray
			var yyq2203 [8]bool
			_, _, _ = yysep2203, yyq2203, yy2arr2203
			const yyr2203 bool = false
			if yyr2203 || yy2arr2203 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2203 int = 8
				for _, b := range yyq2203 {
					if b {
						yynn2203++
					}
				}
				r.EncodeMapStart(yynn2203)
			}
			if yyr2203 || yy2arr2203 {
				yym2205 := z.EncBinary()
				_ = yym2205
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2206 := z.EncBinary()
				_ = yym2206
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2208 := z.EncBinary()
				_ = yym2208
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2209 := z.EncBinary()
				_ = yym2209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2211 := z.EncBinary()
				_ = yym2211
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2212 := z.EncBinary()
				_ = yym2212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2214 := z.EncBinary()
				_ = yym2214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2215 := z.EncBinary()
				_ = yym2215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2217 := z.EncBinary()
				_ = yym2217
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2218 := z.EncBinary()
				_ = yym2218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2220 := z.EncBinary()
				_ = yym2220
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2221 := z.EncBinary()
				_ = yym2221
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2223 := z.EncBinary()
				_ = yym2223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2224 := z.EncBinary()
				_ = yym2224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2203 || yy2arr2203 {
				yym2226 := z.EncBinary()
				_ = yym2226
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2227 := z.EncBinary()
				_ = yym2227
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2203 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2228 := z.DecBinary()
	_ = yym2228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2229 := r.ReadMapStart()
			if yyl2229 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2229, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2229 := r.ReadArrayStart()
			if yyl2229 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2230Slc
	var yyhl2230 bool = l >= 0
	for yyj2230 := 0; ; yyj2230++ {
		if yyhl2230 {
			if yyj2230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2230Slc = r.DecodeBytes(yys2230Slc, true, true)
		yys2230 := string(yys2230Slc)
		switch yys2230 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2230)
		} // end switch yys2230
	} // end for yyj2230
	if !yyhl2230 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2239 int
	var yyb2239 bool
	var yyhl2239 bool = l >= 0
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2239++
		if yyhl2239 {
			yyb2239 = yyj2239 > l
		} else {
			yyb2239 = r.CheckBreak()
		}
		if yyb2239 {
			break
		}
		z.DecStructFieldNotFound(yyj2239-1, "")
	}
	r.ReadEnd()
}

func (x *Zone) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2248 := z.EncBinary()
		_ = yym2248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2249 := !z.EncBinary()
			yy2arr2249 := z.EncBasicHandle().StructToArray
			var yyq2249 [2]bool
			_, _, _ = yysep2249, yyq2249, yy2arr2249
			const yyr2249 bool = false
			yyq2249[0] = x.FailureDomain != ""
			yyq2249[1] = x.Region != ""
			if yyr2249 || yy2arr2249 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2249 int = 0
				for _, b := range yyq2249 {
					if b {
						yynn2249++
					}
				}
				r.EncodeMapStart(yynn2249)
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[0] {
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FailureDomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2249[0] {
					r.EncodeString(codecSelferC_UTF81234, string("failureDomain"))
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FailureDomain))
					}
				}
			}
			if yyr2249 || yy2arr2249 {
				if yyq2249[1] {
					yym2254 := z.EncBinary()
					_ = yym2254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Region))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2249[1] {
					r.EncodeString(codecSelferC_UTF81234, string("region"))
					yym2255 := z.EncBinary()
					_ = yym2255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Region))
					}
				}
			}
			if yysep2249 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Zone) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2256 := z.DecBinary()
	_ = yym2256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2257 := r.ReadMapStart()
			if yyl2257 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2257, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2257 := r.ReadArrayStart()
			if yyl2257 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2257, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Zone) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2258Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2258Slc
	var yyhl2258 bool = l >= 0
	for yyj2258 := 0; ; yyj2258++ {
		if yyhl2258 {
			if yyj2258 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2258Slc = r.DecodeBytes(yys2258Slc, true, true)
		yys2258 := string(yys2258Slc)
		switch yys2258 {
		case "failureDomain":
			if r.TryDecodeAsNil() {
				x.FailureDomain = ""
			} else {
				x.FailureDomain = string(r.DecodeString())
			}
		case "region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				x.Region = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2258)
		} // end switch yys2258
	} // end for yyj2258
	if !yyhl2258 {
		r.ReadEnd()
	}
}

func (x *Zone) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2261 int
	var yyb2261 bool
	var yyhl2261 bool = l >= 0
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureDomain = ""
	} else {
		x.FailureDomain = string(r.DecodeString())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		x.Region = string(r.DecodeString())
	}
	for {
		yyj2261++
		if yyhl2261 {
			yyb2261 = yyj2261 > l
		} else {
			yyb2261 = r.CheckBreak()
		}
		if yyb2261 {
			break
		}
		z.DecStructFieldNotFound(yyj2261-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2264 := z.EncBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2265 := !z.EncBinary()
			yy2arr2265 := z.EncBasicHandle().StructToArray
			var yyq2265 [7]bool
			_, _, _ = yysep2265, yyq2265, yy2arr2265
			const yyr2265 bool = false
			yyq2265[0] = len(x.Capacity) != 0
			yyq2265[1] = x.Phase != ""
			yyq2265[2] = len(x.Conditions) != 0
			yyq2265[3] = len(x.Addresses) != 0
			yyq2265[4] = true
			yyq2265[5] = true
			yyq2265[6] = x.Zone != nil
			if yyr2265 || yy2arr2265 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2265 int = 0
				for _, b := range yyq2265 {
					if b {
						yynn2265++
					}
				}
				r.EncodeMapStart(yynn2265)
			}
			if yyr2265 || yy2arr2265 {
				if yyq2265[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				if yyq2265[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2265[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2265 || yy2arr2265 {
				if yyq2265[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2269 := z.EncBinary()
						_ = yym2269
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2270 := z.EncBinary()
						_ = yym2270
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				if yyq2265[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2272 := z.EncBinary()
						_ = yym2272
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2273 := z.EncBinary()
						_ = yym2273
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2265 || yy2arr2265 {
				if yyq2265[4] {
					yy2275 := &x.DaemonEndpoints
					yy2275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2276 := &x.DaemonEndpoints
					yy2276.CodecEncodeSelf(e)
				}
			}
			if yyr2265 || yy2arr2265 {
				if yyq2265[5] {
					yy2278 := &x.NodeInfo
					yy2278.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2279 := &x.NodeInfo
					yy2279.CodecEncodeSelf(e)
				}
			}
			if yyr2265 || yy2arr2265 {
				if yyq2265[6] {
					if x.Zone == nil {
						r.EncodeNil()
					} else {
						x.Zone.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2265[6] {
					r.EncodeString(codecSelferC_UTF81234, string("zone"))
					if x.Zone == nil {
						r.EncodeNil()
					} else {
						x.Zone.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2265 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2281 := z.DecBinary()
	_ = yym2281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2282 := r.ReadMapStart()
			if yyl2282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2282, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2282 := r.ReadArrayStart()
			if yyl2282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2283Slc
	var yyhl2283 bool = l >= 0
	for yyj2283 := 0; ; yyj2283++ {
		if yyhl2283 {
			if yyj2283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2283Slc = r.DecodeBytes(yys2283Slc, true, true)
		yys2283 := string(yys2283Slc)
		switch yys2283 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2284 := &x.Capacity
				yyv2284.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2286 := &x.Conditions
				yym2287 := z.DecBinary()
				_ = yym2287
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2286), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2288 := &x.Addresses
				yym2289 := z.DecBinary()
				_ = yym2289
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2288), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2290 := &x.DaemonEndpoints
				yyv2290.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2291 := &x.NodeInfo
				yyv2291.CodecDecodeSelf(d)
			}
		case "zone":
			if r.TryDecodeAsNil() {
				if x.Zone != nil {
					x.Zone = nil
				}
			} else {
				if x.Zone == nil {
					x.Zone = new(Zone)
				}
				x.Zone.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2283)
		} // end switch yys2283
	} // end for yyj2283
	if !yyhl2283 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2293 int
	var yyb2293 bool
	var yyhl2293 bool = l >= 0
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2294 := &x.Capacity
		yyv2294.CodecDecodeSelf(d)
	}
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2296 := &x.Conditions
		yym2297 := z.DecBinary()
		_ = yym2297
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2296), d)
		}
	}
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2298 := &x.Addresses
		yym2299 := z.DecBinary()
		_ = yym2299
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2298), d)
		}
	}
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2300 := &x.DaemonEndpoints
		yyv2300.CodecDecodeSelf(d)
	}
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2301 := &x.NodeInfo
		yyv2301.CodecDecodeSelf(d)
	}
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Zone != nil {
			x.Zone = nil
		}
	} else {
		if x.Zone == nil {
			x.Zone = new(Zone)
		}
		x.Zone.CodecDecodeSelf(d)
	}
	for {
		yyj2293++
		if yyhl2293 {
			yyb2293 = yyj2293 > l
		} else {
			yyb2293 = r.CheckBreak()
		}
		if yyb2293 {
			break
		}
		z.DecStructFieldNotFound(yyj2293-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2303 := z.EncBinary()
	_ = yym2303
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2304 := z.DecBinary()
	_ = yym2304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2305 := z.EncBinary()
	_ = yym2305
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2306 := z.DecBinary()
	_ = yym2306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2307 := z.EncBinary()
		_ = yym2307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2308 := !z.EncBinary()
			yy2arr2308 := z.EncBasicHandle().StructToArray
			var yyq2308 [6]bool
			_, _, _ = yysep2308, yyq2308, yy2arr2308
			const yyr2308 bool = false
			yyq2308[2] = true
			yyq2308[3] = true
			yyq2308[4] = x.Reason != ""
			yyq2308[5] = x.Message != ""
			if yyr2308 || yy2arr2308 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2308 int = 2
				for _, b := range yyq2308 {
					if b {
						yynn2308++
					}
				}
				r.EncodeMapStart(yynn2308)
			}
			if yyr2308 || yy2arr2308 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2308 || yy2arr2308 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2308 || yy2arr2308 {
				if yyq2308[2] {
					yy2312 := &x.LastHeartbeatTime
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2312) {
					} else if yym2313 {
						z.EncBinaryMarshal(yy2312)
					} else if !yym2313 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2312)
					} else {
						z.EncFallback(yy2312)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2314 := &x.LastHeartbeatTime
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2314) {
					} else if yym2315 {
						z.EncBinaryMarshal(yy2314)
					} else if !yym2315 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2314)
					} else {
						z.EncFallback(yy2314)
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				if yyq2308[3] {
					yy2317 := &x.LastTransitionTime
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2317) {
					} else if yym2318 {
						z.EncBinaryMarshal(yy2317)
					} else if !yym2318 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2317)
					} else {
						z.EncFallback(yy2317)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2319 := &x.LastTransitionTime
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2319) {
					} else if yym2320 {
						z.EncBinaryMarshal(yy2319)
					} else if !yym2320 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2319)
					} else {
						z.EncFallback(yy2319)
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				if yyq2308[4] {
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				if yyq2308[5] {
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2308 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2327 := z.DecBinary()
	_ = yym2327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2328 := r.ReadMapStart()
			if yyl2328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2328, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2328 := r.ReadArrayStart()
			if yyl2328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2329Slc
	var yyhl2329 bool = l >= 0
	for yyj2329 := 0; ; yyj2329++ {
		if yyhl2329 {
			if yyj2329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2329Slc = r.DecodeBytes(yys2329Slc, true, true)
		yys2329 := string(yys2329Slc)
		switch yys2329 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2332 := &x.LastHeartbeatTime
				yym2333 := z.DecBinary()
				_ = yym2333
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2332) {
				} else if yym2333 {
					z.DecBinaryUnmarshal(yyv2332)
				} else if !yym2333 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2332)
				} else {
					z.DecFallback(yyv2332, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2334 := &x.LastTransitionTime
				yym2335 := z.DecBinary()
				_ = yym2335
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2334) {
				} else if yym2335 {
					z.DecBinaryUnmarshal(yyv2334)
				} else if !yym2335 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2334)
				} else {
					z.DecFallback(yyv2334, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2329)
		} // end switch yys2329
	} // end for yyj2329
	if !yyhl2329 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2338 int
	var yyb2338 bool
	var yyhl2338 bool = l >= 0
	yyj2338++
	if yyhl2338 {
		yyb2338 = yyj2338 > l
	} else {
		yyb2338 = r.CheckBreak()
	}
	if yyb2338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2338++
	if yyhl2338 {
		yyb2338 = yyj2338 > l
	} else {
		yyb2338 = r.CheckBreak()
	}
	if yyb2338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2338++
	if yyhl2338 {
		yyb2338 = yyj2338 > l
	} else {
		yyb2338 = r.CheckBreak()
	}
	if yyb2338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2341 := &x.LastHeartbeatTime
		yym2342 := z.DecBinary()
		_ = yym2342
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2341) {
		} else if yym2342 {
			z.DecBinaryUnmarshal(yyv2341)
		} else if !yym2342 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2341)
		} else {
			z.DecFallback(yyv2341, false)
		}
	}
	yyj2338++
	if yyhl2338 {
		yyb2338 = yyj2338 > l
	} else {
		yyb2338 = r.CheckBreak()
	}
	if yyb2338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2343 := &x.LastTransitionTime
		yym2344 := z.DecBinary()
		_ = yym2344
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2343) {
		} else if yym2344 {
			z.DecBinaryUnmarshal(yyv2343)
		} else if !yym2344 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2343)
		} else {
			z.DecFallback(yyv2343, false)
		}
	}
	yyj2338++
	if yyhl2338 {
		yyb2338 = yyj2338 > l
	} else {
		yyb2338 = r.CheckBreak()
	}
	if yyb2338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2338++
	if yyhl2338 {
		yyb2338 = yyj2338 > l
	} else {
		yyb2338 = r.CheckBreak()
	}
	if yyb2338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2338++
		if yyhl2338 {
			yyb2338 = yyj2338 > l
		} else {
			yyb2338 = r.CheckBreak()
		}
		if yyb2338 {
			break
		}
		z.DecStructFieldNotFound(yyj2338-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2347 := z.EncBinary()
	_ = yym2347
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2348 := z.DecBinary()
	_ = yym2348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2349 := z.EncBinary()
		_ = yym2349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2350 := !z.EncBinary()
			yy2arr2350 := z.EncBasicHandle().StructToArray
			var yyq2350 [2]bool
			_, _, _ = yysep2350, yyq2350, yy2arr2350
			const yyr2350 bool = false
			if yyr2350 || yy2arr2350 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2350 int = 2
				for _, b := range yyq2350 {
					if b {
						yynn2350++
					}
				}
				r.EncodeMapStart(yynn2350)
			}
			if yyr2350 || yy2arr2350 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2350 || yy2arr2350 {
				yym2353 := z.EncBinary()
				_ = yym2353
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2354 := z.EncBinary()
				_ = yym2354
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2350 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2355 := z.DecBinary()
	_ = yym2355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2356 := r.ReadMapStart()
			if yyl2356 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2356, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2356 := r.ReadArrayStart()
			if yyl2356 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2357Slc
	var yyhl2357 bool = l >= 0
	for yyj2357 := 0; ; yyj2357++ {
		if yyhl2357 {
			if yyj2357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2357Slc = r.DecodeBytes(yys2357Slc, true, true)
		yys2357 := string(yys2357Slc)
		switch yys2357 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2357)
		} // end switch yys2357
	} // end for yyj2357
	if !yyhl2357 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2360 int
	var yyb2360 bool
	var yyhl2360 bool = l >= 0
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2360++
		if yyhl2360 {
			yyb2360 = yyj2360 > l
		} else {
			yyb2360 = r.CheckBreak()
		}
		if yyb2360 {
			break
		}
		z.DecStructFieldNotFound(yyj2360-1, "")
	}
	r.ReadEnd()
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2363 := z.EncBinary()
		_ = yym2363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2364 := !z.EncBinary()
			yy2arr2364 := z.EncBasicHandle().StructToArray
			var yyq2364 [1]bool
			_, _, _ = yysep2364, yyq2364, yy2arr2364
			const yyr2364 bool = false
			yyq2364[0] = len(x.Capacity) != 0
			if yyr2364 || yy2arr2364 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2364 int = 0
				for _, b := range yyq2364 {
					if b {
						yynn2364++
					}
				}
				r.EncodeMapStart(yynn2364)
			}
			if yyr2364 || yy2arr2364 {
				if yyq2364[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2364[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2364 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2366 := z.DecBinary()
	_ = yym2366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2367 := r.ReadMapStart()
			if yyl2367 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2367, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2367 := r.ReadArrayStart()
			if yyl2367 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2367, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2368Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2368Slc
	var yyhl2368 bool = l >= 0
	for yyj2368 := 0; ; yyj2368++ {
		if yyhl2368 {
			if yyj2368 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2368Slc = r.DecodeBytes(yys2368Slc, true, true)
		yys2368 := string(yys2368Slc)
		switch yys2368 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2369 := &x.Capacity
				yyv2369.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2368)
		} // end switch yys2368
	} // end for yyj2368
	if !yyhl2368 {
		r.ReadEnd()
	}
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2370 int
	var yyb2370 bool
	var yyhl2370 bool = l >= 0
	yyj2370++
	if yyhl2370 {
		yyb2370 = yyj2370 > l
	} else {
		yyb2370 = r.CheckBreak()
	}
	if yyb2370 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2371 := &x.Capacity
		yyv2371.CodecDecodeSelf(d)
	}
	for {
		yyj2370++
		if yyhl2370 {
			yyb2370 = yyj2370 > l
		} else {
			yyb2370 = r.CheckBreak()
		}
		if yyb2370 {
			break
		}
		z.DecStructFieldNotFound(yyj2370-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2372 := z.EncBinary()
	_ = yym2372
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2373 := z.DecBinary()
	_ = yym2373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2374 := z.EncBinary()
		_ = yym2374
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2375 := z.DecBinary()
	_ = yym2375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2376 := z.EncBinary()
		_ = yym2376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2377 := !z.EncBinary()
			yy2arr2377 := z.EncBasicHandle().StructToArray
			var yyq2377 [5]bool
			_, _, _ = yysep2377, yyq2377, yy2arr2377
			const yyr2377 bool = false
			yyq2377[0] = x.Kind != ""
			yyq2377[1] = x.APIVersion != ""
			yyq2377[2] = true
			yyq2377[3] = true
			yyq2377[4] = true
			if yyr2377 || yy2arr2377 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2377 int = 0
				for _, b := range yyq2377 {
					if b {
						yynn2377++
					}
				}
				r.EncodeMapStart(yynn2377)
			}
			if yyr2377 || yy2arr2377 {
				if yyq2377[0] {
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2377[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2380 := z.EncBinary()
					_ = yym2380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2377 || yy2arr2377 {
				if yyq2377[1] {
					yym2382 := z.EncBinary()
					_ = yym2382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2377[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2377 || yy2arr2377 {
				if yyq2377[2] {
					yy2385 := &x.ObjectMeta
					yy2385.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2377[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2386 := &x.ObjectMeta
					yy2386.CodecEncodeSelf(e)
				}
			}
			if yyr2377 || yy2arr2377 {
				if yyq2377[3] {
					yy2388 := &x.Spec
					yy2388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2377[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2389 := &x.Spec
					yy2389.CodecEncodeSelf(e)
				}
			}
			if yyr2377 || yy2arr2377 {
				if yyq2377[4] {
					yy2391 := &x.Status
					yy2391.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2377[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2392 := &x.Status
					yy2392.CodecEncodeSelf(e)
				}
			}
			if yysep2377 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2393 := z.DecBinary()
	_ = yym2393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2394 := r.ReadMapStart()
			if yyl2394 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2394, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2394 := r.ReadArrayStart()
			if yyl2394 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2395Slc
	var yyhl2395 bool = l >= 0
	for yyj2395 := 0; ; yyj2395++ {
		if yyhl2395 {
			if yyj2395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2395Slc = r.DecodeBytes(yys2395Slc, true, true)
		yys2395 := string(yys2395Slc)
		switch yys2395 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2398 := &x.ObjectMeta
				yyv2398.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2399 := &x.Spec
				yyv2399.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2400 := &x.Status
				yyv2400.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2395)
		} // end switch yys2395
	} // end for yyj2395
	if !yyhl2395 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2401 int
	var yyb2401 bool
	var yyhl2401 bool = l >= 0
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2404 := &x.ObjectMeta
		yyv2404.CodecDecodeSelf(d)
	}
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2405 := &x.Spec
		yyv2405.CodecDecodeSelf(d)
	}
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2406 := &x.Status
		yyv2406.CodecDecodeSelf(d)
	}
	for {
		yyj2401++
		if yyhl2401 {
			yyb2401 = yyj2401 > l
		} else {
			yyb2401 = r.CheckBreak()
		}
		if yyb2401 {
			break
		}
		z.DecStructFieldNotFound(yyj2401-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2407 := z.EncBinary()
		_ = yym2407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2408 := !z.EncBinary()
			yy2arr2408 := z.EncBasicHandle().StructToArray
			var yyq2408 [4]bool
			_, _, _ = yysep2408, yyq2408, yy2arr2408
			const yyr2408 bool = false
			yyq2408[0] = x.Kind != ""
			yyq2408[1] = x.APIVersion != ""
			yyq2408[2] = true
			if yyr2408 || yy2arr2408 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2408 int = 1
				for _, b := range yyq2408 {
					if b {
						yynn2408++
					}
				}
				r.EncodeMapStart(yynn2408)
			}
			if yyr2408 || yy2arr2408 {
				if yyq2408[0] {
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2408[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2408 || yy2arr2408 {
				if yyq2408[1] {
					yym2413 := z.EncBinary()
					_ = yym2413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2408[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2408 || yy2arr2408 {
				if yyq2408[2] {
					yy2416 := &x.ListMeta
					yym2417 := z.EncBinary()
					_ = yym2417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2416) {
					} else {
						z.EncFallback(yy2416)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2408[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2418 := &x.ListMeta
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2418) {
					} else {
						z.EncFallback(yy2418)
					}
				}
			}
			if yyr2408 || yy2arr2408 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2408 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2423 := z.DecBinary()
	_ = yym2423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2424 := r.ReadMapStart()
			if yyl2424 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2424, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2424 := r.ReadArrayStart()
			if yyl2424 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2424, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2425Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2425Slc
	var yyhl2425 bool = l >= 0
	for yyj2425 := 0; ; yyj2425++ {
		if yyhl2425 {
			if yyj2425 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2425Slc = r.DecodeBytes(yys2425Slc, true, true)
		yys2425 := string(yys2425Slc)
		switch yys2425 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2428 := &x.ListMeta
				yym2429 := z.DecBinary()
				_ = yym2429
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2428) {
				} else {
					z.DecFallback(yyv2428, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2430 := &x.Items
				yym2431 := z.DecBinary()
				_ = yym2431
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2430), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2425)
		} // end switch yys2425
	} // end for yyj2425
	if !yyhl2425 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2432 int
	var yyb2432 bool
	var yyhl2432 bool = l >= 0
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2435 := &x.ListMeta
		yym2436 := z.DecBinary()
		_ = yym2436
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2435) {
		} else {
			z.DecFallback(yyv2435, false)
		}
	}
	yyj2432++
	if yyhl2432 {
		yyb2432 = yyj2432 > l
	} else {
		yyb2432 = r.CheckBreak()
	}
	if yyb2432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2437 := &x.Items
		yym2438 := z.DecBinary()
		_ = yym2438
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2437), d)
		}
	}
	for {
		yyj2432++
		if yyhl2432 {
			yyb2432 = yyj2432 > l
		} else {
			yyb2432 = r.CheckBreak()
		}
		if yyb2432 {
			break
		}
		z.DecStructFieldNotFound(yyj2432-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2439 := z.EncBinary()
		_ = yym2439
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2440 := !z.EncBinary()
			yy2arr2440 := z.EncBasicHandle().StructToArray
			var yyq2440 [1]bool
			_, _, _ = yysep2440, yyq2440, yy2arr2440
			const yyr2440 bool = false
			if yyr2440 || yy2arr2440 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2440 int = 1
				for _, b := range yyq2440 {
					if b {
						yynn2440++
					}
				}
				r.EncodeMapStart(yynn2440)
			}
			if yyr2440 || yy2arr2440 {
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yysep2440 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2444 := z.DecBinary()
	_ = yym2444
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2445 := r.ReadMapStart()
			if yyl2445 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2445, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2445 := r.ReadArrayStart()
			if yyl2445 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2445, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2446Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2446Slc
	var yyhl2446 bool = l >= 0
	for yyj2446 := 0; ; yyj2446++ {
		if yyhl2446 {
			if yyj2446 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2446Slc = r.DecodeBytes(yys2446Slc, true, true)
		yys2446 := string(yys2446Slc)
		switch yys2446 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2447 := &x.Finalizers
				yym2448 := z.DecBinary()
				_ = yym2448
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2447), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2446)
		} // end switch yys2446
	} // end for yyj2446
	if !yyhl2446 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2449 int
	var yyb2449 bool
	var yyhl2449 bool = l >= 0
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2450 := &x.Finalizers
		yym2451 := z.DecBinary()
		_ = yym2451
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2450), d)
		}
	}
	for {
		yyj2449++
		if yyhl2449 {
			yyb2449 = yyj2449 > l
		} else {
			yyb2449 = r.CheckBreak()
		}
		if yyb2449 {
			break
		}
		z.DecStructFieldNotFound(yyj2449-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2452 := z.EncBinary()
	_ = yym2452
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2453 := z.DecBinary()
	_ = yym2453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2454 := z.EncBinary()
		_ = yym2454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2455 := !z.EncBinary()
			yy2arr2455 := z.EncBasicHandle().StructToArray
			var yyq2455 [1]bool
			_, _, _ = yysep2455, yyq2455, yy2arr2455
			const yyr2455 bool = false
			yyq2455[0] = x.Phase != ""
			if yyr2455 || yy2arr2455 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2455 int = 0
				for _, b := range yyq2455 {
					if b {
						yynn2455++
					}
				}
				r.EncodeMapStart(yynn2455)
			}
			if yyr2455 || yy2arr2455 {
				if yyq2455[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2455[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2455 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2457 := z.DecBinary()
	_ = yym2457
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2458 := r.ReadMapStart()
			if yyl2458 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2458, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2458 := r.ReadArrayStart()
			if yyl2458 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2458, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2459Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2459Slc
	var yyhl2459 bool = l >= 0
	for yyj2459 := 0; ; yyj2459++ {
		if yyhl2459 {
			if yyj2459 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2459Slc = r.DecodeBytes(yys2459Slc, true, true)
		yys2459 := string(yys2459Slc)
		switch yys2459 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2459)
		} // end switch yys2459
	} // end for yyj2459
	if !yyhl2459 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2461 int
	var yyb2461 bool
	var yyhl2461 bool = l >= 0
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2461++
		if yyhl2461 {
			yyb2461 = yyj2461 > l
		} else {
			yyb2461 = r.CheckBreak()
		}
		if yyb2461 {
			break
		}
		z.DecStructFieldNotFound(yyj2461-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2463 := z.EncBinary()
	_ = yym2463
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2464 := z.DecBinary()
	_ = yym2464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2465 := z.EncBinary()
		_ = yym2465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2466 := !z.EncBinary()
			yy2arr2466 := z.EncBasicHandle().StructToArray
			var yyq2466 [5]bool
			_, _, _ = yysep2466, yyq2466, yy2arr2466
			const yyr2466 bool = false
			yyq2466[0] = x.Kind != ""
			yyq2466[1] = x.APIVersion != ""
			yyq2466[2] = true
			yyq2466[3] = true
			yyq2466[4] = true
			if yyr2466 || yy2arr2466 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2466 int = 0
				for _, b := range yyq2466 {
					if b {
						yynn2466++
					}
				}
				r.EncodeMapStart(yynn2466)
			}
			if yyr2466 || yy2arr2466 {
				if yyq2466[0] {
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2466[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2469 := z.EncBinary()
					_ = yym2469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2466 || yy2arr2466 {
				if yyq2466[1] {
					yym2471 := z.EncBinary()
					_ = yym2471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2466[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2466 || yy2arr2466 {
				if yyq2466[2] {
					yy2474 := &x.ObjectMeta
					yy2474.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2466[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2475 := &x.ObjectMeta
					yy2475.CodecEncodeSelf(e)
				}
			}
			if yyr2466 || yy2arr2466 {
				if yyq2466[3] {
					yy2477 := &x.Spec
					yy2477.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2466[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2478 := &x.Spec
					yy2478.CodecEncodeSelf(e)
				}
			}
			if yyr2466 || yy2arr2466 {
				if yyq2466[4] {
					yy2480 := &x.Status
					yy2480.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2466[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2481 := &x.Status
					yy2481.CodecEncodeSelf(e)
				}
			}
			if yysep2466 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2482 := z.DecBinary()
	_ = yym2482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2483 := r.ReadMapStart()
			if yyl2483 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2483, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2483 := r.ReadArrayStart()
			if yyl2483 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2484Slc
	var yyhl2484 bool = l >= 0
	for yyj2484 := 0; ; yyj2484++ {
		if yyhl2484 {
			if yyj2484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2484Slc = r.DecodeBytes(yys2484Slc, true, true)
		yys2484 := string(yys2484Slc)
		switch yys2484 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2487 := &x.ObjectMeta
				yyv2487.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2488 := &x.Spec
				yyv2488.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2489 := &x.Status
				yyv2489.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2484)
		} // end switch yys2484
	} // end for yyj2484
	if !yyhl2484 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2490 int
	var yyb2490 bool
	var yyhl2490 bool = l >= 0
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2493 := &x.ObjectMeta
		yyv2493.CodecDecodeSelf(d)
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2494 := &x.Spec
		yyv2494.CodecDecodeSelf(d)
	}
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2495 := &x.Status
		yyv2495.CodecDecodeSelf(d)
	}
	for {
		yyj2490++
		if yyhl2490 {
			yyb2490 = yyj2490 > l
		} else {
			yyb2490 = r.CheckBreak()
		}
		if yyb2490 {
			break
		}
		z.DecStructFieldNotFound(yyj2490-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2496 := z.EncBinary()
		_ = yym2496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2497 := !z.EncBinary()
			yy2arr2497 := z.EncBasicHandle().StructToArray
			var yyq2497 [4]bool
			_, _, _ = yysep2497, yyq2497, yy2arr2497
			const yyr2497 bool = false
			yyq2497[0] = x.Kind != ""
			yyq2497[1] = x.APIVersion != ""
			yyq2497[2] = true
			if yyr2497 || yy2arr2497 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2497 int = 1
				for _, b := range yyq2497 {
					if b {
						yynn2497++
					}
				}
				r.EncodeMapStart(yynn2497)
			}
			if yyr2497 || yy2arr2497 {
				if yyq2497[0] {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				if yyq2497[1] {
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				if yyq2497[2] {
					yy2505 := &x.ListMeta
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2505) {
					} else {
						z.EncFallback(yy2505)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2497[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2507 := &x.ListMeta
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2507) {
					} else {
						z.EncFallback(yy2507)
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2497 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2512 := z.DecBinary()
	_ = yym2512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2513 := r.ReadMapStart()
			if yyl2513 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2513, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2513 := r.ReadArrayStart()
			if yyl2513 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2513, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2514Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2514Slc
	var yyhl2514 bool = l >= 0
	for yyj2514 := 0; ; yyj2514++ {
		if yyhl2514 {
			if yyj2514 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2514Slc = r.DecodeBytes(yys2514Slc, true, true)
		yys2514 := string(yys2514Slc)
		switch yys2514 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2517 := &x.ListMeta
				yym2518 := z.DecBinary()
				_ = yym2518
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2517) {
				} else {
					z.DecFallback(yyv2517, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2519 := &x.Items
				yym2520 := z.DecBinary()
				_ = yym2520
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2519), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2514)
		} // end switch yys2514
	} // end for yyj2514
	if !yyhl2514 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2521 int
	var yyb2521 bool
	var yyhl2521 bool = l >= 0
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2524 := &x.ListMeta
		yym2525 := z.DecBinary()
		_ = yym2525
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2524) {
		} else {
			z.DecFallback(yyv2524, false)
		}
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2526 := &x.Items
		yym2527 := z.DecBinary()
		_ = yym2527
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2526), d)
		}
	}
	for {
		yyj2521++
		if yyhl2521 {
			yyb2521 = yyj2521 > l
		} else {
			yyb2521 = r.CheckBreak()
		}
		if yyb2521 {
			break
		}
		z.DecStructFieldNotFound(yyj2521-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2528 := z.EncBinary()
		_ = yym2528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2529 := !z.EncBinary()
			yy2arr2529 := z.EncBasicHandle().StructToArray
			var yyq2529 [4]bool
			_, _, _ = yysep2529, yyq2529, yy2arr2529
			const yyr2529 bool = false
			yyq2529[0] = x.Kind != ""
			yyq2529[1] = x.APIVersion != ""
			yyq2529[2] = true
			if yyr2529 || yy2arr2529 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2529 int = 1
				for _, b := range yyq2529 {
					if b {
						yynn2529++
					}
				}
				r.EncodeMapStart(yynn2529)
			}
			if yyr2529 || yy2arr2529 {
				if yyq2529[0] {
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				if yyq2529[1] {
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2529[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2529 || yy2arr2529 {
				if yyq2529[2] {
					yy2537 := &x.ObjectMeta
					yy2537.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2529[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2538 := &x.ObjectMeta
					yy2538.CodecEncodeSelf(e)
				}
			}
			if yyr2529 || yy2arr2529 {
				yy2540 := &x.Target
				yy2540.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2541 := &x.Target
				yy2541.CodecEncodeSelf(e)
			}
			if yysep2529 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2542 := z.DecBinary()
	_ = yym2542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2543 := r.ReadMapStart()
			if yyl2543 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2543, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2543 := r.ReadArrayStart()
			if yyl2543 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2543, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2544Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2544Slc
	var yyhl2544 bool = l >= 0
	for yyj2544 := 0; ; yyj2544++ {
		if yyhl2544 {
			if yyj2544 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2544Slc = r.DecodeBytes(yys2544Slc, true, true)
		yys2544 := string(yys2544Slc)
		switch yys2544 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2547 := &x.ObjectMeta
				yyv2547.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2548 := &x.Target
				yyv2548.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2544)
		} // end switch yys2544
	} // end for yyj2544
	if !yyhl2544 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2549 int
	var yyb2549 bool
	var yyhl2549 bool = l >= 0
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2552 := &x.ObjectMeta
		yyv2552.CodecDecodeSelf(d)
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2553 := &x.Target
		yyv2553.CodecDecodeSelf(d)
	}
	for {
		yyj2549++
		if yyhl2549 {
			yyb2549 = yyj2549 > l
		} else {
			yyb2549 = r.CheckBreak()
		}
		if yyb2549 {
			break
		}
		z.DecStructFieldNotFound(yyj2549-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2554 := z.EncBinary()
		_ = yym2554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2555 := !z.EncBinary()
			yy2arr2555 := z.EncBasicHandle().StructToArray
			var yyq2555 [3]bool
			_, _, _ = yysep2555, yyq2555, yy2arr2555
			const yyr2555 bool = false
			yyq2555[0] = x.Kind != ""
			yyq2555[1] = x.APIVersion != ""
			if yyr2555 || yy2arr2555 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2555 int = 1
				for _, b := range yyq2555 {
					if b {
						yynn2555++
					}
				}
				r.EncodeMapStart(yynn2555)
			}
			if yyr2555 || yy2arr2555 {
				if yyq2555[0] {
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2555[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2555 || yy2arr2555 {
				if yyq2555[1] {
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2555[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2561 := z.EncBinary()
					_ = yym2561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2555 || yy2arr2555 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2563 := *x.GracePeriodSeconds
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						r.EncodeInt(int64(yy2563))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2565 := *x.GracePeriodSeconds
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeInt(int64(yy2565))
					}
				}
			}
			if yysep2555 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2567 := z.DecBinary()
	_ = yym2567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2568 := r.ReadMapStart()
			if yyl2568 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2568, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2568 := r.ReadArrayStart()
			if yyl2568 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2569Slc
	var yyhl2569 bool = l >= 0
	for yyj2569 := 0; ; yyj2569++ {
		if yyhl2569 {
			if yyj2569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2569Slc = r.DecodeBytes(yys2569Slc, true, true)
		yys2569 := string(yys2569Slc)
		switch yys2569 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2573 := z.DecBinary()
				_ = yym2573
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2569)
		} // end switch yys2569
	} // end for yyj2569
	if !yyhl2569 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2574 int
	var yyb2574 bool
	var yyhl2574 bool = l >= 0
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2574++
	if yyhl2574 {
		yyb2574 = yyj2574 > l
	} else {
		yyb2574 = r.CheckBreak()
	}
	if yyb2574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2578 := z.DecBinary()
		_ = yym2578
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2574++
		if yyhl2574 {
			yyb2574 = yyj2574 > l
		} else {
			yyb2574 = r.CheckBreak()
		}
		if yyb2574 {
			break
		}
		z.DecStructFieldNotFound(yyj2574-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2579 := z.EncBinary()
		_ = yym2579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2580 := !z.EncBinary()
			yy2arr2580 := z.EncBasicHandle().StructToArray
			var yyq2580 [6]bool
			_, _, _ = yysep2580, yyq2580, yy2arr2580
			const yyr2580 bool = false
			yyq2580[0] = x.Kind != ""
			yyq2580[1] = x.APIVersion != ""
			if yyr2580 || yy2arr2580 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2580 int = 4
				for _, b := range yyq2580 {
					if b {
						yynn2580++
					}
				}
				r.EncodeMapStart(yynn2580)
			}
			if yyr2580 || yy2arr2580 {
				if yyq2580[0] {
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2580[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2580 || yy2arr2580 {
				if yyq2580[1] {
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2580[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2580 || yy2arr2580 {
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2580 || yy2arr2580 {
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2592 := z.EncBinary()
					_ = yym2592
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2580 || yy2arr2580 {
				yym2594 := z.EncBinary()
				_ = yym2594
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				yym2595 := z.EncBinary()
				_ = yym2595
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2580 || yy2arr2580 {
				yym2597 := z.EncBinary()
				_ = yym2597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				yym2598 := z.EncBinary()
				_ = yym2598
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yysep2580 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2599 := z.DecBinary()
	_ = yym2599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2600 := r.ReadMapStart()
			if yyl2600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2600 := r.ReadArrayStart()
			if yyl2600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2601Slc
	var yyhl2601 bool = l >= 0
	for yyj2601 := 0; ; yyj2601++ {
		if yyhl2601 {
			if yyj2601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2601Slc = r.DecodeBytes(yys2601Slc, true, true)
		yys2601 := string(yys2601Slc)
		switch yys2601 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2604 := &x.LabelSelector
				yym2605 := z.DecBinary()
				_ = yym2605
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2604) {
				} else {
					z.DecFallback(yyv2604, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2606 := &x.FieldSelector
				yym2607 := z.DecBinary()
				_ = yym2607
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2606) {
				} else {
					z.DecFallback(yyv2606, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2601)
		} // end switch yys2601
	} // end for yyj2601
	if !yyhl2601 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2610 int
	var yyb2610 bool
	var yyhl2610 bool = l >= 0
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2613 := &x.LabelSelector
		yym2614 := z.DecBinary()
		_ = yym2614
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2613) {
		} else {
			z.DecFallback(yyv2613, true)
		}
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2615 := &x.FieldSelector
		yym2616 := z.DecBinary()
		_ = yym2616
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2615) {
		} else {
			z.DecFallback(yyv2615, true)
		}
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2610++
		if yyhl2610 {
			yyb2610 = yyj2610 > l
		} else {
			yyb2610 = r.CheckBreak()
		}
		if yyb2610 {
			break
		}
		z.DecStructFieldNotFound(yyj2610-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2619 := z.EncBinary()
		_ = yym2619
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2620 := !z.EncBinary()
			yy2arr2620 := z.EncBasicHandle().StructToArray
			var yyq2620 [10]bool
			_, _, _ = yysep2620, yyq2620, yy2arr2620
			const yyr2620 bool = false
			yyq2620[0] = x.Kind != ""
			yyq2620[1] = x.APIVersion != ""
			if yyr2620 || yy2arr2620 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2620 int = 8
				for _, b := range yyq2620 {
					if b {
						yynn2620++
					}
				}
				r.EncodeMapStart(yynn2620)
			}
			if yyr2620 || yy2arr2620 {
				if yyq2620[0] {
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2620[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				if yyq2620[1] {
					yym2625 := z.EncBinary()
					_ = yym2625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2620[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				yym2628 := z.EncBinary()
				_ = yym2628
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2629 := z.EncBinary()
				_ = yym2629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2620 || yy2arr2620 {
				yym2631 := z.EncBinary()
				_ = yym2631
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				yym2632 := z.EncBinary()
				_ = yym2632
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2620 || yy2arr2620 {
				yym2634 := z.EncBinary()
				_ = yym2634
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				yym2635 := z.EncBinary()
				_ = yym2635
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2620 || yy2arr2620 {
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2637 := *x.SinceSeconds
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else {
						r.EncodeInt(int64(yy2637))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2639 := *x.SinceSeconds
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeInt(int64(yy2639))
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2642 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2642 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2643 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2643 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				yym2645 := z.EncBinary()
				_ = yym2645
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				yym2646 := z.EncBinary()
				_ = yym2646
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2620 || yy2arr2620 {
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2648 := *x.TailLines
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeInt(int64(yy2648))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2650 := *x.TailLines
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeInt(int64(yy2650))
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2653 := *x.LimitBytes
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeInt(int64(yy2653))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2655 := *x.LimitBytes
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						r.EncodeInt(int64(yy2655))
					}
				}
			}
			if yysep2620 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2657 := z.DecBinary()
	_ = yym2657
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2658 := r.ReadMapStart()
			if yyl2658 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2658, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2658 := r.ReadArrayStart()
			if yyl2658 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2658, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2659Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2659Slc
	var yyhl2659 bool = l >= 0
	for yyj2659 := 0; ; yyj2659++ {
		if yyhl2659 {
			if yyj2659 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2659Slc = r.DecodeBytes(yys2659Slc, true, true)
		yys2659 := string(yys2659Slc)
		switch yys2659 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2666 := z.DecBinary()
				_ = yym2666
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2668 := z.DecBinary()
				_ = yym2668
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2668 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2668 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2671 := z.DecBinary()
				_ = yym2671
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2673 := z.DecBinary()
				_ = yym2673
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2659)
		} // end switch yys2659
	} // end for yyj2659
	if !yyhl2659 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2674 int
	var yyb2674 bool
	var yyhl2674 bool = l >= 0
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2681 := z.DecBinary()
		_ = yym2681
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2683 := z.DecBinary()
		_ = yym2683
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2683 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2683 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2686 := z.DecBinary()
		_ = yym2686
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2674++
	if yyhl2674 {
		yyb2674 = yyj2674 > l
	} else {
		yyb2674 = r.CheckBreak()
	}
	if yyb2674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2688 := z.DecBinary()
		_ = yym2688
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2674++
		if yyhl2674 {
			yyb2674 = yyj2674 > l
		} else {
			yyb2674 = r.CheckBreak()
		}
		if yyb2674 {
			break
		}
		z.DecStructFieldNotFound(yyj2674-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2689 := z.EncBinary()
		_ = yym2689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2690 := !z.EncBinary()
			yy2arr2690 := z.EncBasicHandle().StructToArray
			var yyq2690 [7]bool
			_, _, _ = yysep2690, yyq2690, yy2arr2690
			const yyr2690 bool = false
			yyq2690[0] = x.Kind != ""
			yyq2690[1] = x.APIVersion != ""
			yyq2690[2] = x.Stdin != false
			yyq2690[3] = x.Stdout != false
			yyq2690[4] = x.Stderr != false
			yyq2690[5] = x.TTY != false
			yyq2690[6] = x.Container != ""
			if yyr2690 || yy2arr2690 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2690 int = 0
				for _, b := range yyq2690 {
					if b {
						yynn2690++
					}
				}
				r.EncodeMapStart(yynn2690)
			}
			if yyr2690 || yy2arr2690 {
				if yyq2690[0] {
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2690[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				if yyq2690[1] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2690[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				if yyq2690[2] {
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2690[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				if yyq2690[3] {
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2690[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				if yyq2690[4] {
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2690[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				if yyq2690[5] {
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2690[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2690 || yy2arr2690 {
				if yyq2690[6] {
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2690[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2690 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2712 := z.DecBinary()
	_ = yym2712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2713 := r.ReadMapStart()
			if yyl2713 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2713, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2713 := r.ReadArrayStart()
			if yyl2713 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2714Slc
	var yyhl2714 bool = l >= 0
	for yyj2714 := 0; ; yyj2714++ {
		if yyhl2714 {
			if yyj2714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2714Slc = r.DecodeBytes(yys2714Slc, true, true)
		yys2714 := string(yys2714Slc)
		switch yys2714 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2714)
		} // end switch yys2714
	} // end for yyj2714
	if !yyhl2714 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2722 int
	var yyb2722 bool
	var yyhl2722 bool = l >= 0
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2722++
		if yyhl2722 {
			yyb2722 = yyj2722 > l
		} else {
			yyb2722 = r.CheckBreak()
		}
		if yyb2722 {
			break
		}
		z.DecStructFieldNotFound(yyj2722-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2730 := z.EncBinary()
		_ = yym2730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2731 := !z.EncBinary()
			yy2arr2731 := z.EncBasicHandle().StructToArray
			var yyq2731 [8]bool
			_, _, _ = yysep2731, yyq2731, yy2arr2731
			const yyr2731 bool = false
			yyq2731[0] = x.Kind != ""
			yyq2731[1] = x.APIVersion != ""
			if yyr2731 || yy2arr2731 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2731 int = 6
				for _, b := range yyq2731 {
					if b {
						yynn2731++
					}
				}
				r.EncodeMapStart(yynn2731)
			}
			if yyr2731 || yy2arr2731 {
				if yyq2731[0] {
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2731[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2731 || yy2arr2731 {
				if yyq2731[1] {
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2731[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2731 || yy2arr2731 {
				yym2739 := z.EncBinary()
				_ = yym2739
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				yym2740 := z.EncBinary()
				_ = yym2740
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2731 || yy2arr2731 {
				yym2742 := z.EncBinary()
				_ = yym2742
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				yym2743 := z.EncBinary()
				_ = yym2743
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2731 || yy2arr2731 {
				yym2745 := z.EncBinary()
				_ = yym2745
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				yym2746 := z.EncBinary()
				_ = yym2746
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2731 || yy2arr2731 {
				yym2748 := z.EncBinary()
				_ = yym2748
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				yym2749 := z.EncBinary()
				_ = yym2749
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2731 || yy2arr2731 {
				yym2751 := z.EncBinary()
				_ = yym2751
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2752 := z.EncBinary()
				_ = yym2752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2731 || yy2arr2731 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2731 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2756 := z.DecBinary()
	_ = yym2756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2757 := r.ReadMapStart()
			if yyl2757 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2757, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2757 := r.ReadArrayStart()
			if yyl2757 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2758Slc
	var yyhl2758 bool = l >= 0
	for yyj2758 := 0; ; yyj2758++ {
		if yyhl2758 {
			if yyj2758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2758Slc = r.DecodeBytes(yys2758Slc, true, true)
		yys2758 := string(yys2758Slc)
		switch yys2758 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2766 := &x.Command
				yym2767 := z.DecBinary()
				_ = yym2767
				if false {
				} else {
					z.F.DecSliceStringX(yyv2766, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2758)
		} // end switch yys2758
	} // end for yyj2758
	if !yyhl2758 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2768 int
	var yyb2768 bool
	var yyhl2768 bool = l >= 0
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2768++
	if yyhl2768 {
		yyb2768 = yyj2768 > l
	} else {
		yyb2768 = r.CheckBreak()
	}
	if yyb2768 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2776 := &x.Command
		yym2777 := z.DecBinary()
		_ = yym2777
		if false {
		} else {
			z.F.DecSliceStringX(yyv2776, false, d)
		}
	}
	for {
		yyj2768++
		if yyhl2768 {
			yyb2768 = yyj2768 > l
		} else {
			yyb2768 = r.CheckBreak()
		}
		if yyb2768 {
			break
		}
		z.DecStructFieldNotFound(yyj2768-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2778 := z.EncBinary()
		_ = yym2778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2779 := !z.EncBinary()
			yy2arr2779 := z.EncBasicHandle().StructToArray
			var yyq2779 [3]bool
			_, _, _ = yysep2779, yyq2779, yy2arr2779
			const yyr2779 bool = false
			yyq2779[0] = x.Kind != ""
			yyq2779[1] = x.APIVersion != ""
			if yyr2779 || yy2arr2779 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2779 int = 1
				for _, b := range yyq2779 {
					if b {
						yynn2779++
					}
				}
				r.EncodeMapStart(yynn2779)
			}
			if yyr2779 || yy2arr2779 {
				if yyq2779[0] {
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2779[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				if yyq2779[1] {
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2779[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				yym2787 := z.EncBinary()
				_ = yym2787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				yym2788 := z.EncBinary()
				_ = yym2788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep2779 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2789 := z.DecBinary()
	_ = yym2789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2790 := r.ReadMapStart()
			if yyl2790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2790, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2790 := r.ReadArrayStart()
			if yyl2790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2791Slc
	var yyhl2791 bool = l >= 0
	for yyj2791 := 0; ; yyj2791++ {
		if yyhl2791 {
			if yyj2791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2791Slc = r.DecodeBytes(yys2791Slc, true, true)
		yys2791 := string(yys2791Slc)
		switch yys2791 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2791)
		} // end switch yys2791
	} // end for yyj2791
	if !yyhl2791 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2795 int
	var yyb2795 bool
	var yyhl2795 bool = l >= 0
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2795++
	if yyhl2795 {
		yyb2795 = yyj2795 > l
	} else {
		yyb2795 = r.CheckBreak()
	}
	if yyb2795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2795++
		if yyhl2795 {
			yyb2795 = yyj2795 > l
		} else {
			yyb2795 = r.CheckBreak()
		}
		if yyb2795 {
			break
		}
		z.DecStructFieldNotFound(yyj2795-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2799 := z.EncBinary()
		_ = yym2799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2800 := !z.EncBinary()
			yy2arr2800 := z.EncBasicHandle().StructToArray
			var yyq2800 [7]bool
			_, _, _ = yysep2800, yyq2800, yy2arr2800
			const yyr2800 bool = false
			yyq2800[0] = x.Kind != ""
			yyq2800[1] = x.Namespace != ""
			yyq2800[2] = x.Name != ""
			yyq2800[3] = x.UID != ""
			yyq2800[4] = x.APIVersion != ""
			yyq2800[5] = x.ResourceVersion != ""
			yyq2800[6] = x.FieldPath != ""
			if yyr2800 || yy2arr2800 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2800 int = 0
				for _, b := range yyq2800 {
					if b {
						yynn2800++
					}
				}
				r.EncodeMapStart(yynn2800)
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[0] {
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[1] {
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[2] {
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[3] {
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[4] {
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[5] {
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2800 || yy2arr2800 {
				if yyq2800[6] {
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2800[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2800 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2822 := z.DecBinary()
	_ = yym2822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2823 := r.ReadMapStart()
			if yyl2823 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2823, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2823 := r.ReadArrayStart()
			if yyl2823 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2824Slc
	var yyhl2824 bool = l >= 0
	for yyj2824 := 0; ; yyj2824++ {
		if yyhl2824 {
			if yyj2824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2824Slc = r.DecodeBytes(yys2824Slc, true, true)
		yys2824 := string(yys2824Slc)
		switch yys2824 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2824)
		} // end switch yys2824
	} // end for yyj2824
	if !yyhl2824 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2832 int
	var yyb2832 bool
	var yyhl2832 bool = l >= 0
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2832++
		if yyhl2832 {
			yyb2832 = yyj2832 > l
		} else {
			yyb2832 = r.CheckBreak()
		}
		if yyb2832 {
			break
		}
		z.DecStructFieldNotFound(yyj2832-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2840 := z.EncBinary()
		_ = yym2840
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2841 := !z.EncBinary()
			yy2arr2841 := z.EncBasicHandle().StructToArray
			var yyq2841 [1]bool
			_, _, _ = yysep2841, yyq2841, yy2arr2841
			const yyr2841 bool = false
			if yyr2841 || yy2arr2841 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2841 int = 1
				for _, b := range yyq2841 {
					if b {
						yynn2841++
					}
				}
				r.EncodeMapStart(yynn2841)
			}
			if yyr2841 || yy2arr2841 {
				yym2843 := z.EncBinary()
				_ = yym2843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2844 := z.EncBinary()
				_ = yym2844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yysep2841 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2845 := z.DecBinary()
	_ = yym2845
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2846 := r.ReadMapStart()
			if yyl2846 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2846, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2846 := r.ReadArrayStart()
			if yyl2846 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2846, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2847Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2847Slc
	var yyhl2847 bool = l >= 0
	for yyj2847 := 0; ; yyj2847++ {
		if yyhl2847 {
			if yyj2847 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2847Slc = r.DecodeBytes(yys2847Slc, true, true)
		yys2847 := string(yys2847Slc)
		switch yys2847 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2847)
		} // end switch yys2847
	} // end for yyj2847
	if !yyhl2847 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2849 int
	var yyb2849 bool
	var yyhl2849 bool = l >= 0
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2849++
		if yyhl2849 {
			yyb2849 = yyj2849 > l
		} else {
			yyb2849 = r.CheckBreak()
		}
		if yyb2849 {
			break
		}
		z.DecStructFieldNotFound(yyj2849-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2851 := z.EncBinary()
		_ = yym2851
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2852 := !z.EncBinary()
			yy2arr2852 := z.EncBasicHandle().StructToArray
			var yyq2852 [3]bool
			_, _, _ = yysep2852, yyq2852, yy2arr2852
			const yyr2852 bool = false
			yyq2852[0] = x.Kind != ""
			yyq2852[1] = x.APIVersion != ""
			yyq2852[2] = true
			if yyr2852 || yy2arr2852 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2852 int = 0
				for _, b := range yyq2852 {
					if b {
						yynn2852++
					}
				}
				r.EncodeMapStart(yynn2852)
			}
			if yyr2852 || yy2arr2852 {
				if yyq2852[0] {
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2852[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2852 || yy2arr2852 {
				if yyq2852[1] {
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2852[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2852 || yy2arr2852 {
				if yyq2852[2] {
					yy2860 := &x.Reference
					yy2860.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2852[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2861 := &x.Reference
					yy2861.CodecEncodeSelf(e)
				}
			}
			if yysep2852 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2862 := z.DecBinary()
	_ = yym2862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2863 := r.ReadMapStart()
			if yyl2863 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2863, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2863 := r.ReadArrayStart()
			if yyl2863 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2864Slc
	var yyhl2864 bool = l >= 0
	for yyj2864 := 0; ; yyj2864++ {
		if yyhl2864 {
			if yyj2864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2864Slc = r.DecodeBytes(yys2864Slc, true, true)
		yys2864 := string(yys2864Slc)
		switch yys2864 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2867 := &x.Reference
				yyv2867.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2864)
		} // end switch yys2864
	} // end for yyj2864
	if !yyhl2864 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2868 int
	var yyb2868 bool
	var yyhl2868 bool = l >= 0
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2871 := &x.Reference
		yyv2871.CodecDecodeSelf(d)
	}
	for {
		yyj2868++
		if yyhl2868 {
			yyb2868 = yyj2868 > l
		} else {
			yyb2868 = r.CheckBreak()
		}
		if yyb2868 {
			break
		}
		z.DecStructFieldNotFound(yyj2868-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2872 := z.EncBinary()
		_ = yym2872
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2873 := !z.EncBinary()
			yy2arr2873 := z.EncBasicHandle().StructToArray
			var yyq2873 [2]bool
			_, _, _ = yysep2873, yyq2873, yy2arr2873
			const yyr2873 bool = false
			yyq2873[0] = x.Component != ""
			yyq2873[1] = x.Host != ""
			if yyr2873 || yy2arr2873 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2873 int = 0
				for _, b := range yyq2873 {
					if b {
						yynn2873++
					}
				}
				r.EncodeMapStart(yynn2873)
			}
			if yyr2873 || yy2arr2873 {
				if yyq2873[0] {
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2873[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2873 || yy2arr2873 {
				if yyq2873[1] {
					yym2878 := z.EncBinary()
					_ = yym2878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2873[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2873 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2880 := z.DecBinary()
	_ = yym2880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2881 := r.ReadMapStart()
			if yyl2881 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2881, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2881 := r.ReadArrayStart()
			if yyl2881 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2882Slc
	var yyhl2882 bool = l >= 0
	for yyj2882 := 0; ; yyj2882++ {
		if yyhl2882 {
			if yyj2882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2882Slc = r.DecodeBytes(yys2882Slc, true, true)
		yys2882 := string(yys2882Slc)
		switch yys2882 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2882)
		} // end switch yys2882
	} // end for yyj2882
	if !yyhl2882 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2885 int
	var yyb2885 bool
	var yyhl2885 bool = l >= 0
	yyj2885++
	if yyhl2885 {
		yyb2885 = yyj2885 > l
	} else {
		yyb2885 = r.CheckBreak()
	}
	if yyb2885 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2885++
	if yyhl2885 {
		yyb2885 = yyj2885 > l
	} else {
		yyb2885 = r.CheckBreak()
	}
	if yyb2885 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2885++
		if yyhl2885 {
			yyb2885 = yyj2885 > l
		} else {
			yyb2885 = r.CheckBreak()
		}
		if yyb2885 {
			break
		}
		z.DecStructFieldNotFound(yyj2885-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2888 := z.EncBinary()
		_ = yym2888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2889 := !z.EncBinary()
			yy2arr2889 := z.EncBasicHandle().StructToArray
			var yyq2889 [10]bool
			_, _, _ = yysep2889, yyq2889, yy2arr2889
			const yyr2889 bool = false
			yyq2889[0] = x.Kind != ""
			yyq2889[1] = x.APIVersion != ""
			yyq2889[2] = true
			yyq2889[3] = true
			yyq2889[4] = x.Reason != ""
			yyq2889[5] = x.Message != ""
			yyq2889[6] = true
			yyq2889[7] = true
			yyq2889[8] = true
			yyq2889[9] = x.Count != 0
			if yyr2889 || yy2arr2889 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2889 int = 0
				for _, b := range yyq2889 {
					if b {
						yynn2889++
					}
				}
				r.EncodeMapStart(yynn2889)
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[0] {
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[1] {
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[2] {
					yy2897 := &x.ObjectMeta
					yy2897.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2889[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2898 := &x.ObjectMeta
					yy2898.CodecEncodeSelf(e)
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[3] {
					yy2900 := &x.InvolvedObject
					yy2900.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2889[3] {
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					yy2901 := &x.InvolvedObject
					yy2901.CodecEncodeSelf(e)
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[4] {
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[5] {
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2889[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[6] {
					yy2909 := &x.Source
					yy2909.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2889[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2910 := &x.Source
					yy2910.CodecEncodeSelf(e)
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[7] {
					yy2912 := &x.FirstTimestamp
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2912) {
					} else if yym2913 {
						z.EncBinaryMarshal(yy2912)
					} else if !yym2913 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2912)
					} else {
						z.EncFallback(yy2912)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2889[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2914 := &x.FirstTimestamp
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2914) {
					} else if yym2915 {
						z.EncBinaryMarshal(yy2914)
					} else if !yym2915 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2914)
					} else {
						z.EncFallback(yy2914)
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[8] {
					yy2917 := &x.LastTimestamp
					yym2918 := z.EncBinary()
					_ = yym2918
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2917) {
					} else if yym2918 {
						z.EncBinaryMarshal(yy2917)
					} else if !yym2918 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2917)
					} else {
						z.EncFallback(yy2917)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2889[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2919 := &x.LastTimestamp
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2919) {
					} else if yym2920 {
						z.EncBinaryMarshal(yy2919)
					} else if !yym2920 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2919)
					} else {
						z.EncFallback(yy2919)
					}
				}
			}
			if yyr2889 || yy2arr2889 {
				if yyq2889[9] {
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2889[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2889 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2924 := z.DecBinary()
	_ = yym2924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2925 := r.ReadMapStart()
			if yyl2925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2925 := r.ReadArrayStart()
			if yyl2925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2926Slc
	var yyhl2926 bool = l >= 0
	for yyj2926 := 0; ; yyj2926++ {
		if yyhl2926 {
			if yyj2926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2926Slc = r.DecodeBytes(yys2926Slc, true, true)
		yys2926 := string(yys2926Slc)
		switch yys2926 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2929 := &x.ObjectMeta
				yyv2929.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2930 := &x.InvolvedObject
				yyv2930.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2933 := &x.Source
				yyv2933.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2934 := &x.FirstTimestamp
				yym2935 := z.DecBinary()
				_ = yym2935
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2934) {
				} else if yym2935 {
					z.DecBinaryUnmarshal(yyv2934)
				} else if !yym2935 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2934)
				} else {
					z.DecFallback(yyv2934, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2936 := &x.LastTimestamp
				yym2937 := z.DecBinary()
				_ = yym2937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2936) {
				} else if yym2937 {
					z.DecBinaryUnmarshal(yyv2936)
				} else if !yym2937 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2936)
				} else {
					z.DecFallback(yyv2936, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2926)
		} // end switch yys2926
	} // end for yyj2926
	if !yyhl2926 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2939 int
	var yyb2939 bool
	var yyhl2939 bool = l >= 0
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2942 := &x.ObjectMeta
		yyv2942.CodecDecodeSelf(d)
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2943 := &x.InvolvedObject
		yyv2943.CodecDecodeSelf(d)
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2946 := &x.Source
		yyv2946.CodecDecodeSelf(d)
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2947 := &x.FirstTimestamp
		yym2948 := z.DecBinary()
		_ = yym2948
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2947) {
		} else if yym2948 {
			z.DecBinaryUnmarshal(yyv2947)
		} else if !yym2948 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2947)
		} else {
			z.DecFallback(yyv2947, false)
		}
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2949 := &x.LastTimestamp
		yym2950 := z.DecBinary()
		_ = yym2950
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2949) {
		} else if yym2950 {
			z.DecBinaryUnmarshal(yyv2949)
		} else if !yym2950 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2949)
		} else {
			z.DecFallback(yyv2949, false)
		}
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2939++
		if yyhl2939 {
			yyb2939 = yyj2939 > l
		} else {
			yyb2939 = r.CheckBreak()
		}
		if yyb2939 {
			break
		}
		z.DecStructFieldNotFound(yyj2939-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2952 := z.EncBinary()
		_ = yym2952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2953 := !z.EncBinary()
			yy2arr2953 := z.EncBasicHandle().StructToArray
			var yyq2953 [4]bool
			_, _, _ = yysep2953, yyq2953, yy2arr2953
			const yyr2953 bool = false
			yyq2953[0] = x.Kind != ""
			yyq2953[1] = x.APIVersion != ""
			yyq2953[2] = true
			if yyr2953 || yy2arr2953 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2953 int = 1
				for _, b := range yyq2953 {
					if b {
						yynn2953++
					}
				}
				r.EncodeMapStart(yynn2953)
			}
			if yyr2953 || yy2arr2953 {
				if yyq2953[0] {
					yym2955 := z.EncBinary()
					_ = yym2955
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2953[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2953 || yy2arr2953 {
				if yyq2953[1] {
					yym2958 := z.EncBinary()
					_ = yym2958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2953[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2953 || yy2arr2953 {
				if yyq2953[2] {
					yy2961 := &x.ListMeta
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2961) {
					} else {
						z.EncFallback(yy2961)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2953[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2963 := &x.ListMeta
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2963) {
					} else {
						z.EncFallback(yy2963)
					}
				}
			}
			if yyr2953 || yy2arr2953 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2953 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2968 := z.DecBinary()
	_ = yym2968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2969 := r.ReadMapStart()
			if yyl2969 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2969, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2969 := r.ReadArrayStart()
			if yyl2969 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2970Slc
	var yyhl2970 bool = l >= 0
	for yyj2970 := 0; ; yyj2970++ {
		if yyhl2970 {
			if yyj2970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2970Slc = r.DecodeBytes(yys2970Slc, true, true)
		yys2970 := string(yys2970Slc)
		switch yys2970 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2973 := &x.ListMeta
				yym2974 := z.DecBinary()
				_ = yym2974
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2973) {
				} else {
					z.DecFallback(yyv2973, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2975 := &x.Items
				yym2976 := z.DecBinary()
				_ = yym2976
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2975), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2970)
		} // end switch yys2970
	} // end for yyj2970
	if !yyhl2970 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2977 int
	var yyb2977 bool
	var yyhl2977 bool = l >= 0
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2980 := &x.ListMeta
		yym2981 := z.DecBinary()
		_ = yym2981
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2980) {
		} else {
			z.DecFallback(yyv2980, false)
		}
	}
	yyj2977++
	if yyhl2977 {
		yyb2977 = yyj2977 > l
	} else {
		yyb2977 = r.CheckBreak()
	}
	if yyb2977 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2982 := &x.Items
		yym2983 := z.DecBinary()
		_ = yym2983
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2982), d)
		}
	}
	for {
		yyj2977++
		if yyhl2977 {
			yyb2977 = yyj2977 > l
		} else {
			yyb2977 = r.CheckBreak()
		}
		if yyb2977 {
			break
		}
		z.DecStructFieldNotFound(yyj2977-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2984 := z.EncBinary()
		_ = yym2984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2985 := !z.EncBinary()
			yy2arr2985 := z.EncBasicHandle().StructToArray
			var yyq2985 [4]bool
			_, _, _ = yysep2985, yyq2985, yy2arr2985
			const yyr2985 bool = false
			yyq2985[0] = x.Kind != ""
			yyq2985[1] = x.APIVersion != ""
			yyq2985[2] = true
			if yyr2985 || yy2arr2985 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2985 int = 1
				for _, b := range yyq2985 {
					if b {
						yynn2985++
					}
				}
				r.EncodeMapStart(yynn2985)
			}
			if yyr2985 || yy2arr2985 {
				if yyq2985[0] {
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2985[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2985 || yy2arr2985 {
				if yyq2985[1] {
					yym2990 := z.EncBinary()
					_ = yym2990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2985[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2991 := z.EncBinary()
					_ = yym2991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2985 || yy2arr2985 {
				if yyq2985[2] {
					yy2993 := &x.ListMeta
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2993) {
					} else {
						z.EncFallback(yy2993)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2985[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2995 := &x.ListMeta
					yym2996 := z.EncBinary()
					_ = yym2996
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2995) {
					} else {
						z.EncFallback(yy2995)
					}
				}
			}
			if yyr2985 || yy2arr2985 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yysep2985 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3000 := z.DecBinary()
	_ = yym3000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3001 := r.ReadMapStart()
			if yyl3001 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3001, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3001 := r.ReadArrayStart()
			if yyl3001 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3002Slc
	var yyhl3002 bool = l >= 0
	for yyj3002 := 0; ; yyj3002++ {
		if yyhl3002 {
			if yyj3002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3002Slc = r.DecodeBytes(yys3002Slc, true, true)
		yys3002 := string(yys3002Slc)
		switch yys3002 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3005 := &x.ListMeta
				yym3006 := z.DecBinary()
				_ = yym3006
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3005) {
				} else {
					z.DecFallback(yyv3005, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3007 := &x.Items
				yym3008 := z.DecBinary()
				_ = yym3008
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3007), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3002)
		} // end switch yys3002
	} // end for yyj3002
	if !yyhl3002 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3009 int
	var yyb3009 bool
	var yyhl3009 bool = l >= 0
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3012 := &x.ListMeta
		yym3013 := z.DecBinary()
		_ = yym3013
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3012) {
		} else {
			z.DecFallback(yyv3012, false)
		}
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3014 := &x.Items
		yym3015 := z.DecBinary()
		_ = yym3015
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3014), d)
		}
	}
	for {
		yyj3009++
		if yyhl3009 {
			yyb3009 = yyj3009 > l
		} else {
			yyb3009 = r.CheckBreak()
		}
		if yyb3009 {
			break
		}
		z.DecStructFieldNotFound(yyj3009-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3016 := z.EncBinary()
	_ = yym3016
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3017 := z.DecBinary()
	_ = yym3017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3018 := z.EncBinary()
		_ = yym3018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3019 := !z.EncBinary()
			yy2arr3019 := z.EncBasicHandle().StructToArray
			var yyq3019 [6]bool
			_, _, _ = yysep3019, yyq3019, yy2arr3019
			const yyr3019 bool = false
			yyq3019[0] = x.Type != ""
			yyq3019[1] = len(x.Max) != 0
			yyq3019[2] = len(x.Min) != 0
			yyq3019[3] = len(x.Default) != 0
			yyq3019[4] = len(x.DefaultRequest) != 0
			yyq3019[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3019 || yy2arr3019 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3019 int = 0
				for _, b := range yyq3019 {
					if b {
						yynn3019++
					}
				}
				r.EncodeMapStart(yynn3019)
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3019[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3019[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3019[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3019[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3019[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3019 || yy2arr3019 {
				if yyq3019[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3019[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3019 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3026 := z.DecBinary()
	_ = yym3026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3027 := r.ReadMapStart()
			if yyl3027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3027, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3027 := r.ReadArrayStart()
			if yyl3027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3028Slc
	var yyhl3028 bool = l >= 0
	for yyj3028 := 0; ; yyj3028++ {
		if yyhl3028 {
			if yyj3028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3028Slc = r.DecodeBytes(yys3028Slc, true, true)
		yys3028 := string(yys3028Slc)
		switch yys3028 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3030 := &x.Max
				yyv3030.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3031 := &x.Min
				yyv3031.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3032 := &x.Default
				yyv3032.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3033 := &x.DefaultRequest
				yyv3033.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3034 := &x.MaxLimitRequestRatio
				yyv3034.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3028)
		} // end switch yys3028
	} // end for yyj3028
	if !yyhl3028 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3035 int
	var yyb3035 bool
	var yyhl3035 bool = l >= 0
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3037 := &x.Max
		yyv3037.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3038 := &x.Min
		yyv3038.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3039 := &x.Default
		yyv3039.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3040 := &x.DefaultRequest
		yyv3040.CodecDecodeSelf(d)
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3041 := &x.MaxLimitRequestRatio
		yyv3041.CodecDecodeSelf(d)
	}
	for {
		yyj3035++
		if yyhl3035 {
			yyb3035 = yyj3035 > l
		} else {
			yyb3035 = r.CheckBreak()
		}
		if yyb3035 {
			break
		}
		z.DecStructFieldNotFound(yyj3035-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3042 := z.EncBinary()
		_ = yym3042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3043 := !z.EncBinary()
			yy2arr3043 := z.EncBasicHandle().StructToArray
			var yyq3043 [1]bool
			_, _, _ = yysep3043, yyq3043, yy2arr3043
			const yyr3043 bool = false
			if yyr3043 || yy2arr3043 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3043 int = 1
				for _, b := range yyq3043 {
					if b {
						yynn3043++
					}
				}
				r.EncodeMapStart(yynn3043)
			}
			if yyr3043 || yy2arr3043 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3043 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3047 := z.DecBinary()
	_ = yym3047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3048 := r.ReadMapStart()
			if yyl3048 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3048, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3048 := r.ReadArrayStart()
			if yyl3048 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3049Slc
	var yyhl3049 bool = l >= 0
	for yyj3049 := 0; ; yyj3049++ {
		if yyhl3049 {
			if yyj3049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3049Slc = r.DecodeBytes(yys3049Slc, true, true)
		yys3049 := string(yys3049Slc)
		switch yys3049 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3050 := &x.Limits
				yym3051 := z.DecBinary()
				_ = yym3051
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3050), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3049)
		} // end switch yys3049
	} // end for yyj3049
	if !yyhl3049 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3052 int
	var yyb3052 bool
	var yyhl3052 bool = l >= 0
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3053 := &x.Limits
		yym3054 := z.DecBinary()
		_ = yym3054
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3053), d)
		}
	}
	for {
		yyj3052++
		if yyhl3052 {
			yyb3052 = yyj3052 > l
		} else {
			yyb3052 = r.CheckBreak()
		}
		if yyb3052 {
			break
		}
		z.DecStructFieldNotFound(yyj3052-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3055 := z.EncBinary()
		_ = yym3055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3056 := !z.EncBinary()
			yy2arr3056 := z.EncBasicHandle().StructToArray
			var yyq3056 [4]bool
			_, _, _ = yysep3056, yyq3056, yy2arr3056
			const yyr3056 bool = false
			yyq3056[0] = x.Kind != ""
			yyq3056[1] = x.APIVersion != ""
			yyq3056[2] = true
			yyq3056[3] = true
			if yyr3056 || yy2arr3056 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3056 int = 0
				for _, b := range yyq3056 {
					if b {
						yynn3056++
					}
				}
				r.EncodeMapStart(yynn3056)
			}
			if yyr3056 || yy2arr3056 {
				if yyq3056[0] {
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3056[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3056 || yy2arr3056 {
				if yyq3056[1] {
					yym3061 := z.EncBinary()
					_ = yym3061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3056[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3056 || yy2arr3056 {
				if yyq3056[2] {
					yy3064 := &x.ObjectMeta
					yy3064.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3056[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3065 := &x.ObjectMeta
					yy3065.CodecEncodeSelf(e)
				}
			}
			if yyr3056 || yy2arr3056 {
				if yyq3056[3] {
					yy3067 := &x.Spec
					yy3067.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3056[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3068 := &x.Spec
					yy3068.CodecEncodeSelf(e)
				}
			}
			if yysep3056 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3069 := z.DecBinary()
	_ = yym3069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3070 := r.ReadMapStart()
			if yyl3070 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3070, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3070 := r.ReadArrayStart()
			if yyl3070 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3071Slc
	var yyhl3071 bool = l >= 0
	for yyj3071 := 0; ; yyj3071++ {
		if yyhl3071 {
			if yyj3071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3071Slc = r.DecodeBytes(yys3071Slc, true, true)
		yys3071 := string(yys3071Slc)
		switch yys3071 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3074 := &x.ObjectMeta
				yyv3074.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3075 := &x.Spec
				yyv3075.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3071)
		} // end switch yys3071
	} // end for yyj3071
	if !yyhl3071 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3076 int
	var yyb3076 bool
	var yyhl3076 bool = l >= 0
	yyj3076++
	if yyhl3076 {
		yyb3076 = yyj3076 > l
	} else {
		yyb3076 = r.CheckBreak()
	}
	if yyb3076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3076++
	if yyhl3076 {
		yyb3076 = yyj3076 > l
	} else {
		yyb3076 = r.CheckBreak()
	}
	if yyb3076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3076++
	if yyhl3076 {
		yyb3076 = yyj3076 > l
	} else {
		yyb3076 = r.CheckBreak()
	}
	if yyb3076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3079 := &x.ObjectMeta
		yyv3079.CodecDecodeSelf(d)
	}
	yyj3076++
	if yyhl3076 {
		yyb3076 = yyj3076 > l
	} else {
		yyb3076 = r.CheckBreak()
	}
	if yyb3076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3080 := &x.Spec
		yyv3080.CodecDecodeSelf(d)
	}
	for {
		yyj3076++
		if yyhl3076 {
			yyb3076 = yyj3076 > l
		} else {
			yyb3076 = r.CheckBreak()
		}
		if yyb3076 {
			break
		}
		z.DecStructFieldNotFound(yyj3076-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [4]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			yyq3082[0] = x.Kind != ""
			yyq3082[1] = x.APIVersion != ""
			yyq3082[2] = true
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3082 int = 1
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
			}
			if yyr3082 || yy2arr3082 {
				if yyq3082[0] {
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3082[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				if yyq3082[1] {
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3082[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				if yyq3082[2] {
					yy3090 := &x.ListMeta
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3090) {
					} else {
						z.EncFallback(yy3090)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3092 := &x.ListMeta
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3092) {
					} else {
						z.EncFallback(yy3092)
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3095 := z.EncBinary()
					_ = yym3095
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3082 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3097 := z.DecBinary()
	_ = yym3097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3098 := r.ReadMapStart()
			if yyl3098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3098, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3098 := r.ReadArrayStart()
			if yyl3098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3099Slc
	var yyhl3099 bool = l >= 0
	for yyj3099 := 0; ; yyj3099++ {
		if yyhl3099 {
			if yyj3099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3099Slc = r.DecodeBytes(yys3099Slc, true, true)
		yys3099 := string(yys3099Slc)
		switch yys3099 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3102 := &x.ListMeta
				yym3103 := z.DecBinary()
				_ = yym3103
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3102) {
				} else {
					z.DecFallback(yyv3102, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3104 := &x.Items
				yym3105 := z.DecBinary()
				_ = yym3105
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3104), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3099)
		} // end switch yys3099
	} // end for yyj3099
	if !yyhl3099 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3106 int
	var yyb3106 bool
	var yyhl3106 bool = l >= 0
	yyj3106++
	if yyhl3106 {
		yyb3106 = yyj3106 > l
	} else {
		yyb3106 = r.CheckBreak()
	}
	if yyb3106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3106++
	if yyhl3106 {
		yyb3106 = yyj3106 > l
	} else {
		yyb3106 = r.CheckBreak()
	}
	if yyb3106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3106++
	if yyhl3106 {
		yyb3106 = yyj3106 > l
	} else {
		yyb3106 = r.CheckBreak()
	}
	if yyb3106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3109 := &x.ListMeta
		yym3110 := z.DecBinary()
		_ = yym3110
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3109) {
		} else {
			z.DecFallback(yyv3109, false)
		}
	}
	yyj3106++
	if yyhl3106 {
		yyb3106 = yyj3106 > l
	} else {
		yyb3106 = r.CheckBreak()
	}
	if yyb3106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3111 := &x.Items
		yym3112 := z.DecBinary()
		_ = yym3112
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3111), d)
		}
	}
	for {
		yyj3106++
		if yyhl3106 {
			yyb3106 = yyj3106 > l
		} else {
			yyb3106 = r.CheckBreak()
		}
		if yyb3106 {
			break
		}
		z.DecStructFieldNotFound(yyj3106-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3113 := z.EncBinary()
		_ = yym3113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3114 := !z.EncBinary()
			yy2arr3114 := z.EncBasicHandle().StructToArray
			var yyq3114 [1]bool
			_, _, _ = yysep3114, yyq3114, yy2arr3114
			const yyr3114 bool = false
			yyq3114[0] = len(x.Hard) != 0
			if yyr3114 || yy2arr3114 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3114 int = 0
				for _, b := range yyq3114 {
					if b {
						yynn3114++
					}
				}
				r.EncodeMapStart(yynn3114)
			}
			if yyr3114 || yy2arr3114 {
				if yyq3114[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3114[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3114 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3116 := z.DecBinary()
	_ = yym3116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3117 := r.ReadMapStart()
			if yyl3117 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3117, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3117 := r.ReadArrayStart()
			if yyl3117 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3118Slc
	var yyhl3118 bool = l >= 0
	for yyj3118 := 0; ; yyj3118++ {
		if yyhl3118 {
			if yyj3118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3118Slc = r.DecodeBytes(yys3118Slc, true, true)
		yys3118 := string(yys3118Slc)
		switch yys3118 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3119 := &x.Hard
				yyv3119.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3118)
		} // end switch yys3118
	} // end for yyj3118
	if !yyhl3118 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3120 int
	var yyb3120 bool
	var yyhl3120 bool = l >= 0
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3121 := &x.Hard
		yyv3121.CodecDecodeSelf(d)
	}
	for {
		yyj3120++
		if yyhl3120 {
			yyb3120 = yyj3120 > l
		} else {
			yyb3120 = r.CheckBreak()
		}
		if yyb3120 {
			break
		}
		z.DecStructFieldNotFound(yyj3120-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3122 := z.EncBinary()
		_ = yym3122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3123 := !z.EncBinary()
			yy2arr3123 := z.EncBasicHandle().StructToArray
			var yyq3123 [2]bool
			_, _, _ = yysep3123, yyq3123, yy2arr3123
			const yyr3123 bool = false
			yyq3123[0] = len(x.Hard) != 0
			yyq3123[1] = len(x.Used) != 0
			if yyr3123 || yy2arr3123 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3123 int = 0
				for _, b := range yyq3123 {
					if b {
						yynn3123++
					}
				}
				r.EncodeMapStart(yynn3123)
			}
			if yyr3123 || yy2arr3123 {
				if yyq3123[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3123[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3123 || yy2arr3123 {
				if yyq3123[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3123[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3123 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3126 := z.DecBinary()
	_ = yym3126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3127 := r.ReadMapStart()
			if yyl3127 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3127, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3127 := r.ReadArrayStart()
			if yyl3127 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3128Slc
	var yyhl3128 bool = l >= 0
	for yyj3128 := 0; ; yyj3128++ {
		if yyhl3128 {
			if yyj3128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3128Slc = r.DecodeBytes(yys3128Slc, true, true)
		yys3128 := string(yys3128Slc)
		switch yys3128 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3129 := &x.Hard
				yyv3129.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3130 := &x.Used
				yyv3130.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3128)
		} // end switch yys3128
	} // end for yyj3128
	if !yyhl3128 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3131 int
	var yyb3131 bool
	var yyhl3131 bool = l >= 0
	yyj3131++
	if yyhl3131 {
		yyb3131 = yyj3131 > l
	} else {
		yyb3131 = r.CheckBreak()
	}
	if yyb3131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3132 := &x.Hard
		yyv3132.CodecDecodeSelf(d)
	}
	yyj3131++
	if yyhl3131 {
		yyb3131 = yyj3131 > l
	} else {
		yyb3131 = r.CheckBreak()
	}
	if yyb3131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3133 := &x.Used
		yyv3133.CodecDecodeSelf(d)
	}
	for {
		yyj3131++
		if yyhl3131 {
			yyb3131 = yyj3131 > l
		} else {
			yyb3131 = r.CheckBreak()
		}
		if yyb3131 {
			break
		}
		z.DecStructFieldNotFound(yyj3131-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3134 := z.EncBinary()
		_ = yym3134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3135 := !z.EncBinary()
			yy2arr3135 := z.EncBasicHandle().StructToArray
			var yyq3135 [5]bool
			_, _, _ = yysep3135, yyq3135, yy2arr3135
			const yyr3135 bool = false
			yyq3135[0] = x.Kind != ""
			yyq3135[1] = x.APIVersion != ""
			yyq3135[2] = true
			yyq3135[3] = true
			yyq3135[4] = true
			if yyr3135 || yy2arr3135 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3135 int = 0
				for _, b := range yyq3135 {
					if b {
						yynn3135++
					}
				}
				r.EncodeMapStart(yynn3135)
			}
			if yyr3135 || yy2arr3135 {
				if yyq3135[0] {
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3135[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3138 := z.EncBinary()
					_ = yym3138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				if yyq3135[1] {
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3135[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3135 || yy2arr3135 {
				if yyq3135[2] {
					yy3143 := &x.ObjectMeta
					yy3143.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3135[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3144 := &x.ObjectMeta
					yy3144.CodecEncodeSelf(e)
				}
			}
			if yyr3135 || yy2arr3135 {
				if yyq3135[3] {
					yy3146 := &x.Spec
					yy3146.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3135[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3147 := &x.Spec
					yy3147.CodecEncodeSelf(e)
				}
			}
			if yyr3135 || yy2arr3135 {
				if yyq3135[4] {
					yy3149 := &x.Status
					yy3149.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3135[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3150 := &x.Status
					yy3150.CodecEncodeSelf(e)
				}
			}
			if yysep3135 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3151 := z.DecBinary()
	_ = yym3151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3152 := r.ReadMapStart()
			if yyl3152 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3152, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3152 := r.ReadArrayStart()
			if yyl3152 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3153Slc
	var yyhl3153 bool = l >= 0
	for yyj3153 := 0; ; yyj3153++ {
		if yyhl3153 {
			if yyj3153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3153Slc = r.DecodeBytes(yys3153Slc, true, true)
		yys3153 := string(yys3153Slc)
		switch yys3153 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3156 := &x.ObjectMeta
				yyv3156.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3157 := &x.Spec
				yyv3157.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3158 := &x.Status
				yyv3158.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3153)
		} // end switch yys3153
	} // end for yyj3153
	if !yyhl3153 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3159 int
	var yyb3159 bool
	var yyhl3159 bool = l >= 0
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3162 := &x.ObjectMeta
		yyv3162.CodecDecodeSelf(d)
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3163 := &x.Spec
		yyv3163.CodecDecodeSelf(d)
	}
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3164 := &x.Status
		yyv3164.CodecDecodeSelf(d)
	}
	for {
		yyj3159++
		if yyhl3159 {
			yyb3159 = yyj3159 > l
		} else {
			yyb3159 = r.CheckBreak()
		}
		if yyb3159 {
			break
		}
		z.DecStructFieldNotFound(yyj3159-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3165 := z.EncBinary()
		_ = yym3165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3166 := !z.EncBinary()
			yy2arr3166 := z.EncBasicHandle().StructToArray
			var yyq3166 [4]bool
			_, _, _ = yysep3166, yyq3166, yy2arr3166
			const yyr3166 bool = false
			yyq3166[0] = x.Kind != ""
			yyq3166[1] = x.APIVersion != ""
			yyq3166[2] = true
			if yyr3166 || yy2arr3166 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3166 int = 1
				for _, b := range yyq3166 {
					if b {
						yynn3166++
					}
				}
				r.EncodeMapStart(yynn3166)
			}
			if yyr3166 || yy2arr3166 {
				if yyq3166[0] {
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3166[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3166 || yy2arr3166 {
				if yyq3166[1] {
					yym3171 := z.EncBinary()
					_ = yym3171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3166[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3166 || yy2arr3166 {
				if yyq3166[2] {
					yy3174 := &x.ListMeta
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3174) {
					} else {
						z.EncFallback(yy3174)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3166[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3176 := &x.ListMeta
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3176) {
					} else {
						z.EncFallback(yy3176)
					}
				}
			}
			if yyr3166 || yy2arr3166 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3166 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3181 := z.DecBinary()
	_ = yym3181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3182 := r.ReadMapStart()
			if yyl3182 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3182, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3182 := r.ReadArrayStart()
			if yyl3182 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3183Slc
	var yyhl3183 bool = l >= 0
	for yyj3183 := 0; ; yyj3183++ {
		if yyhl3183 {
			if yyj3183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3183Slc = r.DecodeBytes(yys3183Slc, true, true)
		yys3183 := string(yys3183Slc)
		switch yys3183 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3186 := &x.ListMeta
				yym3187 := z.DecBinary()
				_ = yym3187
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3186) {
				} else {
					z.DecFallback(yyv3186, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3188 := &x.Items
				yym3189 := z.DecBinary()
				_ = yym3189
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3188), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3183)
		} // end switch yys3183
	} // end for yyj3183
	if !yyhl3183 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3190 int
	var yyb3190 bool
	var yyhl3190 bool = l >= 0
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3193 := &x.ListMeta
		yym3194 := z.DecBinary()
		_ = yym3194
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3193) {
		} else {
			z.DecFallback(yyv3193, false)
		}
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3195 := &x.Items
		yym3196 := z.DecBinary()
		_ = yym3196
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3195), d)
		}
	}
	for {
		yyj3190++
		if yyhl3190 {
			yyb3190 = yyj3190 > l
		} else {
			yyb3190 = r.CheckBreak()
		}
		if yyb3190 {
			break
		}
		z.DecStructFieldNotFound(yyj3190-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3197 := z.EncBinary()
		_ = yym3197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3198 := !z.EncBinary()
			yy2arr3198 := z.EncBasicHandle().StructToArray
			var yyq3198 [5]bool
			_, _, _ = yysep3198, yyq3198, yy2arr3198
			const yyr3198 bool = false
			yyq3198[0] = x.Kind != ""
			yyq3198[1] = x.APIVersion != ""
			yyq3198[2] = true
			yyq3198[3] = len(x.Data) != 0
			yyq3198[4] = x.Type != ""
			if yyr3198 || yy2arr3198 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3198 int = 0
				for _, b := range yyq3198 {
					if b {
						yynn3198++
					}
				}
				r.EncodeMapStart(yynn3198)
			}
			if yyr3198 || yy2arr3198 {
				if yyq3198[0] {
					yym3200 := z.EncBinary()
					_ = yym3200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3198[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3201 := z.EncBinary()
					_ = yym3201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3198 || yy2arr3198 {
				if yyq3198[1] {
					yym3203 := z.EncBinary()
					_ = yym3203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3198[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3198 || yy2arr3198 {
				if yyq3198[2] {
					yy3206 := &x.ObjectMeta
					yy3206.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3198[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3207 := &x.ObjectMeta
					yy3207.CodecEncodeSelf(e)
				}
			}
			if yyr3198 || yy2arr3198 {
				if yyq3198[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3209 := z.EncBinary()
						_ = yym3209
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3198[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3210 := z.EncBinary()
						_ = yym3210
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3198 || yy2arr3198 {
				if yyq3198[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3198[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3198 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3212 := z.DecBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3213 := r.ReadMapStart()
			if yyl3213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3213, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3213 := r.ReadArrayStart()
			if yyl3213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3214Slc
	var yyhl3214 bool = l >= 0
	for yyj3214 := 0; ; yyj3214++ {
		if yyhl3214 {
			if yyj3214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3214Slc = r.DecodeBytes(yys3214Slc, true, true)
		yys3214 := string(yys3214Slc)
		switch yys3214 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3217 := &x.ObjectMeta
				yyv3217.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3218 := &x.Data
				yym3219 := z.DecBinary()
				_ = yym3219
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3218), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3214)
		} // end switch yys3214
	} // end for yyj3214
	if !yyhl3214 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3221 int
	var yyb3221 bool
	var yyhl3221 bool = l >= 0
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3224 := &x.ObjectMeta
		yyv3224.CodecDecodeSelf(d)
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3225 := &x.Data
		yym3226 := z.DecBinary()
		_ = yym3226
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3225), d)
		}
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3221++
		if yyhl3221 {
			yyb3221 = yyj3221 > l
		} else {
			yyb3221 = r.CheckBreak()
		}
		if yyb3221 {
			break
		}
		z.DecStructFieldNotFound(yyj3221-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3228 := z.EncBinary()
	_ = yym3228
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3229 := z.DecBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3230 := z.EncBinary()
		_ = yym3230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3231 := !z.EncBinary()
			yy2arr3231 := z.EncBasicHandle().StructToArray
			var yyq3231 [4]bool
			_, _, _ = yysep3231, yyq3231, yy2arr3231
			const yyr3231 bool = false
			yyq3231[0] = x.Kind != ""
			yyq3231[1] = x.APIVersion != ""
			yyq3231[2] = true
			if yyr3231 || yy2arr3231 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3231 int = 1
				for _, b := range yyq3231 {
					if b {
						yynn3231++
					}
				}
				r.EncodeMapStart(yynn3231)
			}
			if yyr3231 || yy2arr3231 {
				if yyq3231[0] {
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3231[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3231 || yy2arr3231 {
				if yyq3231[1] {
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3231[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3231 || yy2arr3231 {
				if yyq3231[2] {
					yy3239 := &x.ListMeta
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3239) {
					} else {
						z.EncFallback(yy3239)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3231[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3241 := &x.ListMeta
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3241) {
					} else {
						z.EncFallback(yy3241)
					}
				}
			}
			if yyr3231 || yy2arr3231 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3231 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3246 := z.DecBinary()
	_ = yym3246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3247 := r.ReadMapStart()
			if yyl3247 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3247, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3247 := r.ReadArrayStart()
			if yyl3247 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3248Slc
	var yyhl3248 bool = l >= 0
	for yyj3248 := 0; ; yyj3248++ {
		if yyhl3248 {
			if yyj3248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3248Slc = r.DecodeBytes(yys3248Slc, true, true)
		yys3248 := string(yys3248Slc)
		switch yys3248 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3251 := &x.ListMeta
				yym3252 := z.DecBinary()
				_ = yym3252
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3251) {
				} else {
					z.DecFallback(yyv3251, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3253 := &x.Items
				yym3254 := z.DecBinary()
				_ = yym3254
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3253), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3248)
		} // end switch yys3248
	} // end for yyj3248
	if !yyhl3248 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3255 int
	var yyb3255 bool
	var yyhl3255 bool = l >= 0
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3258 := &x.ListMeta
		yym3259 := z.DecBinary()
		_ = yym3259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3258) {
		} else {
			z.DecFallback(yyv3258, false)
		}
	}
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3260 := &x.Items
		yym3261 := z.DecBinary()
		_ = yym3261
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3260), d)
		}
	}
	for {
		yyj3255++
		if yyhl3255 {
			yyb3255 = yyj3255 > l
		} else {
			yyb3255 = r.CheckBreak()
		}
		if yyb3255 {
			break
		}
		z.DecStructFieldNotFound(yyj3255-1, "")
	}
	r.ReadEnd()
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3262 := z.EncBinary()
	_ = yym3262
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3263 := z.DecBinary()
	_ = yym3263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3264 := z.EncBinary()
	_ = yym3264
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3265 := z.DecBinary()
	_ = yym3265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3266 := z.EncBinary()
		_ = yym3266
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3267 := !z.EncBinary()
			yy2arr3267 := z.EncBasicHandle().StructToArray
			var yyq3267 [4]bool
			_, _, _ = yysep3267, yyq3267, yy2arr3267
			const yyr3267 bool = false
			yyq3267[2] = x.Message != ""
			yyq3267[3] = x.Error != ""
			if yyr3267 || yy2arr3267 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3267 int = 2
				for _, b := range yyq3267 {
					if b {
						yynn3267++
					}
				}
				r.EncodeMapStart(yynn3267)
			}
			if yyr3267 || yy2arr3267 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3267 || yy2arr3267 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3267 || yy2arr3267 {
				if yyq3267[2] {
					yym3271 := z.EncBinary()
					_ = yym3271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3267[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3267 || yy2arr3267 {
				if yyq3267[3] {
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3267[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3267 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3276 := z.DecBinary()
	_ = yym3276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3277 := r.ReadMapStart()
			if yyl3277 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3277, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3277 := r.ReadArrayStart()
			if yyl3277 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3278Slc
	var yyhl3278 bool = l >= 0
	for yyj3278 := 0; ; yyj3278++ {
		if yyhl3278 {
			if yyj3278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3278Slc = r.DecodeBytes(yys3278Slc, true, true)
		yys3278 := string(yys3278Slc)
		switch yys3278 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3278)
		} // end switch yys3278
	} // end for yyj3278
	if !yyhl3278 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3283 int
	var yyb3283 bool
	var yyhl3283 bool = l >= 0
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3283++
	if yyhl3283 {
		yyb3283 = yyj3283 > l
	} else {
		yyb3283 = r.CheckBreak()
	}
	if yyb3283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3283++
		if yyhl3283 {
			yyb3283 = yyj3283 > l
		} else {
			yyb3283 = r.CheckBreak()
		}
		if yyb3283 {
			break
		}
		z.DecStructFieldNotFound(yyj3283-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3288 := z.EncBinary()
		_ = yym3288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3289 := !z.EncBinary()
			yy2arr3289 := z.EncBasicHandle().StructToArray
			var yyq3289 [4]bool
			_, _, _ = yysep3289, yyq3289, yy2arr3289
			const yyr3289 bool = false
			yyq3289[0] = x.Kind != ""
			yyq3289[1] = x.APIVersion != ""
			yyq3289[2] = true
			yyq3289[3] = len(x.Conditions) != 0
			if yyr3289 || yy2arr3289 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3289 int = 0
				for _, b := range yyq3289 {
					if b {
						yynn3289++
					}
				}
				r.EncodeMapStart(yynn3289)
			}
			if yyr3289 || yy2arr3289 {
				if yyq3289[0] {
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3289[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3289 || yy2arr3289 {
				if yyq3289[1] {
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3289[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3289 || yy2arr3289 {
				if yyq3289[2] {
					yy3297 := &x.ObjectMeta
					yy3297.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3289[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3298 := &x.ObjectMeta
					yy3298.CodecEncodeSelf(e)
				}
			}
			if yyr3289 || yy2arr3289 {
				if yyq3289[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3300 := z.EncBinary()
						_ = yym3300
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3289[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3301 := z.EncBinary()
						_ = yym3301
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3289 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3302 := z.DecBinary()
	_ = yym3302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3303 := r.ReadMapStart()
			if yyl3303 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3303, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3303 := r.ReadArrayStart()
			if yyl3303 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3304Slc
	var yyhl3304 bool = l >= 0
	for yyj3304 := 0; ; yyj3304++ {
		if yyhl3304 {
			if yyj3304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3304Slc = r.DecodeBytes(yys3304Slc, true, true)
		yys3304 := string(yys3304Slc)
		switch yys3304 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3307 := &x.ObjectMeta
				yyv3307.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3308 := &x.Conditions
				yym3309 := z.DecBinary()
				_ = yym3309
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3308), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3304)
		} // end switch yys3304
	} // end for yyj3304
	if !yyhl3304 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3310 int
	var yyb3310 bool
	var yyhl3310 bool = l >= 0
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3313 := &x.ObjectMeta
		yyv3313.CodecDecodeSelf(d)
	}
	yyj3310++
	if yyhl3310 {
		yyb3310 = yyj3310 > l
	} else {
		yyb3310 = r.CheckBreak()
	}
	if yyb3310 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3314 := &x.Conditions
		yym3315 := z.DecBinary()
		_ = yym3315
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3314), d)
		}
	}
	for {
		yyj3310++
		if yyhl3310 {
			yyb3310 = yyj3310 > l
		} else {
			yyb3310 = r.CheckBreak()
		}
		if yyb3310 {
			break
		}
		z.DecStructFieldNotFound(yyj3310-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3316 := z.EncBinary()
		_ = yym3316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3317 := !z.EncBinary()
			yy2arr3317 := z.EncBasicHandle().StructToArray
			var yyq3317 [4]bool
			_, _, _ = yysep3317, yyq3317, yy2arr3317
			const yyr3317 bool = false
			yyq3317[0] = x.Kind != ""
			yyq3317[1] = x.APIVersion != ""
			yyq3317[2] = true
			if yyr3317 || yy2arr3317 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3317 int = 1
				for _, b := range yyq3317 {
					if b {
						yynn3317++
					}
				}
				r.EncodeMapStart(yynn3317)
			}
			if yyr3317 || yy2arr3317 {
				if yyq3317[0] {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3317[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3317 || yy2arr3317 {
				if yyq3317[1] {
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3317[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3317 || yy2arr3317 {
				if yyq3317[2] {
					yy3325 := &x.ListMeta
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3325) {
					} else {
						z.EncFallback(yy3325)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3317[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3327 := &x.ListMeta
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3327) {
					} else {
						z.EncFallback(yy3327)
					}
				}
			}
			if yyr3317 || yy2arr3317 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3317 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3332 := z.DecBinary()
	_ = yym3332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3333 := r.ReadMapStart()
			if yyl3333 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3333, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3333 := r.ReadArrayStart()
			if yyl3333 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3334Slc
	var yyhl3334 bool = l >= 0
	for yyj3334 := 0; ; yyj3334++ {
		if yyhl3334 {
			if yyj3334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3334Slc = r.DecodeBytes(yys3334Slc, true, true)
		yys3334 := string(yys3334Slc)
		switch yys3334 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3337 := &x.ListMeta
				yym3338 := z.DecBinary()
				_ = yym3338
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3337) {
				} else {
					z.DecFallback(yyv3337, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3339 := &x.Items
				yym3340 := z.DecBinary()
				_ = yym3340
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3339), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3334)
		} // end switch yys3334
	} // end for yyj3334
	if !yyhl3334 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3341 int
	var yyb3341 bool
	var yyhl3341 bool = l >= 0
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3344 := &x.ListMeta
		yym3345 := z.DecBinary()
		_ = yym3345
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3344) {
		} else {
			z.DecFallback(yyv3344, false)
		}
	}
	yyj3341++
	if yyhl3341 {
		yyb3341 = yyj3341 > l
	} else {
		yyb3341 = r.CheckBreak()
	}
	if yyb3341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3346 := &x.Items
		yym3347 := z.DecBinary()
		_ = yym3347
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3346), d)
		}
	}
	for {
		yyj3341++
		if yyhl3341 {
			yyb3341 = yyj3341 > l
		} else {
			yyb3341 = r.CheckBreak()
		}
		if yyb3341 {
			break
		}
		z.DecStructFieldNotFound(yyj3341-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3348 := z.EncBinary()
		_ = yym3348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3349 := !z.EncBinary()
			yy2arr3349 := z.EncBasicHandle().StructToArray
			var yyq3349 [5]bool
			_, _, _ = yysep3349, yyq3349, yy2arr3349
			const yyr3349 bool = false
			yyq3349[0] = x.Capabilities != nil
			yyq3349[1] = x.Privileged != nil
			yyq3349[2] = x.SELinuxOptions != nil
			yyq3349[3] = x.RunAsUser != nil
			if yyr3349 || yy2arr3349 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3349 int = 1
				for _, b := range yyq3349 {
					if b {
						yynn3349++
					}
				}
				r.EncodeMapStart(yynn3349)
			}
			if yyr3349 || yy2arr3349 {
				if yyq3349[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3349[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				if yyq3349[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3352 := *x.Privileged
						yym3353 := z.EncBinary()
						_ = yym3353
						if false {
						} else {
							r.EncodeBool(bool(yy3352))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3349[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3354 := *x.Privileged
						yym3355 := z.EncBinary()
						_ = yym3355
						if false {
						} else {
							r.EncodeBool(bool(yy3354))
						}
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				if yyq3349[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3349[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				if yyq3349[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3358 := *x.RunAsUser
						yym3359 := z.EncBinary()
						_ = yym3359
						if false {
						} else {
							r.EncodeInt(int64(yy3358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3349[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3360 := *x.RunAsUser
						yym3361 := z.EncBinary()
						_ = yym3361
						if false {
						} else {
							r.EncodeInt(int64(yy3360))
						}
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				yym3363 := z.EncBinary()
				_ = yym3363
				if false {
				} else {
					r.EncodeBool(bool(x.RunAsNonRoot))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("RunAsNonRoot"))
				yym3364 := z.EncBinary()
				_ = yym3364
				if false {
				} else {
					r.EncodeBool(bool(x.RunAsNonRoot))
				}
			}
			if yysep3349 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3365 := z.DecBinary()
	_ = yym3365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3366 := r.ReadMapStart()
			if yyl3366 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3366, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3366 := r.ReadArrayStart()
			if yyl3366 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3366, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3367Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3367Slc
	var yyhl3367 bool = l >= 0
	for yyj3367 := 0; ; yyj3367++ {
		if yyhl3367 {
			if yyj3367 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3367Slc = r.DecodeBytes(yys3367Slc, true, true)
		yys3367 := string(yys3367Slc)
		switch yys3367 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3370 := z.DecBinary()
				_ = yym3370
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3373 := z.DecBinary()
				_ = yym3373
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "RunAsNonRoot":
			if r.TryDecodeAsNil() {
				x.RunAsNonRoot = false
			} else {
				x.RunAsNonRoot = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3367)
		} // end switch yys3367
	} // end for yyj3367
	if !yyhl3367 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3375 int
	var yyb3375 bool
	var yyhl3375 bool = l >= 0
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3378 := z.DecBinary()
		_ = yym3378
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3381 := z.DecBinary()
		_ = yym3381
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3375++
	if yyhl3375 {
		yyb3375 = yyj3375 > l
	} else {
		yyb3375 = r.CheckBreak()
	}
	if yyb3375 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RunAsNonRoot = false
	} else {
		x.RunAsNonRoot = bool(r.DecodeBool())
	}
	for {
		yyj3375++
		if yyhl3375 {
			yyb3375 = yyj3375 > l
		} else {
			yyb3375 = r.CheckBreak()
		}
		if yyb3375 {
			break
		}
		z.DecStructFieldNotFound(yyj3375-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3383 := z.EncBinary()
		_ = yym3383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3384 := !z.EncBinary()
			yy2arr3384 := z.EncBasicHandle().StructToArray
			var yyq3384 [4]bool
			_, _, _ = yysep3384, yyq3384, yy2arr3384
			const yyr3384 bool = false
			yyq3384[0] = x.User != ""
			yyq3384[1] = x.Role != ""
			yyq3384[2] = x.Type != ""
			yyq3384[3] = x.Level != ""
			if yyr3384 || yy2arr3384 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3384 int = 0
				for _, b := range yyq3384 {
					if b {
						yynn3384++
					}
				}
				r.EncodeMapStart(yynn3384)
			}
			if yyr3384 || yy2arr3384 {
				if yyq3384[0] {
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				if yyq3384[1] {
					yym3389 := z.EncBinary()
					_ = yym3389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3390 := z.EncBinary()
					_ = yym3390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				if yyq3384[2] {
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3384 || yy2arr3384 {
				if yyq3384[3] {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3384[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3384 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3397 := z.DecBinary()
	_ = yym3397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3398 := r.ReadMapStart()
			if yyl3398 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3398, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3398 := r.ReadArrayStart()
			if yyl3398 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3399Slc
	var yyhl3399 bool = l >= 0
	for yyj3399 := 0; ; yyj3399++ {
		if yyhl3399 {
			if yyj3399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3399Slc = r.DecodeBytes(yys3399Slc, true, true)
		yys3399 := string(yys3399Slc)
		switch yys3399 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3399)
		} // end switch yys3399
	} // end for yyj3399
	if !yyhl3399 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3404 int
	var yyb3404 bool
	var yyhl3404 bool = l >= 0
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3404++
	if yyhl3404 {
		yyb3404 = yyj3404 > l
	} else {
		yyb3404 = r.CheckBreak()
	}
	if yyb3404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3404++
		if yyhl3404 {
			yyb3404 = yyj3404 > l
		} else {
			yyb3404 = r.CheckBreak()
		}
		if yyb3404 {
			break
		}
		z.DecStructFieldNotFound(yyj3404-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3409 := z.EncBinary()
		_ = yym3409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3410 := !z.EncBinary()
			yy2arr3410 := z.EncBasicHandle().StructToArray
			var yyq3410 [5]bool
			_, _, _ = yysep3410, yyq3410, yy2arr3410
			const yyr3410 bool = false
			yyq3410[0] = x.Kind != ""
			yyq3410[1] = x.APIVersion != ""
			yyq3410[2] = true
			if yyr3410 || yy2arr3410 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3410 int = 2
				for _, b := range yyq3410 {
					if b {
						yynn3410++
					}
				}
				r.EncodeMapStart(yynn3410)
			}
			if yyr3410 || yy2arr3410 {
				if yyq3410[0] {
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3410[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3413 := z.EncBinary()
					_ = yym3413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3410 || yy2arr3410 {
				if yyq3410[1] {
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3410[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3410 || yy2arr3410 {
				if yyq3410[2] {
					yy3418 := &x.ObjectMeta
					yy3418.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3410[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3419 := &x.ObjectMeta
					yy3419.CodecEncodeSelf(e)
				}
			}
			if yyr3410 || yy2arr3410 {
				yym3421 := z.EncBinary()
				_ = yym3421
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3422 := z.EncBinary()
				_ = yym3422
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3410 || yy2arr3410 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3410 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3426 := z.DecBinary()
	_ = yym3426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3427 := r.ReadMapStart()
			if yyl3427 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3427, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3427 := r.ReadArrayStart()
			if yyl3427 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3428Slc
	var yyhl3428 bool = l >= 0
	for yyj3428 := 0; ; yyj3428++ {
		if yyhl3428 {
			if yyj3428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3428Slc = r.DecodeBytes(yys3428Slc, true, true)
		yys3428 := string(yys3428Slc)
		switch yys3428 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3431 := &x.ObjectMeta
				yyv3431.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3433 := &x.Data
				yym3434 := z.DecBinary()
				_ = yym3434
				if false {
				} else {
					*yyv3433 = r.DecodeBytes(*(*[]byte)(yyv3433), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3428)
		} // end switch yys3428
	} // end for yyj3428
	if !yyhl3428 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3435 int
	var yyb3435 bool
	var yyhl3435 bool = l >= 0
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3438 := &x.ObjectMeta
		yyv3438.CodecDecodeSelf(d)
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3435++
	if yyhl3435 {
		yyb3435 = yyj3435 > l
	} else {
		yyb3435 = r.CheckBreak()
	}
	if yyb3435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3440 := &x.Data
		yym3441 := z.DecBinary()
		_ = yym3441
		if false {
		} else {
			*yyv3440 = r.DecodeBytes(*(*[]byte)(yyv3440), false, false)
		}
	}
	for {
		yyj3435++
		if yyhl3435 {
			yyb3435 = yyj3435 > l
		} else {
			yyb3435 = r.CheckBreak()
		}
		if yyb3435 {
			break
		}
		z.DecStructFieldNotFound(yyj3435-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3442 := range v {
		yyv3442.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3443 := *v
	yyh3443, yyl3443 := z.DecSliceHelperStart()

	var yyrr3443, yyrl3443 int
	var yyc3443, yyrt3443 bool
	_, _, _ = yyc3443, yyrt3443, yyrl3443
	yyrr3443 = yyl3443

	if yyv3443 == nil {
		if yyrl3443, yyrt3443 = z.DecInferLen(yyl3443, z.DecBasicHandle().MaxInitLen, 16); yyrt3443 {
			yyrr3443 = yyrl3443
		}
		yyv3443 = make([]PersistentVolumeAccessMode, yyrl3443)
		yyc3443 = true
	}

	if yyl3443 == 0 {
		if len(yyv3443) != 0 {
			yyv3443 = yyv3443[:0]
			yyc3443 = true
		}
	} else if yyl3443 > 0 {

		if yyl3443 > cap(yyv3443) {
			yyrl3443, yyrt3443 = z.DecInferLen(yyl3443, z.DecBasicHandle().MaxInitLen, 16)

			yyv23443 := yyv3443
			yyv3443 = make([]PersistentVolumeAccessMode, yyrl3443)
			if len(yyv3443) > 0 {
				copy(yyv3443, yyv23443[:cap(yyv23443)])
			}
			yyc3443 = true

			yyrr3443 = len(yyv3443)
		} else if yyl3443 != len(yyv3443) {
			yyv3443 = yyv3443[:yyl3443]
			yyc3443 = true
		}
		yyj3443 := 0
		for ; yyj3443 < yyrr3443; yyj3443++ {
			if r.TryDecodeAsNil() {
				yyv3443[yyj3443] = ""
			} else {
				yyv3443[yyj3443] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3443 {
			for ; yyj3443 < yyl3443; yyj3443++ {
				yyv3443 = append(yyv3443, "")
				if r.TryDecodeAsNil() {
					yyv3443[yyj3443] = ""
				} else {
					yyv3443[yyj3443] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3443 := 0; !r.CheckBreak(); yyj3443++ {
			if yyj3443 >= len(yyv3443) {
				yyv3443 = append(yyv3443, "") // var yyz3443 PersistentVolumeAccessMode
				yyc3443 = true
			}

			if yyj3443 < len(yyv3443) {
				if r.TryDecodeAsNil() {
					yyv3443[yyj3443] = ""
				} else {
					yyv3443[yyj3443] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3443.End()
	}
	if yyc3443 {
		*v = yyv3443
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3447 := range v {
		yy3448 := &yyv3447
		yy3448.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3449 := *v
	yyh3449, yyl3449 := z.DecSliceHelperStart()

	var yyrr3449, yyrl3449 int
	var yyc3449, yyrt3449 bool
	_, _, _ = yyc3449, yyrt3449, yyrl3449
	yyrr3449 = yyl3449

	if yyv3449 == nil {
		if yyrl3449, yyrt3449 = z.DecInferLen(yyl3449, z.DecBasicHandle().MaxInitLen, 384); yyrt3449 {
			yyrr3449 = yyrl3449
		}
		yyv3449 = make([]PersistentVolume, yyrl3449)
		yyc3449 = true
	}

	if yyl3449 == 0 {
		if len(yyv3449) != 0 {
			yyv3449 = yyv3449[:0]
			yyc3449 = true
		}
	} else if yyl3449 > 0 {

		if yyl3449 > cap(yyv3449) {
			yyrl3449, yyrt3449 = z.DecInferLen(yyl3449, z.DecBasicHandle().MaxInitLen, 384)
			yyv3449 = make([]PersistentVolume, yyrl3449)
			yyc3449 = true

			yyrr3449 = len(yyv3449)
		} else if yyl3449 != len(yyv3449) {
			yyv3449 = yyv3449[:yyl3449]
			yyc3449 = true
		}
		yyj3449 := 0
		for ; yyj3449 < yyrr3449; yyj3449++ {
			if r.TryDecodeAsNil() {
				yyv3449[yyj3449] = PersistentVolume{}
			} else {
				yyv3450 := &yyv3449[yyj3449]
				yyv3450.CodecDecodeSelf(d)
			}

		}
		if yyrt3449 {
			for ; yyj3449 < yyl3449; yyj3449++ {
				yyv3449 = append(yyv3449, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3449[yyj3449] = PersistentVolume{}
				} else {
					yyv3451 := &yyv3449[yyj3449]
					yyv3451.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3449 := 0; !r.CheckBreak(); yyj3449++ {
			if yyj3449 >= len(yyv3449) {
				yyv3449 = append(yyv3449, PersistentVolume{}) // var yyz3449 PersistentVolume
				yyc3449 = true
			}

			if yyj3449 < len(yyv3449) {
				if r.TryDecodeAsNil() {
					yyv3449[yyj3449] = PersistentVolume{}
				} else {
					yyv3452 := &yyv3449[yyj3449]
					yyv3452.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3449.End()
	}
	if yyc3449 {
		*v = yyv3449
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3453 := range v {
		yy3454 := &yyv3453
		yy3454.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3455 := *v
	yyh3455, yyl3455 := z.DecSliceHelperStart()

	var yyrr3455, yyrl3455 int
	var yyc3455, yyrt3455 bool
	_, _, _ = yyc3455, yyrt3455, yyrl3455
	yyrr3455 = yyl3455

	if yyv3455 == nil {
		if yyrl3455, yyrt3455 = z.DecInferLen(yyl3455, z.DecBasicHandle().MaxInitLen, 296); yyrt3455 {
			yyrr3455 = yyrl3455
		}
		yyv3455 = make([]PersistentVolumeClaim, yyrl3455)
		yyc3455 = true
	}

	if yyl3455 == 0 {
		if len(yyv3455) != 0 {
			yyv3455 = yyv3455[:0]
			yyc3455 = true
		}
	} else if yyl3455 > 0 {

		if yyl3455 > cap(yyv3455) {
			yyrl3455, yyrt3455 = z.DecInferLen(yyl3455, z.DecBasicHandle().MaxInitLen, 296)
			yyv3455 = make([]PersistentVolumeClaim, yyrl3455)
			yyc3455 = true

			yyrr3455 = len(yyv3455)
		} else if yyl3455 != len(yyv3455) {
			yyv3455 = yyv3455[:yyl3455]
			yyc3455 = true
		}
		yyj3455 := 0
		for ; yyj3455 < yyrr3455; yyj3455++ {
			if r.TryDecodeAsNil() {
				yyv3455[yyj3455] = PersistentVolumeClaim{}
			} else {
				yyv3456 := &yyv3455[yyj3455]
				yyv3456.CodecDecodeSelf(d)
			}

		}
		if yyrt3455 {
			for ; yyj3455 < yyl3455; yyj3455++ {
				yyv3455 = append(yyv3455, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3455[yyj3455] = PersistentVolumeClaim{}
				} else {
					yyv3457 := &yyv3455[yyj3455]
					yyv3457.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3455 := 0; !r.CheckBreak(); yyj3455++ {
			if yyj3455 >= len(yyv3455) {
				yyv3455 = append(yyv3455, PersistentVolumeClaim{}) // var yyz3455 PersistentVolumeClaim
				yyc3455 = true
			}

			if yyj3455 < len(yyv3455) {
				if r.TryDecodeAsNil() {
					yyv3455[yyj3455] = PersistentVolumeClaim{}
				} else {
					yyv3458 := &yyv3455[yyj3455]
					yyv3458.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3455.End()
	}
	if yyc3455 {
		*v = yyv3455
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3459 := range v {
		yy3460 := &yyv3459
		yy3460.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3461 := *v
	yyh3461, yyl3461 := z.DecSliceHelperStart()

	var yyrr3461, yyrl3461 int
	var yyc3461, yyrt3461 bool
	_, _, _ = yyc3461, yyrt3461, yyrl3461
	yyrr3461 = yyl3461

	if yyv3461 == nil {
		if yyrl3461, yyrt3461 = z.DecInferLen(yyl3461, z.DecBasicHandle().MaxInitLen, 48); yyrt3461 {
			yyrr3461 = yyrl3461
		}
		yyv3461 = make([]DownwardAPIVolumeFile, yyrl3461)
		yyc3461 = true
	}

	if yyl3461 == 0 {
		if len(yyv3461) != 0 {
			yyv3461 = yyv3461[:0]
			yyc3461 = true
		}
	} else if yyl3461 > 0 {

		if yyl3461 > cap(yyv3461) {
			yyrl3461, yyrt3461 = z.DecInferLen(yyl3461, z.DecBasicHandle().MaxInitLen, 48)
			yyv3461 = make([]DownwardAPIVolumeFile, yyrl3461)
			yyc3461 = true

			yyrr3461 = len(yyv3461)
		} else if yyl3461 != len(yyv3461) {
			yyv3461 = yyv3461[:yyl3461]
			yyc3461 = true
		}
		yyj3461 := 0
		for ; yyj3461 < yyrr3461; yyj3461++ {
			if r.TryDecodeAsNil() {
				yyv3461[yyj3461] = DownwardAPIVolumeFile{}
			} else {
				yyv3462 := &yyv3461[yyj3461]
				yyv3462.CodecDecodeSelf(d)
			}

		}
		if yyrt3461 {
			for ; yyj3461 < yyl3461; yyj3461++ {
				yyv3461 = append(yyv3461, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3461[yyj3461] = DownwardAPIVolumeFile{}
				} else {
					yyv3463 := &yyv3461[yyj3461]
					yyv3463.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3461 := 0; !r.CheckBreak(); yyj3461++ {
			if yyj3461 >= len(yyv3461) {
				yyv3461 = append(yyv3461, DownwardAPIVolumeFile{}) // var yyz3461 DownwardAPIVolumeFile
				yyc3461 = true
			}

			if yyj3461 < len(yyv3461) {
				if r.TryDecodeAsNil() {
					yyv3461[yyj3461] = DownwardAPIVolumeFile{}
				} else {
					yyv3464 := &yyv3461[yyj3461]
					yyv3464.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3461.End()
	}
	if yyc3461 {
		*v = yyv3461
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3465 := range v {
		yyv3465.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3466 := *v
	yyh3466, yyl3466 := z.DecSliceHelperStart()

	var yyrr3466, yyrl3466 int
	var yyc3466, yyrt3466 bool
	_, _, _ = yyc3466, yyrt3466, yyrl3466
	yyrr3466 = yyl3466

	if yyv3466 == nil {
		if yyrl3466, yyrt3466 = z.DecInferLen(yyl3466, z.DecBasicHandle().MaxInitLen, 16); yyrt3466 {
			yyrr3466 = yyrl3466
		}
		yyv3466 = make([]Capability, yyrl3466)
		yyc3466 = true
	}

	if yyl3466 == 0 {
		if len(yyv3466) != 0 {
			yyv3466 = yyv3466[:0]
			yyc3466 = true
		}
	} else if yyl3466 > 0 {

		if yyl3466 > cap(yyv3466) {
			yyrl3466, yyrt3466 = z.DecInferLen(yyl3466, z.DecBasicHandle().MaxInitLen, 16)

			yyv23466 := yyv3466
			yyv3466 = make([]Capability, yyrl3466)
			if len(yyv3466) > 0 {
				copy(yyv3466, yyv23466[:cap(yyv23466)])
			}
			yyc3466 = true

			yyrr3466 = len(yyv3466)
		} else if yyl3466 != len(yyv3466) {
			yyv3466 = yyv3466[:yyl3466]
			yyc3466 = true
		}
		yyj3466 := 0
		for ; yyj3466 < yyrr3466; yyj3466++ {
			if r.TryDecodeAsNil() {
				yyv3466[yyj3466] = ""
			} else {
				yyv3466[yyj3466] = Capability(r.DecodeString())
			}

		}
		if yyrt3466 {
			for ; yyj3466 < yyl3466; yyj3466++ {
				yyv3466 = append(yyv3466, "")
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = ""
				} else {
					yyv3466[yyj3466] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3466 := 0; !r.CheckBreak(); yyj3466++ {
			if yyj3466 >= len(yyv3466) {
				yyv3466 = append(yyv3466, "") // var yyz3466 Capability
				yyc3466 = true
			}

			if yyj3466 < len(yyv3466) {
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = ""
				} else {
					yyv3466[yyj3466] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3466.End()
	}
	if yyc3466 {
		*v = yyv3466
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3470 := range v {
		yy3471 := &yyv3470
		yy3471.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3472 := *v
	yyh3472, yyl3472 := z.DecSliceHelperStart()

	var yyrr3472, yyrl3472 int
	var yyc3472, yyrt3472 bool
	_, _, _ = yyc3472, yyrt3472, yyrl3472
	yyrr3472 = yyl3472

	if yyv3472 == nil {
		if yyrl3472, yyrt3472 = z.DecInferLen(yyl3472, z.DecBasicHandle().MaxInitLen, 64); yyrt3472 {
			yyrr3472 = yyrl3472
		}
		yyv3472 = make([]ContainerPort, yyrl3472)
		yyc3472 = true
	}

	if yyl3472 == 0 {
		if len(yyv3472) != 0 {
			yyv3472 = yyv3472[:0]
			yyc3472 = true
		}
	} else if yyl3472 > 0 {

		if yyl3472 > cap(yyv3472) {
			yyrl3472, yyrt3472 = z.DecInferLen(yyl3472, z.DecBasicHandle().MaxInitLen, 64)
			yyv3472 = make([]ContainerPort, yyrl3472)
			yyc3472 = true

			yyrr3472 = len(yyv3472)
		} else if yyl3472 != len(yyv3472) {
			yyv3472 = yyv3472[:yyl3472]
			yyc3472 = true
		}
		yyj3472 := 0
		for ; yyj3472 < yyrr3472; yyj3472++ {
			if r.TryDecodeAsNil() {
				yyv3472[yyj3472] = ContainerPort{}
			} else {
				yyv3473 := &yyv3472[yyj3472]
				yyv3473.CodecDecodeSelf(d)
			}

		}
		if yyrt3472 {
			for ; yyj3472 < yyl3472; yyj3472++ {
				yyv3472 = append(yyv3472, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = ContainerPort{}
				} else {
					yyv3474 := &yyv3472[yyj3472]
					yyv3474.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3472 := 0; !r.CheckBreak(); yyj3472++ {
			if yyj3472 >= len(yyv3472) {
				yyv3472 = append(yyv3472, ContainerPort{}) // var yyz3472 ContainerPort
				yyc3472 = true
			}

			if yyj3472 < len(yyv3472) {
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = ContainerPort{}
				} else {
					yyv3475 := &yyv3472[yyj3472]
					yyv3475.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3472.End()
	}
	if yyc3472 {
		*v = yyv3472
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3476 := range v {
		yy3477 := &yyv3476
		yy3477.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3478 := *v
	yyh3478, yyl3478 := z.DecSliceHelperStart()

	var yyrr3478, yyrl3478 int
	var yyc3478, yyrt3478 bool
	_, _, _ = yyc3478, yyrt3478, yyrl3478
	yyrr3478 = yyl3478

	if yyv3478 == nil {
		if yyrl3478, yyrt3478 = z.DecInferLen(yyl3478, z.DecBasicHandle().MaxInitLen, 40); yyrt3478 {
			yyrr3478 = yyrl3478
		}
		yyv3478 = make([]EnvVar, yyrl3478)
		yyc3478 = true
	}

	if yyl3478 == 0 {
		if len(yyv3478) != 0 {
			yyv3478 = yyv3478[:0]
			yyc3478 = true
		}
	} else if yyl3478 > 0 {

		if yyl3478 > cap(yyv3478) {
			yyrl3478, yyrt3478 = z.DecInferLen(yyl3478, z.DecBasicHandle().MaxInitLen, 40)
			yyv3478 = make([]EnvVar, yyrl3478)
			yyc3478 = true

			yyrr3478 = len(yyv3478)
		} else if yyl3478 != len(yyv3478) {
			yyv3478 = yyv3478[:yyl3478]
			yyc3478 = true
		}
		yyj3478 := 0
		for ; yyj3478 < yyrr3478; yyj3478++ {
			if r.TryDecodeAsNil() {
				yyv3478[yyj3478] = EnvVar{}
			} else {
				yyv3479 := &yyv3478[yyj3478]
				yyv3479.CodecDecodeSelf(d)
			}

		}
		if yyrt3478 {
			for ; yyj3478 < yyl3478; yyj3478++ {
				yyv3478 = append(yyv3478, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = EnvVar{}
				} else {
					yyv3480 := &yyv3478[yyj3478]
					yyv3480.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3478 := 0; !r.CheckBreak(); yyj3478++ {
			if yyj3478 >= len(yyv3478) {
				yyv3478 = append(yyv3478, EnvVar{}) // var yyz3478 EnvVar
				yyc3478 = true
			}

			if yyj3478 < len(yyv3478) {
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = EnvVar{}
				} else {
					yyv3481 := &yyv3478[yyj3478]
					yyv3481.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3478.End()
	}
	if yyc3478 {
		*v = yyv3478
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3482 := range v {
		yy3483 := &yyv3482
		yy3483.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3484 := *v
	yyh3484, yyl3484 := z.DecSliceHelperStart()

	var yyrr3484, yyrl3484 int
	var yyc3484, yyrt3484 bool
	_, _, _ = yyc3484, yyrt3484, yyrl3484
	yyrr3484 = yyl3484

	if yyv3484 == nil {
		if yyrl3484, yyrt3484 = z.DecInferLen(yyl3484, z.DecBasicHandle().MaxInitLen, 40); yyrt3484 {
			yyrr3484 = yyrl3484
		}
		yyv3484 = make([]VolumeMount, yyrl3484)
		yyc3484 = true
	}

	if yyl3484 == 0 {
		if len(yyv3484) != 0 {
			yyv3484 = yyv3484[:0]
			yyc3484 = true
		}
	} else if yyl3484 > 0 {

		if yyl3484 > cap(yyv3484) {
			yyrl3484, yyrt3484 = z.DecInferLen(yyl3484, z.DecBasicHandle().MaxInitLen, 40)
			yyv3484 = make([]VolumeMount, yyrl3484)
			yyc3484 = true

			yyrr3484 = len(yyv3484)
		} else if yyl3484 != len(yyv3484) {
			yyv3484 = yyv3484[:yyl3484]
			yyc3484 = true
		}
		yyj3484 := 0
		for ; yyj3484 < yyrr3484; yyj3484++ {
			if r.TryDecodeAsNil() {
				yyv3484[yyj3484] = VolumeMount{}
			} else {
				yyv3485 := &yyv3484[yyj3484]
				yyv3485.CodecDecodeSelf(d)
			}

		}
		if yyrt3484 {
			for ; yyj3484 < yyl3484; yyj3484++ {
				yyv3484 = append(yyv3484, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = VolumeMount{}
				} else {
					yyv3486 := &yyv3484[yyj3484]
					yyv3486.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3484 := 0; !r.CheckBreak(); yyj3484++ {
			if yyj3484 >= len(yyv3484) {
				yyv3484 = append(yyv3484, VolumeMount{}) // var yyz3484 VolumeMount
				yyc3484 = true
			}

			if yyj3484 < len(yyv3484) {
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = VolumeMount{}
				} else {
					yyv3487 := &yyv3484[yyj3484]
					yyv3487.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3484.End()
	}
	if yyc3484 {
		*v = yyv3484
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3488 := range v {
		yy3489 := &yyv3488
		yy3489.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3490 := *v
	yyh3490, yyl3490 := z.DecSliceHelperStart()

	var yyrr3490, yyrl3490 int
	var yyc3490, yyrt3490 bool
	_, _, _ = yyc3490, yyrt3490, yyrl3490
	yyrr3490 = yyl3490

	if yyv3490 == nil {
		if yyrl3490, yyrt3490 = z.DecInferLen(yyl3490, z.DecBasicHandle().MaxInitLen, 496); yyrt3490 {
			yyrr3490 = yyrl3490
		}
		yyv3490 = make([]Pod, yyrl3490)
		yyc3490 = true
	}

	if yyl3490 == 0 {
		if len(yyv3490) != 0 {
			yyv3490 = yyv3490[:0]
			yyc3490 = true
		}
	} else if yyl3490 > 0 {

		if yyl3490 > cap(yyv3490) {
			yyrl3490, yyrt3490 = z.DecInferLen(yyl3490, z.DecBasicHandle().MaxInitLen, 496)
			yyv3490 = make([]Pod, yyrl3490)
			yyc3490 = true

			yyrr3490 = len(yyv3490)
		} else if yyl3490 != len(yyv3490) {
			yyv3490 = yyv3490[:yyl3490]
			yyc3490 = true
		}
		yyj3490 := 0
		for ; yyj3490 < yyrr3490; yyj3490++ {
			if r.TryDecodeAsNil() {
				yyv3490[yyj3490] = Pod{}
			} else {
				yyv3491 := &yyv3490[yyj3490]
				yyv3491.CodecDecodeSelf(d)
			}

		}
		if yyrt3490 {
			for ; yyj3490 < yyl3490; yyj3490++ {
				yyv3490 = append(yyv3490, Pod{})
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = Pod{}
				} else {
					yyv3492 := &yyv3490[yyj3490]
					yyv3492.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3490 := 0; !r.CheckBreak(); yyj3490++ {
			if yyj3490 >= len(yyv3490) {
				yyv3490 = append(yyv3490, Pod{}) // var yyz3490 Pod
				yyc3490 = true
			}

			if yyj3490 < len(yyv3490) {
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = Pod{}
				} else {
					yyv3493 := &yyv3490[yyj3490]
					yyv3493.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3490.End()
	}
	if yyc3490 {
		*v = yyv3490
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3494 := range v {
		yy3495 := &yyv3494
		yy3495.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3496 := *v
	yyh3496, yyl3496 := z.DecSliceHelperStart()

	var yyrr3496, yyrl3496 int
	var yyc3496, yyrt3496 bool
	_, _, _ = yyc3496, yyrt3496, yyrl3496
	yyrr3496 = yyl3496

	if yyv3496 == nil {
		if yyrl3496, yyrt3496 = z.DecInferLen(yyl3496, z.DecBasicHandle().MaxInitLen, 144); yyrt3496 {
			yyrr3496 = yyrl3496
		}
		yyv3496 = make([]Volume, yyrl3496)
		yyc3496 = true
	}

	if yyl3496 == 0 {
		if len(yyv3496) != 0 {
			yyv3496 = yyv3496[:0]
			yyc3496 = true
		}
	} else if yyl3496 > 0 {

		if yyl3496 > cap(yyv3496) {
			yyrl3496, yyrt3496 = z.DecInferLen(yyl3496, z.DecBasicHandle().MaxInitLen, 144)
			yyv3496 = make([]Volume, yyrl3496)
			yyc3496 = true

			yyrr3496 = len(yyv3496)
		} else if yyl3496 != len(yyv3496) {
			yyv3496 = yyv3496[:yyl3496]
			yyc3496 = true
		}
		yyj3496 := 0
		for ; yyj3496 < yyrr3496; yyj3496++ {
			if r.TryDecodeAsNil() {
				yyv3496[yyj3496] = Volume{}
			} else {
				yyv3497 := &yyv3496[yyj3496]
				yyv3497.CodecDecodeSelf(d)
			}

		}
		if yyrt3496 {
			for ; yyj3496 < yyl3496; yyj3496++ {
				yyv3496 = append(yyv3496, Volume{})
				if r.TryDecodeAsNil() {
					yyv3496[yyj3496] = Volume{}
				} else {
					yyv3498 := &yyv3496[yyj3496]
					yyv3498.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3496 := 0; !r.CheckBreak(); yyj3496++ {
			if yyj3496 >= len(yyv3496) {
				yyv3496 = append(yyv3496, Volume{}) // var yyz3496 Volume
				yyc3496 = true
			}

			if yyj3496 < len(yyv3496) {
				if r.TryDecodeAsNil() {
					yyv3496[yyj3496] = Volume{}
				} else {
					yyv3499 := &yyv3496[yyj3496]
					yyv3499.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3496.End()
	}
	if yyc3496 {
		*v = yyv3496
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3500 := range v {
		yy3501 := &yyv3500
		yy3501.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3502 := *v
	yyh3502, yyl3502 := z.DecSliceHelperStart()

	var yyrr3502, yyrl3502 int
	var yyc3502, yyrt3502 bool
	_, _, _ = yyc3502, yyrt3502, yyrl3502
	yyrr3502 = yyl3502

	if yyv3502 == nil {
		if yyrl3502, yyrt3502 = z.DecInferLen(yyl3502, z.DecBasicHandle().MaxInitLen, 256); yyrt3502 {
			yyrr3502 = yyrl3502
		}
		yyv3502 = make([]Container, yyrl3502)
		yyc3502 = true
	}

	if yyl3502 == 0 {
		if len(yyv3502) != 0 {
			yyv3502 = yyv3502[:0]
			yyc3502 = true
		}
	} else if yyl3502 > 0 {

		if yyl3502 > cap(yyv3502) {
			yyrl3502, yyrt3502 = z.DecInferLen(yyl3502, z.DecBasicHandle().MaxInitLen, 256)
			yyv3502 = make([]Container, yyrl3502)
			yyc3502 = true

			yyrr3502 = len(yyv3502)
		} else if yyl3502 != len(yyv3502) {
			yyv3502 = yyv3502[:yyl3502]
			yyc3502 = true
		}
		yyj3502 := 0
		for ; yyj3502 < yyrr3502; yyj3502++ {
			if r.TryDecodeAsNil() {
				yyv3502[yyj3502] = Container{}
			} else {
				yyv3503 := &yyv3502[yyj3502]
				yyv3503.CodecDecodeSelf(d)
			}

		}
		if yyrt3502 {
			for ; yyj3502 < yyl3502; yyj3502++ {
				yyv3502 = append(yyv3502, Container{})
				if r.TryDecodeAsNil() {
					yyv3502[yyj3502] = Container{}
				} else {
					yyv3504 := &yyv3502[yyj3502]
					yyv3504.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3502 := 0; !r.CheckBreak(); yyj3502++ {
			if yyj3502 >= len(yyv3502) {
				yyv3502 = append(yyv3502, Container{}) // var yyz3502 Container
				yyc3502 = true
			}

			if yyj3502 < len(yyv3502) {
				if r.TryDecodeAsNil() {
					yyv3502[yyj3502] = Container{}
				} else {
					yyv3505 := &yyv3502[yyj3502]
					yyv3505.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3502.End()
	}
	if yyc3502 {
		*v = yyv3502
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3506 := range v {
		yy3507 := &yyv3506
		yy3507.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3508 := *v
	yyh3508, yyl3508 := z.DecSliceHelperStart()

	var yyrr3508, yyrl3508 int
	var yyc3508, yyrt3508 bool
	_, _, _ = yyc3508, yyrt3508, yyrl3508
	yyrr3508 = yyl3508

	if yyv3508 == nil {
		if yyrl3508, yyrt3508 = z.DecInferLen(yyl3508, z.DecBasicHandle().MaxInitLen, 16); yyrt3508 {
			yyrr3508 = yyrl3508
		}
		yyv3508 = make([]LocalObjectReference, yyrl3508)
		yyc3508 = true
	}

	if yyl3508 == 0 {
		if len(yyv3508) != 0 {
			yyv3508 = yyv3508[:0]
			yyc3508 = true
		}
	} else if yyl3508 > 0 {

		if yyl3508 > cap(yyv3508) {
			yyrl3508, yyrt3508 = z.DecInferLen(yyl3508, z.DecBasicHandle().MaxInitLen, 16)
			yyv3508 = make([]LocalObjectReference, yyrl3508)
			yyc3508 = true

			yyrr3508 = len(yyv3508)
		} else if yyl3508 != len(yyv3508) {
			yyv3508 = yyv3508[:yyl3508]
			yyc3508 = true
		}
		yyj3508 := 0
		for ; yyj3508 < yyrr3508; yyj3508++ {
			if r.TryDecodeAsNil() {
				yyv3508[yyj3508] = LocalObjectReference{}
			} else {
				yyv3509 := &yyv3508[yyj3508]
				yyv3509.CodecDecodeSelf(d)
			}

		}
		if yyrt3508 {
			for ; yyj3508 < yyl3508; yyj3508++ {
				yyv3508 = append(yyv3508, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3508[yyj3508] = LocalObjectReference{}
				} else {
					yyv3510 := &yyv3508[yyj3508]
					yyv3510.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3508 := 0; !r.CheckBreak(); yyj3508++ {
			if yyj3508 >= len(yyv3508) {
				yyv3508 = append(yyv3508, LocalObjectReference{}) // var yyz3508 LocalObjectReference
				yyc3508 = true
			}

			if yyj3508 < len(yyv3508) {
				if r.TryDecodeAsNil() {
					yyv3508[yyj3508] = LocalObjectReference{}
				} else {
					yyv3511 := &yyv3508[yyj3508]
					yyv3511.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3508.End()
	}
	if yyc3508 {
		*v = yyv3508
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3512 := range v {
		yy3513 := &yyv3512
		yy3513.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3514 := *v
	yyh3514, yyl3514 := z.DecSliceHelperStart()

	var yyrr3514, yyrl3514 int
	var yyc3514, yyrt3514 bool
	_, _, _ = yyc3514, yyrt3514, yyrl3514
	yyrr3514 = yyl3514

	if yyv3514 == nil {
		if yyrl3514, yyrt3514 = z.DecInferLen(yyl3514, z.DecBasicHandle().MaxInitLen, 112); yyrt3514 {
			yyrr3514 = yyrl3514
		}
		yyv3514 = make([]PodCondition, yyrl3514)
		yyc3514 = true
	}

	if yyl3514 == 0 {
		if len(yyv3514) != 0 {
			yyv3514 = yyv3514[:0]
			yyc3514 = true
		}
	} else if yyl3514 > 0 {

		if yyl3514 > cap(yyv3514) {
			yyrl3514, yyrt3514 = z.DecInferLen(yyl3514, z.DecBasicHandle().MaxInitLen, 112)
			yyv3514 = make([]PodCondition, yyrl3514)
			yyc3514 = true

			yyrr3514 = len(yyv3514)
		} else if yyl3514 != len(yyv3514) {
			yyv3514 = yyv3514[:yyl3514]
			yyc3514 = true
		}
		yyj3514 := 0
		for ; yyj3514 < yyrr3514; yyj3514++ {
			if r.TryDecodeAsNil() {
				yyv3514[yyj3514] = PodCondition{}
			} else {
				yyv3515 := &yyv3514[yyj3514]
				yyv3515.CodecDecodeSelf(d)
			}

		}
		if yyrt3514 {
			for ; yyj3514 < yyl3514; yyj3514++ {
				yyv3514 = append(yyv3514, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3514[yyj3514] = PodCondition{}
				} else {
					yyv3516 := &yyv3514[yyj3514]
					yyv3516.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3514 := 0; !r.CheckBreak(); yyj3514++ {
			if yyj3514 >= len(yyv3514) {
				yyv3514 = append(yyv3514, PodCondition{}) // var yyz3514 PodCondition
				yyc3514 = true
			}

			if yyj3514 < len(yyv3514) {
				if r.TryDecodeAsNil() {
					yyv3514[yyj3514] = PodCondition{}
				} else {
					yyv3517 := &yyv3514[yyj3514]
					yyv3517.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3514.End()
	}
	if yyc3514 {
		*v = yyv3514
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3518 := range v {
		yy3519 := &yyv3518
		yy3519.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3520 := *v
	yyh3520, yyl3520 := z.DecSliceHelperStart()

	var yyrr3520, yyrl3520 int
	var yyc3520, yyrt3520 bool
	_, _, _ = yyc3520, yyrt3520, yyrl3520
	yyrr3520 = yyl3520

	if yyv3520 == nil {
		if yyrl3520, yyrt3520 = z.DecInferLen(yyl3520, z.DecBasicHandle().MaxInitLen, 128); yyrt3520 {
			yyrr3520 = yyrl3520
		}
		yyv3520 = make([]ContainerStatus, yyrl3520)
		yyc3520 = true
	}

	if yyl3520 == 0 {
		if len(yyv3520) != 0 {
			yyv3520 = yyv3520[:0]
			yyc3520 = true
		}
	} else if yyl3520 > 0 {

		if yyl3520 > cap(yyv3520) {
			yyrl3520, yyrt3520 = z.DecInferLen(yyl3520, z.DecBasicHandle().MaxInitLen, 128)
			yyv3520 = make([]ContainerStatus, yyrl3520)
			yyc3520 = true

			yyrr3520 = len(yyv3520)
		} else if yyl3520 != len(yyv3520) {
			yyv3520 = yyv3520[:yyl3520]
			yyc3520 = true
		}
		yyj3520 := 0
		for ; yyj3520 < yyrr3520; yyj3520++ {
			if r.TryDecodeAsNil() {
				yyv3520[yyj3520] = ContainerStatus{}
			} else {
				yyv3521 := &yyv3520[yyj3520]
				yyv3521.CodecDecodeSelf(d)
			}

		}
		if yyrt3520 {
			for ; yyj3520 < yyl3520; yyj3520++ {
				yyv3520 = append(yyv3520, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3520[yyj3520] = ContainerStatus{}
				} else {
					yyv3522 := &yyv3520[yyj3520]
					yyv3522.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3520 := 0; !r.CheckBreak(); yyj3520++ {
			if yyj3520 >= len(yyv3520) {
				yyv3520 = append(yyv3520, ContainerStatus{}) // var yyz3520 ContainerStatus
				yyc3520 = true
			}

			if yyj3520 < len(yyv3520) {
				if r.TryDecodeAsNil() {
					yyv3520[yyj3520] = ContainerStatus{}
				} else {
					yyv3523 := &yyv3520[yyj3520]
					yyv3523.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3520.End()
	}
	if yyc3520 {
		*v = yyv3520
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3524 := range v {
		yy3525 := &yyv3524
		yy3525.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3526 := *v
	yyh3526, yyl3526 := z.DecSliceHelperStart()

	var yyrr3526, yyrl3526 int
	var yyc3526, yyrt3526 bool
	_, _, _ = yyc3526, yyrt3526, yyrl3526
	yyrr3526 = yyl3526

	if yyv3526 == nil {
		if yyrl3526, yyrt3526 = z.DecInferLen(yyl3526, z.DecBasicHandle().MaxInitLen, 520); yyrt3526 {
			yyrr3526 = yyrl3526
		}
		yyv3526 = make([]PodTemplate, yyrl3526)
		yyc3526 = true
	}

	if yyl3526 == 0 {
		if len(yyv3526) != 0 {
			yyv3526 = yyv3526[:0]
			yyc3526 = true
		}
	} else if yyl3526 > 0 {

		if yyl3526 > cap(yyv3526) {
			yyrl3526, yyrt3526 = z.DecInferLen(yyl3526, z.DecBasicHandle().MaxInitLen, 520)
			yyv3526 = make([]PodTemplate, yyrl3526)
			yyc3526 = true

			yyrr3526 = len(yyv3526)
		} else if yyl3526 != len(yyv3526) {
			yyv3526 = yyv3526[:yyl3526]
			yyc3526 = true
		}
		yyj3526 := 0
		for ; yyj3526 < yyrr3526; yyj3526++ {
			if r.TryDecodeAsNil() {
				yyv3526[yyj3526] = PodTemplate{}
			} else {
				yyv3527 := &yyv3526[yyj3526]
				yyv3527.CodecDecodeSelf(d)
			}

		}
		if yyrt3526 {
			for ; yyj3526 < yyl3526; yyj3526++ {
				yyv3526 = append(yyv3526, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = PodTemplate{}
				} else {
					yyv3528 := &yyv3526[yyj3526]
					yyv3528.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3526 := 0; !r.CheckBreak(); yyj3526++ {
			if yyj3526 >= len(yyv3526) {
				yyv3526 = append(yyv3526, PodTemplate{}) // var yyz3526 PodTemplate
				yyc3526 = true
			}

			if yyj3526 < len(yyv3526) {
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = PodTemplate{}
				} else {
					yyv3529 := &yyv3526[yyj3526]
					yyv3529.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3526.End()
	}
	if yyc3526 {
		*v = yyv3526
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3530 := range v {
		yy3531 := &yyv3530
		yy3531.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3532 := *v
	yyh3532, yyl3532 := z.DecSliceHelperStart()

	var yyrr3532, yyrl3532 int
	var yyc3532, yyrt3532 bool
	_, _, _ = yyc3532, yyrt3532, yyrl3532
	yyrr3532 = yyl3532

	if yyv3532 == nil {
		if yyrl3532, yyrt3532 = z.DecInferLen(yyl3532, z.DecBasicHandle().MaxInitLen, 232); yyrt3532 {
			yyrr3532 = yyrl3532
		}
		yyv3532 = make([]ReplicationController, yyrl3532)
		yyc3532 = true
	}

	if yyl3532 == 0 {
		if len(yyv3532) != 0 {
			yyv3532 = yyv3532[:0]
			yyc3532 = true
		}
	} else if yyl3532 > 0 {

		if yyl3532 > cap(yyv3532) {
			yyrl3532, yyrt3532 = z.DecInferLen(yyl3532, z.DecBasicHandle().MaxInitLen, 232)
			yyv3532 = make([]ReplicationController, yyrl3532)
			yyc3532 = true

			yyrr3532 = len(yyv3532)
		} else if yyl3532 != len(yyv3532) {
			yyv3532 = yyv3532[:yyl3532]
			yyc3532 = true
		}
		yyj3532 := 0
		for ; yyj3532 < yyrr3532; yyj3532++ {
			if r.TryDecodeAsNil() {
				yyv3532[yyj3532] = ReplicationController{}
			} else {
				yyv3533 := &yyv3532[yyj3532]
				yyv3533.CodecDecodeSelf(d)
			}

		}
		if yyrt3532 {
			for ; yyj3532 < yyl3532; yyj3532++ {
				yyv3532 = append(yyv3532, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = ReplicationController{}
				} else {
					yyv3534 := &yyv3532[yyj3532]
					yyv3534.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3532 := 0; !r.CheckBreak(); yyj3532++ {
			if yyj3532 >= len(yyv3532) {
				yyv3532 = append(yyv3532, ReplicationController{}) // var yyz3532 ReplicationController
				yyc3532 = true
			}

			if yyj3532 < len(yyv3532) {
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = ReplicationController{}
				} else {
					yyv3535 := &yyv3532[yyj3532]
					yyv3535.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3532.End()
	}
	if yyc3532 {
		*v = yyv3532
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3536 := range v {
		yy3537 := &yyv3536
		yy3537.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3538 := *v
	yyh3538, yyl3538 := z.DecSliceHelperStart()

	var yyrr3538, yyrl3538 int
	var yyc3538, yyrt3538 bool
	_, _, _ = yyc3538, yyrt3538, yyrl3538
	yyrr3538 = yyl3538

	if yyv3538 == nil {
		if yyrl3538, yyrt3538 = z.DecInferLen(yyl3538, z.DecBasicHandle().MaxInitLen, 336); yyrt3538 {
			yyrr3538 = yyrl3538
		}
		yyv3538 = make([]Service, yyrl3538)
		yyc3538 = true
	}

	if yyl3538 == 0 {
		if len(yyv3538) != 0 {
			yyv3538 = yyv3538[:0]
			yyc3538 = true
		}
	} else if yyl3538 > 0 {

		if yyl3538 > cap(yyv3538) {
			yyrl3538, yyrt3538 = z.DecInferLen(yyl3538, z.DecBasicHandle().MaxInitLen, 336)
			yyv3538 = make([]Service, yyrl3538)
			yyc3538 = true

			yyrr3538 = len(yyv3538)
		} else if yyl3538 != len(yyv3538) {
			yyv3538 = yyv3538[:yyl3538]
			yyc3538 = true
		}
		yyj3538 := 0
		for ; yyj3538 < yyrr3538; yyj3538++ {
			if r.TryDecodeAsNil() {
				yyv3538[yyj3538] = Service{}
			} else {
				yyv3539 := &yyv3538[yyj3538]
				yyv3539.CodecDecodeSelf(d)
			}

		}
		if yyrt3538 {
			for ; yyj3538 < yyl3538; yyj3538++ {
				yyv3538 = append(yyv3538, Service{})
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = Service{}
				} else {
					yyv3540 := &yyv3538[yyj3538]
					yyv3540.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3538 := 0; !r.CheckBreak(); yyj3538++ {
			if yyj3538 >= len(yyv3538) {
				yyv3538 = append(yyv3538, Service{}) // var yyz3538 Service
				yyc3538 = true
			}

			if yyj3538 < len(yyv3538) {
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = Service{}
				} else {
					yyv3541 := &yyv3538[yyj3538]
					yyv3541.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3538.End()
	}
	if yyc3538 {
		*v = yyv3538
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3542 := range v {
		yy3543 := &yyv3542
		yy3543.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3544 := *v
	yyh3544, yyl3544 := z.DecSliceHelperStart()

	var yyrr3544, yyrl3544 int
	var yyc3544, yyrt3544 bool
	_, _, _ = yyc3544, yyrt3544, yyrl3544
	yyrr3544 = yyl3544

	if yyv3544 == nil {
		if yyrl3544, yyrt3544 = z.DecInferLen(yyl3544, z.DecBasicHandle().MaxInitLen, 32); yyrt3544 {
			yyrr3544 = yyrl3544
		}
		yyv3544 = make([]LoadBalancerIngress, yyrl3544)
		yyc3544 = true
	}

	if yyl3544 == 0 {
		if len(yyv3544) != 0 {
			yyv3544 = yyv3544[:0]
			yyc3544 = true
		}
	} else if yyl3544 > 0 {

		if yyl3544 > cap(yyv3544) {
			yyrl3544, yyrt3544 = z.DecInferLen(yyl3544, z.DecBasicHandle().MaxInitLen, 32)
			yyv3544 = make([]LoadBalancerIngress, yyrl3544)
			yyc3544 = true

			yyrr3544 = len(yyv3544)
		} else if yyl3544 != len(yyv3544) {
			yyv3544 = yyv3544[:yyl3544]
			yyc3544 = true
		}
		yyj3544 := 0
		for ; yyj3544 < yyrr3544; yyj3544++ {
			if r.TryDecodeAsNil() {
				yyv3544[yyj3544] = LoadBalancerIngress{}
			} else {
				yyv3545 := &yyv3544[yyj3544]
				yyv3545.CodecDecodeSelf(d)
			}

		}
		if yyrt3544 {
			for ; yyj3544 < yyl3544; yyj3544++ {
				yyv3544 = append(yyv3544, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = LoadBalancerIngress{}
				} else {
					yyv3546 := &yyv3544[yyj3544]
					yyv3546.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3544 := 0; !r.CheckBreak(); yyj3544++ {
			if yyj3544 >= len(yyv3544) {
				yyv3544 = append(yyv3544, LoadBalancerIngress{}) // var yyz3544 LoadBalancerIngress
				yyc3544 = true
			}

			if yyj3544 < len(yyv3544) {
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = LoadBalancerIngress{}
				} else {
					yyv3547 := &yyv3544[yyj3544]
					yyv3547.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3544.End()
	}
	if yyc3544 {
		*v = yyv3544
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3548 := range v {
		yy3549 := &yyv3548
		yy3549.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3550 := *v
	yyh3550, yyl3550 := z.DecSliceHelperStart()

	var yyrr3550, yyrl3550 int
	var yyc3550, yyrt3550 bool
	_, _, _ = yyc3550, yyrt3550, yyrl3550
	yyrr3550 = yyl3550

	if yyv3550 == nil {
		if yyrl3550, yyrt3550 = z.DecInferLen(yyl3550, z.DecBasicHandle().MaxInitLen, 80); yyrt3550 {
			yyrr3550 = yyrl3550
		}
		yyv3550 = make([]ServicePort, yyrl3550)
		yyc3550 = true
	}

	if yyl3550 == 0 {
		if len(yyv3550) != 0 {
			yyv3550 = yyv3550[:0]
			yyc3550 = true
		}
	} else if yyl3550 > 0 {

		if yyl3550 > cap(yyv3550) {
			yyrl3550, yyrt3550 = z.DecInferLen(yyl3550, z.DecBasicHandle().MaxInitLen, 80)
			yyv3550 = make([]ServicePort, yyrl3550)
			yyc3550 = true

			yyrr3550 = len(yyv3550)
		} else if yyl3550 != len(yyv3550) {
			yyv3550 = yyv3550[:yyl3550]
			yyc3550 = true
		}
		yyj3550 := 0
		for ; yyj3550 < yyrr3550; yyj3550++ {
			if r.TryDecodeAsNil() {
				yyv3550[yyj3550] = ServicePort{}
			} else {
				yyv3551 := &yyv3550[yyj3550]
				yyv3551.CodecDecodeSelf(d)
			}

		}
		if yyrt3550 {
			for ; yyj3550 < yyl3550; yyj3550++ {
				yyv3550 = append(yyv3550, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = ServicePort{}
				} else {
					yyv3552 := &yyv3550[yyj3550]
					yyv3552.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3550 := 0; !r.CheckBreak(); yyj3550++ {
			if yyj3550 >= len(yyv3550) {
				yyv3550 = append(yyv3550, ServicePort{}) // var yyz3550 ServicePort
				yyc3550 = true
			}

			if yyj3550 < len(yyv3550) {
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = ServicePort{}
				} else {
					yyv3553 := &yyv3550[yyj3550]
					yyv3553.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3550.End()
	}
	if yyc3550 {
		*v = yyv3550
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3554 := range v {
		yy3555 := &yyv3554
		yy3555.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3556 := *v
	yyh3556, yyl3556 := z.DecSliceHelperStart()

	var yyrr3556, yyrl3556 int
	var yyc3556, yyrt3556 bool
	_, _, _ = yyc3556, yyrt3556, yyrl3556
	yyrr3556 = yyl3556

	if yyv3556 == nil {
		if yyrl3556, yyrt3556 = z.DecInferLen(yyl3556, z.DecBasicHandle().MaxInitLen, 112); yyrt3556 {
			yyrr3556 = yyrl3556
		}
		yyv3556 = make([]ObjectReference, yyrl3556)
		yyc3556 = true
	}

	if yyl3556 == 0 {
		if len(yyv3556) != 0 {
			yyv3556 = yyv3556[:0]
			yyc3556 = true
		}
	} else if yyl3556 > 0 {

		if yyl3556 > cap(yyv3556) {
			yyrl3556, yyrt3556 = z.DecInferLen(yyl3556, z.DecBasicHandle().MaxInitLen, 112)
			yyv3556 = make([]ObjectReference, yyrl3556)
			yyc3556 = true

			yyrr3556 = len(yyv3556)
		} else if yyl3556 != len(yyv3556) {
			yyv3556 = yyv3556[:yyl3556]
			yyc3556 = true
		}
		yyj3556 := 0
		for ; yyj3556 < yyrr3556; yyj3556++ {
			if r.TryDecodeAsNil() {
				yyv3556[yyj3556] = ObjectReference{}
			} else {
				yyv3557 := &yyv3556[yyj3556]
				yyv3557.CodecDecodeSelf(d)
			}

		}
		if yyrt3556 {
			for ; yyj3556 < yyl3556; yyj3556++ {
				yyv3556 = append(yyv3556, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = ObjectReference{}
				} else {
					yyv3558 := &yyv3556[yyj3556]
					yyv3558.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3556 := 0; !r.CheckBreak(); yyj3556++ {
			if yyj3556 >= len(yyv3556) {
				yyv3556 = append(yyv3556, ObjectReference{}) // var yyz3556 ObjectReference
				yyc3556 = true
			}

			if yyj3556 < len(yyv3556) {
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = ObjectReference{}
				} else {
					yyv3559 := &yyv3556[yyj3556]
					yyv3559.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3556.End()
	}
	if yyc3556 {
		*v = yyv3556
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3560 := range v {
		yy3561 := &yyv3560
		yy3561.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3562 := *v
	yyh3562, yyl3562 := z.DecSliceHelperStart()

	var yyrr3562, yyrl3562 int
	var yyc3562, yyrt3562 bool
	_, _, _ = yyc3562, yyrt3562, yyrl3562
	yyrr3562 = yyl3562

	if yyv3562 == nil {
		if yyrl3562, yyrt3562 = z.DecInferLen(yyl3562, z.DecBasicHandle().MaxInitLen, 240); yyrt3562 {
			yyrr3562 = yyrl3562
		}
		yyv3562 = make([]ServiceAccount, yyrl3562)
		yyc3562 = true
	}

	if yyl3562 == 0 {
		if len(yyv3562) != 0 {
			yyv3562 = yyv3562[:0]
			yyc3562 = true
		}
	} else if yyl3562 > 0 {

		if yyl3562 > cap(yyv3562) {
			yyrl3562, yyrt3562 = z.DecInferLen(yyl3562, z.DecBasicHandle().MaxInitLen, 240)
			yyv3562 = make([]ServiceAccount, yyrl3562)
			yyc3562 = true

			yyrr3562 = len(yyv3562)
		} else if yyl3562 != len(yyv3562) {
			yyv3562 = yyv3562[:yyl3562]
			yyc3562 = true
		}
		yyj3562 := 0
		for ; yyj3562 < yyrr3562; yyj3562++ {
			if r.TryDecodeAsNil() {
				yyv3562[yyj3562] = ServiceAccount{}
			} else {
				yyv3563 := &yyv3562[yyj3562]
				yyv3563.CodecDecodeSelf(d)
			}

		}
		if yyrt3562 {
			for ; yyj3562 < yyl3562; yyj3562++ {
				yyv3562 = append(yyv3562, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = ServiceAccount{}
				} else {
					yyv3564 := &yyv3562[yyj3562]
					yyv3564.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3562 := 0; !r.CheckBreak(); yyj3562++ {
			if yyj3562 >= len(yyv3562) {
				yyv3562 = append(yyv3562, ServiceAccount{}) // var yyz3562 ServiceAccount
				yyc3562 = true
			}

			if yyj3562 < len(yyv3562) {
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = ServiceAccount{}
				} else {
					yyv3565 := &yyv3562[yyj3562]
					yyv3565.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3562.End()
	}
	if yyc3562 {
		*v = yyv3562
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3566 := range v {
		yy3567 := &yyv3566
		yy3567.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3568 := *v
	yyh3568, yyl3568 := z.DecSliceHelperStart()

	var yyrr3568, yyrl3568 int
	var yyc3568, yyrt3568 bool
	_, _, _ = yyc3568, yyrt3568, yyrl3568
	yyrr3568 = yyl3568

	if yyv3568 == nil {
		if yyrl3568, yyrt3568 = z.DecInferLen(yyl3568, z.DecBasicHandle().MaxInitLen, 72); yyrt3568 {
			yyrr3568 = yyrl3568
		}
		yyv3568 = make([]EndpointSubset, yyrl3568)
		yyc3568 = true
	}

	if yyl3568 == 0 {
		if len(yyv3568) != 0 {
			yyv3568 = yyv3568[:0]
			yyc3568 = true
		}
	} else if yyl3568 > 0 {

		if yyl3568 > cap(yyv3568) {
			yyrl3568, yyrt3568 = z.DecInferLen(yyl3568, z.DecBasicHandle().MaxInitLen, 72)
			yyv3568 = make([]EndpointSubset, yyrl3568)
			yyc3568 = true

			yyrr3568 = len(yyv3568)
		} else if yyl3568 != len(yyv3568) {
			yyv3568 = yyv3568[:yyl3568]
			yyc3568 = true
		}
		yyj3568 := 0
		for ; yyj3568 < yyrr3568; yyj3568++ {
			if r.TryDecodeAsNil() {
				yyv3568[yyj3568] = EndpointSubset{}
			} else {
				yyv3569 := &yyv3568[yyj3568]
				yyv3569.CodecDecodeSelf(d)
			}

		}
		if yyrt3568 {
			for ; yyj3568 < yyl3568; yyj3568++ {
				yyv3568 = append(yyv3568, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3568[yyj3568] = EndpointSubset{}
				} else {
					yyv3570 := &yyv3568[yyj3568]
					yyv3570.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3568 := 0; !r.CheckBreak(); yyj3568++ {
			if yyj3568 >= len(yyv3568) {
				yyv3568 = append(yyv3568, EndpointSubset{}) // var yyz3568 EndpointSubset
				yyc3568 = true
			}

			if yyj3568 < len(yyv3568) {
				if r.TryDecodeAsNil() {
					yyv3568[yyj3568] = EndpointSubset{}
				} else {
					yyv3571 := &yyv3568[yyj3568]
					yyv3571.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3568.End()
	}
	if yyc3568 {
		*v = yyv3568
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3572 := range v {
		yy3573 := &yyv3572
		yy3573.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3574 := *v
	yyh3574, yyl3574 := z.DecSliceHelperStart()

	var yyrr3574, yyrl3574 int
	var yyc3574, yyrt3574 bool
	_, _, _ = yyc3574, yyrt3574, yyrl3574
	yyrr3574 = yyl3574

	if yyv3574 == nil {
		if yyrl3574, yyrt3574 = z.DecInferLen(yyl3574, z.DecBasicHandle().MaxInitLen, 24); yyrt3574 {
			yyrr3574 = yyrl3574
		}
		yyv3574 = make([]EndpointAddress, yyrl3574)
		yyc3574 = true
	}

	if yyl3574 == 0 {
		if len(yyv3574) != 0 {
			yyv3574 = yyv3574[:0]
			yyc3574 = true
		}
	} else if yyl3574 > 0 {

		if yyl3574 > cap(yyv3574) {
			yyrl3574, yyrt3574 = z.DecInferLen(yyl3574, z.DecBasicHandle().MaxInitLen, 24)
			yyv3574 = make([]EndpointAddress, yyrl3574)
			yyc3574 = true

			yyrr3574 = len(yyv3574)
		} else if yyl3574 != len(yyv3574) {
			yyv3574 = yyv3574[:yyl3574]
			yyc3574 = true
		}
		yyj3574 := 0
		for ; yyj3574 < yyrr3574; yyj3574++ {
			if r.TryDecodeAsNil() {
				yyv3574[yyj3574] = EndpointAddress{}
			} else {
				yyv3575 := &yyv3574[yyj3574]
				yyv3575.CodecDecodeSelf(d)
			}

		}
		if yyrt3574 {
			for ; yyj3574 < yyl3574; yyj3574++ {
				yyv3574 = append(yyv3574, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3574[yyj3574] = EndpointAddress{}
				} else {
					yyv3576 := &yyv3574[yyj3574]
					yyv3576.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3574 := 0; !r.CheckBreak(); yyj3574++ {
			if yyj3574 >= len(yyv3574) {
				yyv3574 = append(yyv3574, EndpointAddress{}) // var yyz3574 EndpointAddress
				yyc3574 = true
			}

			if yyj3574 < len(yyv3574) {
				if r.TryDecodeAsNil() {
					yyv3574[yyj3574] = EndpointAddress{}
				} else {
					yyv3577 := &yyv3574[yyj3574]
					yyv3577.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3574.End()
	}
	if yyc3574 {
		*v = yyv3574
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3578 := range v {
		yy3579 := &yyv3578
		yy3579.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3580 := *v
	yyh3580, yyl3580 := z.DecSliceHelperStart()

	var yyrr3580, yyrl3580 int
	var yyc3580, yyrt3580 bool
	_, _, _ = yyc3580, yyrt3580, yyrl3580
	yyrr3580 = yyl3580

	if yyv3580 == nil {
		if yyrl3580, yyrt3580 = z.DecInferLen(yyl3580, z.DecBasicHandle().MaxInitLen, 40); yyrt3580 {
			yyrr3580 = yyrl3580
		}
		yyv3580 = make([]EndpointPort, yyrl3580)
		yyc3580 = true
	}

	if yyl3580 == 0 {
		if len(yyv3580) != 0 {
			yyv3580 = yyv3580[:0]
			yyc3580 = true
		}
	} else if yyl3580 > 0 {

		if yyl3580 > cap(yyv3580) {
			yyrl3580, yyrt3580 = z.DecInferLen(yyl3580, z.DecBasicHandle().MaxInitLen, 40)
			yyv3580 = make([]EndpointPort, yyrl3580)
			yyc3580 = true

			yyrr3580 = len(yyv3580)
		} else if yyl3580 != len(yyv3580) {
			yyv3580 = yyv3580[:yyl3580]
			yyc3580 = true
		}
		yyj3580 := 0
		for ; yyj3580 < yyrr3580; yyj3580++ {
			if r.TryDecodeAsNil() {
				yyv3580[yyj3580] = EndpointPort{}
			} else {
				yyv3581 := &yyv3580[yyj3580]
				yyv3581.CodecDecodeSelf(d)
			}

		}
		if yyrt3580 {
			for ; yyj3580 < yyl3580; yyj3580++ {
				yyv3580 = append(yyv3580, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3580[yyj3580] = EndpointPort{}
				} else {
					yyv3582 := &yyv3580[yyj3580]
					yyv3582.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3580 := 0; !r.CheckBreak(); yyj3580++ {
			if yyj3580 >= len(yyv3580) {
				yyv3580 = append(yyv3580, EndpointPort{}) // var yyz3580 EndpointPort
				yyc3580 = true
			}

			if yyj3580 < len(yyv3580) {
				if r.TryDecodeAsNil() {
					yyv3580[yyj3580] = EndpointPort{}
				} else {
					yyv3583 := &yyv3580[yyj3580]
					yyv3583.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3580.End()
	}
	if yyc3580 {
		*v = yyv3580
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3584 := range v {
		yy3585 := &yyv3584
		yy3585.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3586 := *v
	yyh3586, yyl3586 := z.DecSliceHelperStart()

	var yyrr3586, yyrl3586 int
	var yyc3586, yyrt3586 bool
	_, _, _ = yyc3586, yyrt3586, yyrl3586
	yyrr3586 = yyl3586

	if yyv3586 == nil {
		if yyrl3586, yyrt3586 = z.DecInferLen(yyl3586, z.DecBasicHandle().MaxInitLen, 216); yyrt3586 {
			yyrr3586 = yyrl3586
		}
		yyv3586 = make([]Endpoints, yyrl3586)
		yyc3586 = true
	}

	if yyl3586 == 0 {
		if len(yyv3586) != 0 {
			yyv3586 = yyv3586[:0]
			yyc3586 = true
		}
	} else if yyl3586 > 0 {

		if yyl3586 > cap(yyv3586) {
			yyrl3586, yyrt3586 = z.DecInferLen(yyl3586, z.DecBasicHandle().MaxInitLen, 216)
			yyv3586 = make([]Endpoints, yyrl3586)
			yyc3586 = true

			yyrr3586 = len(yyv3586)
		} else if yyl3586 != len(yyv3586) {
			yyv3586 = yyv3586[:yyl3586]
			yyc3586 = true
		}
		yyj3586 := 0
		for ; yyj3586 < yyrr3586; yyj3586++ {
			if r.TryDecodeAsNil() {
				yyv3586[yyj3586] = Endpoints{}
			} else {
				yyv3587 := &yyv3586[yyj3586]
				yyv3587.CodecDecodeSelf(d)
			}

		}
		if yyrt3586 {
			for ; yyj3586 < yyl3586; yyj3586++ {
				yyv3586 = append(yyv3586, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3586[yyj3586] = Endpoints{}
				} else {
					yyv3588 := &yyv3586[yyj3586]
					yyv3588.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3586 := 0; !r.CheckBreak(); yyj3586++ {
			if yyj3586 >= len(yyv3586) {
				yyv3586 = append(yyv3586, Endpoints{}) // var yyz3586 Endpoints
				yyc3586 = true
			}

			if yyj3586 < len(yyv3586) {
				if r.TryDecodeAsNil() {
					yyv3586[yyj3586] = Endpoints{}
				} else {
					yyv3589 := &yyv3586[yyj3586]
					yyv3589.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3586.End()
	}
	if yyc3586 {
		*v = yyv3586
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3590 := range v {
		yy3591 := &yyv3590
		yy3591.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3592 := *v
	yyh3592, yyl3592 := z.DecSliceHelperStart()

	var yyrr3592, yyrl3592 int
	var yyc3592, yyrt3592 bool
	_, _, _ = yyc3592, yyrt3592, yyrl3592
	yyrr3592 = yyl3592

	if yyv3592 == nil {
		if yyrl3592, yyrt3592 = z.DecInferLen(yyl3592, z.DecBasicHandle().MaxInitLen, 112); yyrt3592 {
			yyrr3592 = yyrl3592
		}
		yyv3592 = make([]NodeCondition, yyrl3592)
		yyc3592 = true
	}

	if yyl3592 == 0 {
		if len(yyv3592) != 0 {
			yyv3592 = yyv3592[:0]
			yyc3592 = true
		}
	} else if yyl3592 > 0 {

		if yyl3592 > cap(yyv3592) {
			yyrl3592, yyrt3592 = z.DecInferLen(yyl3592, z.DecBasicHandle().MaxInitLen, 112)
			yyv3592 = make([]NodeCondition, yyrl3592)
			yyc3592 = true

			yyrr3592 = len(yyv3592)
		} else if yyl3592 != len(yyv3592) {
			yyv3592 = yyv3592[:yyl3592]
			yyc3592 = true
		}
		yyj3592 := 0
		for ; yyj3592 < yyrr3592; yyj3592++ {
			if r.TryDecodeAsNil() {
				yyv3592[yyj3592] = NodeCondition{}
			} else {
				yyv3593 := &yyv3592[yyj3592]
				yyv3593.CodecDecodeSelf(d)
			}

		}
		if yyrt3592 {
			for ; yyj3592 < yyl3592; yyj3592++ {
				yyv3592 = append(yyv3592, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3592[yyj3592] = NodeCondition{}
				} else {
					yyv3594 := &yyv3592[yyj3592]
					yyv3594.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3592 := 0; !r.CheckBreak(); yyj3592++ {
			if yyj3592 >= len(yyv3592) {
				yyv3592 = append(yyv3592, NodeCondition{}) // var yyz3592 NodeCondition
				yyc3592 = true
			}

			if yyj3592 < len(yyv3592) {
				if r.TryDecodeAsNil() {
					yyv3592[yyj3592] = NodeCondition{}
				} else {
					yyv3595 := &yyv3592[yyj3592]
					yyv3595.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3592.End()
	}
	if yyc3592 {
		*v = yyv3592
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3596 := range v {
		yy3597 := &yyv3596
		yy3597.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3598 := *v
	yyh3598, yyl3598 := z.DecSliceHelperStart()

	var yyrr3598, yyrl3598 int
	var yyc3598, yyrt3598 bool
	_, _, _ = yyc3598, yyrt3598, yyrl3598
	yyrr3598 = yyl3598

	if yyv3598 == nil {
		if yyrl3598, yyrt3598 = z.DecInferLen(yyl3598, z.DecBasicHandle().MaxInitLen, 32); yyrt3598 {
			yyrr3598 = yyrl3598
		}
		yyv3598 = make([]NodeAddress, yyrl3598)
		yyc3598 = true
	}

	if yyl3598 == 0 {
		if len(yyv3598) != 0 {
			yyv3598 = yyv3598[:0]
			yyc3598 = true
		}
	} else if yyl3598 > 0 {

		if yyl3598 > cap(yyv3598) {
			yyrl3598, yyrt3598 = z.DecInferLen(yyl3598, z.DecBasicHandle().MaxInitLen, 32)
			yyv3598 = make([]NodeAddress, yyrl3598)
			yyc3598 = true

			yyrr3598 = len(yyv3598)
		} else if yyl3598 != len(yyv3598) {
			yyv3598 = yyv3598[:yyl3598]
			yyc3598 = true
		}
		yyj3598 := 0
		for ; yyj3598 < yyrr3598; yyj3598++ {
			if r.TryDecodeAsNil() {
				yyv3598[yyj3598] = NodeAddress{}
			} else {
				yyv3599 := &yyv3598[yyj3598]
				yyv3599.CodecDecodeSelf(d)
			}

		}
		if yyrt3598 {
			for ; yyj3598 < yyl3598; yyj3598++ {
				yyv3598 = append(yyv3598, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3598[yyj3598] = NodeAddress{}
				} else {
					yyv3600 := &yyv3598[yyj3598]
					yyv3600.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3598 := 0; !r.CheckBreak(); yyj3598++ {
			if yyj3598 >= len(yyv3598) {
				yyv3598 = append(yyv3598, NodeAddress{}) // var yyz3598 NodeAddress
				yyc3598 = true
			}

			if yyj3598 < len(yyv3598) {
				if r.TryDecodeAsNil() {
					yyv3598[yyj3598] = NodeAddress{}
				} else {
					yyv3601 := &yyv3598[yyj3598]
					yyv3601.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3598.End()
	}
	if yyc3598 {
		*v = yyv3598
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3602, yyv3602 := range v {
		yyk3602.CodecEncodeSelf(e)
		yy3603 := &yyv3602
		yym3604 := z.EncBinary()
		_ = yym3604
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3603) {
		} else if !yym3604 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3603)
		} else {
			z.EncFallback(yy3603)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3605 := *v
	yyl3605 := r.ReadMapStart()
	yybh3605 := z.DecBasicHandle()
	if yyv3605 == nil {
		yyrl3605, _ := z.DecInferLen(yyl3605, yybh3605.MaxInitLen, 40)
		yyv3605 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3605)
		*v = yyv3605
	}
	var yymk3605 ResourceName
	var yymv3605 pkg3_resource.Quantity
	var yymg3605 bool
	if yybh3605.MapValueReset {
		yymg3605 = true
	}
	if yyl3605 > 0 {
		for yyj3605 := 0; yyj3605 < yyl3605; yyj3605++ {
			if r.TryDecodeAsNil() {
				yymk3605 = ""
			} else {
				yymk3605 = ResourceName(r.DecodeString())
			}

			if yymg3605 {
				yymv3605 = yyv3605[yymk3605]
			} else {
				yymv3605 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3605 = pkg3_resource.Quantity{}
			} else {
				yyv3607 := &yymv3605
				yym3608 := z.DecBinary()
				_ = yym3608
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3607) {
				} else if !yym3608 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3607)
				} else {
					z.DecFallback(yyv3607, false)
				}
			}

			if yyv3605 != nil {
				yyv3605[yymk3605] = yymv3605
			}
		}
	} else if yyl3605 < 0 {
		for yyj3605 := 0; !r.CheckBreak(); yyj3605++ {
			if r.TryDecodeAsNil() {
				yymk3605 = ""
			} else {
				yymk3605 = ResourceName(r.DecodeString())
			}

			if yymg3605 {
				yymv3605 = yyv3605[yymk3605]
			} else {
				yymv3605 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3605 = pkg3_resource.Quantity{}
			} else {
				yyv3610 := &yymv3605
				yym3611 := z.DecBinary()
				_ = yym3611
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3610) {
				} else if !yym3611 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3610)
				} else {
					z.DecFallback(yyv3610, false)
				}
			}

			if yyv3605 != nil {
				yyv3605[yymk3605] = yymv3605
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3612 := range v {
		yy3613 := &yyv3612
		yy3613.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3614 := *v
	yyh3614, yyl3614 := z.DecSliceHelperStart()

	var yyrr3614, yyrl3614 int
	var yyc3614, yyrt3614 bool
	_, _, _ = yyc3614, yyrt3614, yyrl3614
	yyrr3614 = yyl3614

	if yyv3614 == nil {
		if yyrl3614, yyrt3614 = z.DecInferLen(yyl3614, z.DecBasicHandle().MaxInitLen, 464); yyrt3614 {
			yyrr3614 = yyrl3614
		}
		yyv3614 = make([]Node, yyrl3614)
		yyc3614 = true
	}

	if yyl3614 == 0 {
		if len(yyv3614) != 0 {
			yyv3614 = yyv3614[:0]
			yyc3614 = true
		}
	} else if yyl3614 > 0 {

		if yyl3614 > cap(yyv3614) {
			yyrl3614, yyrt3614 = z.DecInferLen(yyl3614, z.DecBasicHandle().MaxInitLen, 464)
			yyv3614 = make([]Node, yyrl3614)
			yyc3614 = true

			yyrr3614 = len(yyv3614)
		} else if yyl3614 != len(yyv3614) {
			yyv3614 = yyv3614[:yyl3614]
			yyc3614 = true
		}
		yyj3614 := 0
		for ; yyj3614 < yyrr3614; yyj3614++ {
			if r.TryDecodeAsNil() {
				yyv3614[yyj3614] = Node{}
			} else {
				yyv3615 := &yyv3614[yyj3614]
				yyv3615.CodecDecodeSelf(d)
			}

		}
		if yyrt3614 {
			for ; yyj3614 < yyl3614; yyj3614++ {
				yyv3614 = append(yyv3614, Node{})
				if r.TryDecodeAsNil() {
					yyv3614[yyj3614] = Node{}
				} else {
					yyv3616 := &yyv3614[yyj3614]
					yyv3616.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3614 := 0; !r.CheckBreak(); yyj3614++ {
			if yyj3614 >= len(yyv3614) {
				yyv3614 = append(yyv3614, Node{}) // var yyz3614 Node
				yyc3614 = true
			}

			if yyj3614 < len(yyv3614) {
				if r.TryDecodeAsNil() {
					yyv3614[yyj3614] = Node{}
				} else {
					yyv3617 := &yyv3614[yyj3614]
					yyv3617.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3614.End()
	}
	if yyc3614 {
		*v = yyv3614
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3618 := range v {
		yyv3618.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3619 := *v
	yyh3619, yyl3619 := z.DecSliceHelperStart()

	var yyrr3619, yyrl3619 int
	var yyc3619, yyrt3619 bool
	_, _, _ = yyc3619, yyrt3619, yyrl3619
	yyrr3619 = yyl3619

	if yyv3619 == nil {
		if yyrl3619, yyrt3619 = z.DecInferLen(yyl3619, z.DecBasicHandle().MaxInitLen, 16); yyrt3619 {
			yyrr3619 = yyrl3619
		}
		yyv3619 = make([]FinalizerName, yyrl3619)
		yyc3619 = true
	}

	if yyl3619 == 0 {
		if len(yyv3619) != 0 {
			yyv3619 = yyv3619[:0]
			yyc3619 = true
		}
	} else if yyl3619 > 0 {

		if yyl3619 > cap(yyv3619) {
			yyrl3619, yyrt3619 = z.DecInferLen(yyl3619, z.DecBasicHandle().MaxInitLen, 16)

			yyv23619 := yyv3619
			yyv3619 = make([]FinalizerName, yyrl3619)
			if len(yyv3619) > 0 {
				copy(yyv3619, yyv23619[:cap(yyv23619)])
			}
			yyc3619 = true

			yyrr3619 = len(yyv3619)
		} else if yyl3619 != len(yyv3619) {
			yyv3619 = yyv3619[:yyl3619]
			yyc3619 = true
		}
		yyj3619 := 0
		for ; yyj3619 < yyrr3619; yyj3619++ {
			if r.TryDecodeAsNil() {
				yyv3619[yyj3619] = ""
			} else {
				yyv3619[yyj3619] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3619 {
			for ; yyj3619 < yyl3619; yyj3619++ {
				yyv3619 = append(yyv3619, "")
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = ""
				} else {
					yyv3619[yyj3619] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3619 := 0; !r.CheckBreak(); yyj3619++ {
			if yyj3619 >= len(yyv3619) {
				yyv3619 = append(yyv3619, "") // var yyz3619 FinalizerName
				yyc3619 = true
			}

			if yyj3619 < len(yyv3619) {
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = ""
				} else {
					yyv3619[yyj3619] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3619.End()
	}
	if yyc3619 {
		*v = yyv3619
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3623 := range v {
		yy3624 := &yyv3623
		yy3624.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3625 := *v
	yyh3625, yyl3625 := z.DecSliceHelperStart()

	var yyrr3625, yyrl3625 int
	var yyc3625, yyrt3625 bool
	_, _, _ = yyc3625, yyrt3625, yyrl3625
	yyrr3625 = yyl3625

	if yyv3625 == nil {
		if yyrl3625, yyrt3625 = z.DecInferLen(yyl3625, z.DecBasicHandle().MaxInitLen, 232); yyrt3625 {
			yyrr3625 = yyrl3625
		}
		yyv3625 = make([]Namespace, yyrl3625)
		yyc3625 = true
	}

	if yyl3625 == 0 {
		if len(yyv3625) != 0 {
			yyv3625 = yyv3625[:0]
			yyc3625 = true
		}
	} else if yyl3625 > 0 {

		if yyl3625 > cap(yyv3625) {
			yyrl3625, yyrt3625 = z.DecInferLen(yyl3625, z.DecBasicHandle().MaxInitLen, 232)
			yyv3625 = make([]Namespace, yyrl3625)
			yyc3625 = true

			yyrr3625 = len(yyv3625)
		} else if yyl3625 != len(yyv3625) {
			yyv3625 = yyv3625[:yyl3625]
			yyc3625 = true
		}
		yyj3625 := 0
		for ; yyj3625 < yyrr3625; yyj3625++ {
			if r.TryDecodeAsNil() {
				yyv3625[yyj3625] = Namespace{}
			} else {
				yyv3626 := &yyv3625[yyj3625]
				yyv3626.CodecDecodeSelf(d)
			}

		}
		if yyrt3625 {
			for ; yyj3625 < yyl3625; yyj3625++ {
				yyv3625 = append(yyv3625, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = Namespace{}
				} else {
					yyv3627 := &yyv3625[yyj3625]
					yyv3627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3625 := 0; !r.CheckBreak(); yyj3625++ {
			if yyj3625 >= len(yyv3625) {
				yyv3625 = append(yyv3625, Namespace{}) // var yyz3625 Namespace
				yyc3625 = true
			}

			if yyj3625 < len(yyv3625) {
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = Namespace{}
				} else {
					yyv3628 := &yyv3625[yyj3625]
					yyv3628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3625.End()
	}
	if yyc3625 {
		*v = yyv3625
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3629 := range v {
		yy3630 := &yyv3629
		yy3630.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3631 := *v
	yyh3631, yyl3631 := z.DecSliceHelperStart()

	var yyrr3631, yyrl3631 int
	var yyc3631, yyrt3631 bool
	_, _, _ = yyc3631, yyrt3631, yyrl3631
	yyrr3631 = yyl3631

	if yyv3631 == nil {
		if yyrl3631, yyrt3631 = z.DecInferLen(yyl3631, z.DecBasicHandle().MaxInitLen, 424); yyrt3631 {
			yyrr3631 = yyrl3631
		}
		yyv3631 = make([]Event, yyrl3631)
		yyc3631 = true
	}

	if yyl3631 == 0 {
		if len(yyv3631) != 0 {
			yyv3631 = yyv3631[:0]
			yyc3631 = true
		}
	} else if yyl3631 > 0 {

		if yyl3631 > cap(yyv3631) {
			yyrl3631, yyrt3631 = z.DecInferLen(yyl3631, z.DecBasicHandle().MaxInitLen, 424)
			yyv3631 = make([]Event, yyrl3631)
			yyc3631 = true

			yyrr3631 = len(yyv3631)
		} else if yyl3631 != len(yyv3631) {
			yyv3631 = yyv3631[:yyl3631]
			yyc3631 = true
		}
		yyj3631 := 0
		for ; yyj3631 < yyrr3631; yyj3631++ {
			if r.TryDecodeAsNil() {
				yyv3631[yyj3631] = Event{}
			} else {
				yyv3632 := &yyv3631[yyj3631]
				yyv3632.CodecDecodeSelf(d)
			}

		}
		if yyrt3631 {
			for ; yyj3631 < yyl3631; yyj3631++ {
				yyv3631 = append(yyv3631, Event{})
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = Event{}
				} else {
					yyv3633 := &yyv3631[yyj3631]
					yyv3633.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3631 := 0; !r.CheckBreak(); yyj3631++ {
			if yyj3631 >= len(yyv3631) {
				yyv3631 = append(yyv3631, Event{}) // var yyz3631 Event
				yyc3631 = true
			}

			if yyj3631 < len(yyv3631) {
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = Event{}
				} else {
					yyv3634 := &yyv3631[yyj3631]
					yyv3634.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3631.End()
	}
	if yyc3631 {
		*v = yyv3631
	}

}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3635 := range v {
		if yyv3635 == nil {
			r.EncodeNil()
		} else {
			yym3636 := z.EncBinary()
			_ = yym3636
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3635) {
			} else {
				z.EncFallback(yyv3635)
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3637 := *v
	yyh3637, yyl3637 := z.DecSliceHelperStart()

	var yyrr3637, yyrl3637 int
	var yyc3637, yyrt3637 bool
	_, _, _ = yyc3637, yyrt3637, yyrl3637
	yyrr3637 = yyl3637

	if yyv3637 == nil {
		if yyrl3637, yyrt3637 = z.DecInferLen(yyl3637, z.DecBasicHandle().MaxInitLen, 16); yyrt3637 {
			yyrr3637 = yyrl3637
		}
		yyv3637 = make([]pkg8_runtime.Object, yyrl3637)
		yyc3637 = true
	}

	if yyl3637 == 0 {
		if len(yyv3637) != 0 {
			yyv3637 = yyv3637[:0]
			yyc3637 = true
		}
	} else if yyl3637 > 0 {

		if yyl3637 > cap(yyv3637) {
			yyrl3637, yyrt3637 = z.DecInferLen(yyl3637, z.DecBasicHandle().MaxInitLen, 16)
			yyv3637 = make([]pkg8_runtime.Object, yyrl3637)
			yyc3637 = true

			yyrr3637 = len(yyv3637)
		} else if yyl3637 != len(yyv3637) {
			yyv3637 = yyv3637[:yyl3637]
			yyc3637 = true
		}
		yyj3637 := 0
		for ; yyj3637 < yyrr3637; yyj3637++ {
			if r.TryDecodeAsNil() {
				yyv3637[yyj3637] = nil
			} else {
				yyv3638 := &yyv3637[yyj3637]
				yym3639 := z.DecBinary()
				_ = yym3639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3638) {
				} else {
					z.DecFallback(yyv3638, true)
				}
			}

		}
		if yyrt3637 {
			for ; yyj3637 < yyl3637; yyj3637++ {
				yyv3637 = append(yyv3637, nil)
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = nil
				} else {
					yyv3640 := &yyv3637[yyj3637]
					yym3641 := z.DecBinary()
					_ = yym3641
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3640) {
					} else {
						z.DecFallback(yyv3640, true)
					}
				}

			}
		}

	} else {
		for yyj3637 := 0; !r.CheckBreak(); yyj3637++ {
			if yyj3637 >= len(yyv3637) {
				yyv3637 = append(yyv3637, nil) // var yyz3637 pkg8_runtime.Object
				yyc3637 = true
			}

			if yyj3637 < len(yyv3637) {
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = nil
				} else {
					yyv3642 := &yyv3637[yyj3637]
					yym3643 := z.DecBinary()
					_ = yym3643
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3642) {
					} else {
						z.DecFallback(yyv3642, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3637.End()
	}
	if yyc3637 {
		*v = yyv3637
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3644 := range v {
		yy3645 := &yyv3644
		yy3645.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3646 := *v
	yyh3646, yyl3646 := z.DecSliceHelperStart()

	var yyrr3646, yyrl3646 int
	var yyc3646, yyrt3646 bool
	_, _, _ = yyc3646, yyrt3646, yyrl3646
	yyrr3646 = yyl3646

	if yyv3646 == nil {
		if yyrl3646, yyrt3646 = z.DecInferLen(yyl3646, z.DecBasicHandle().MaxInitLen, 56); yyrt3646 {
			yyrr3646 = yyrl3646
		}
		yyv3646 = make([]LimitRangeItem, yyrl3646)
		yyc3646 = true
	}

	if yyl3646 == 0 {
		if len(yyv3646) != 0 {
			yyv3646 = yyv3646[:0]
			yyc3646 = true
		}
	} else if yyl3646 > 0 {

		if yyl3646 > cap(yyv3646) {
			yyrl3646, yyrt3646 = z.DecInferLen(yyl3646, z.DecBasicHandle().MaxInitLen, 56)
			yyv3646 = make([]LimitRangeItem, yyrl3646)
			yyc3646 = true

			yyrr3646 = len(yyv3646)
		} else if yyl3646 != len(yyv3646) {
			yyv3646 = yyv3646[:yyl3646]
			yyc3646 = true
		}
		yyj3646 := 0
		for ; yyj3646 < yyrr3646; yyj3646++ {
			if r.TryDecodeAsNil() {
				yyv3646[yyj3646] = LimitRangeItem{}
			} else {
				yyv3647 := &yyv3646[yyj3646]
				yyv3647.CodecDecodeSelf(d)
			}

		}
		if yyrt3646 {
			for ; yyj3646 < yyl3646; yyj3646++ {
				yyv3646 = append(yyv3646, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3646[yyj3646] = LimitRangeItem{}
				} else {
					yyv3648 := &yyv3646[yyj3646]
					yyv3648.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3646 := 0; !r.CheckBreak(); yyj3646++ {
			if yyj3646 >= len(yyv3646) {
				yyv3646 = append(yyv3646, LimitRangeItem{}) // var yyz3646 LimitRangeItem
				yyc3646 = true
			}

			if yyj3646 < len(yyv3646) {
				if r.TryDecodeAsNil() {
					yyv3646[yyj3646] = LimitRangeItem{}
				} else {
					yyv3649 := &yyv3646[yyj3646]
					yyv3649.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3646.End()
	}
	if yyc3646 {
		*v = yyv3646
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3650 := range v {
		yy3651 := &yyv3650
		yy3651.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3652 := *v
	yyh3652, yyl3652 := z.DecSliceHelperStart()

	var yyrr3652, yyrl3652 int
	var yyc3652, yyrt3652 bool
	_, _, _ = yyc3652, yyrt3652, yyrl3652
	yyrr3652 = yyl3652

	if yyv3652 == nil {
		if yyrl3652, yyrt3652 = z.DecInferLen(yyl3652, z.DecBasicHandle().MaxInitLen, 216); yyrt3652 {
			yyrr3652 = yyrl3652
		}
		yyv3652 = make([]LimitRange, yyrl3652)
		yyc3652 = true
	}

	if yyl3652 == 0 {
		if len(yyv3652) != 0 {
			yyv3652 = yyv3652[:0]
			yyc3652 = true
		}
	} else if yyl3652 > 0 {

		if yyl3652 > cap(yyv3652) {
			yyrl3652, yyrt3652 = z.DecInferLen(yyl3652, z.DecBasicHandle().MaxInitLen, 216)
			yyv3652 = make([]LimitRange, yyrl3652)
			yyc3652 = true

			yyrr3652 = len(yyv3652)
		} else if yyl3652 != len(yyv3652) {
			yyv3652 = yyv3652[:yyl3652]
			yyc3652 = true
		}
		yyj3652 := 0
		for ; yyj3652 < yyrr3652; yyj3652++ {
			if r.TryDecodeAsNil() {
				yyv3652[yyj3652] = LimitRange{}
			} else {
				yyv3653 := &yyv3652[yyj3652]
				yyv3653.CodecDecodeSelf(d)
			}

		}
		if yyrt3652 {
			for ; yyj3652 < yyl3652; yyj3652++ {
				yyv3652 = append(yyv3652, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3652[yyj3652] = LimitRange{}
				} else {
					yyv3654 := &yyv3652[yyj3652]
					yyv3654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3652 := 0; !r.CheckBreak(); yyj3652++ {
			if yyj3652 >= len(yyv3652) {
				yyv3652 = append(yyv3652, LimitRange{}) // var yyz3652 LimitRange
				yyc3652 = true
			}

			if yyj3652 < len(yyv3652) {
				if r.TryDecodeAsNil() {
					yyv3652[yyj3652] = LimitRange{}
				} else {
					yyv3655 := &yyv3652[yyj3652]
					yyv3655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3652.End()
	}
	if yyc3652 {
		*v = yyv3652
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3656 := range v {
		yy3657 := &yyv3656
		yy3657.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3658 := *v
	yyh3658, yyl3658 := z.DecSliceHelperStart()

	var yyrr3658, yyrl3658 int
	var yyc3658, yyrt3658 bool
	_, _, _ = yyc3658, yyrt3658, yyrl3658
	yyrr3658 = yyl3658

	if yyv3658 == nil {
		if yyrl3658, yyrt3658 = z.DecInferLen(yyl3658, z.DecBasicHandle().MaxInitLen, 216); yyrt3658 {
			yyrr3658 = yyrl3658
		}
		yyv3658 = make([]ResourceQuota, yyrl3658)
		yyc3658 = true
	}

	if yyl3658 == 0 {
		if len(yyv3658) != 0 {
			yyv3658 = yyv3658[:0]
			yyc3658 = true
		}
	} else if yyl3658 > 0 {

		if yyl3658 > cap(yyv3658) {
			yyrl3658, yyrt3658 = z.DecInferLen(yyl3658, z.DecBasicHandle().MaxInitLen, 216)
			yyv3658 = make([]ResourceQuota, yyrl3658)
			yyc3658 = true

			yyrr3658 = len(yyv3658)
		} else if yyl3658 != len(yyv3658) {
			yyv3658 = yyv3658[:yyl3658]
			yyc3658 = true
		}
		yyj3658 := 0
		for ; yyj3658 < yyrr3658; yyj3658++ {
			if r.TryDecodeAsNil() {
				yyv3658[yyj3658] = ResourceQuota{}
			} else {
				yyv3659 := &yyv3658[yyj3658]
				yyv3659.CodecDecodeSelf(d)
			}

		}
		if yyrt3658 {
			for ; yyj3658 < yyl3658; yyj3658++ {
				yyv3658 = append(yyv3658, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = ResourceQuota{}
				} else {
					yyv3660 := &yyv3658[yyj3658]
					yyv3660.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3658 := 0; !r.CheckBreak(); yyj3658++ {
			if yyj3658 >= len(yyv3658) {
				yyv3658 = append(yyv3658, ResourceQuota{}) // var yyz3658 ResourceQuota
				yyc3658 = true
			}

			if yyj3658 < len(yyv3658) {
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = ResourceQuota{}
				} else {
					yyv3661 := &yyv3658[yyj3658]
					yyv3661.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3658.End()
	}
	if yyc3658 {
		*v = yyv3658
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3662, yyv3662 := range v {
		yym3663 := z.EncBinary()
		_ = yym3663
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3662))
		}
		if yyv3662 == nil {
			r.EncodeNil()
		} else {
			yym3664 := z.EncBinary()
			_ = yym3664
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3662))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3665 := *v
	yyl3665 := r.ReadMapStart()
	yybh3665 := z.DecBasicHandle()
	if yyv3665 == nil {
		yyrl3665, _ := z.DecInferLen(yyl3665, yybh3665.MaxInitLen, 40)
		yyv3665 = make(map[string][]uint8, yyrl3665)
		*v = yyv3665
	}
	var yymk3665 string
	var yymv3665 []uint8
	var yymg3665 bool
	if yybh3665.MapValueReset {
		yymg3665 = true
	}
	if yyl3665 > 0 {
		for yyj3665 := 0; yyj3665 < yyl3665; yyj3665++ {
			if r.TryDecodeAsNil() {
				yymk3665 = ""
			} else {
				yymk3665 = string(r.DecodeString())
			}

			if yymg3665 {
				yymv3665 = yyv3665[yymk3665]
			} else {
				yymv3665 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3665 = nil
			} else {
				yyv3667 := &yymv3665
				yym3668 := z.DecBinary()
				_ = yym3668
				if false {
				} else {
					*yyv3667 = r.DecodeBytes(*(*[]byte)(yyv3667), false, false)
				}
			}

			if yyv3665 != nil {
				yyv3665[yymk3665] = yymv3665
			}
		}
	} else if yyl3665 < 0 {
		for yyj3665 := 0; !r.CheckBreak(); yyj3665++ {
			if r.TryDecodeAsNil() {
				yymk3665 = ""
			} else {
				yymk3665 = string(r.DecodeString())
			}

			if yymg3665 {
				yymv3665 = yyv3665[yymk3665]
			} else {
				yymv3665 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3665 = nil
			} else {
				yyv3670 := &yymv3665
				yym3671 := z.DecBinary()
				_ = yym3671
				if false {
				} else {
					*yyv3670 = r.DecodeBytes(*(*[]byte)(yyv3670), false, false)
				}
			}

			if yyv3665 != nil {
				yyv3665[yymk3665] = yymv3665
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3672 := range v {
		yy3673 := &yyv3672
		yy3673.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3674 := *v
	yyh3674, yyl3674 := z.DecSliceHelperStart()

	var yyrr3674, yyrl3674 int
	var yyc3674, yyrt3674 bool
	_, _, _ = yyc3674, yyrt3674, yyrl3674
	yyrr3674 = yyl3674

	if yyv3674 == nil {
		if yyrl3674, yyrt3674 = z.DecInferLen(yyl3674, z.DecBasicHandle().MaxInitLen, 216); yyrt3674 {
			yyrr3674 = yyrl3674
		}
		yyv3674 = make([]Secret, yyrl3674)
		yyc3674 = true
	}

	if yyl3674 == 0 {
		if len(yyv3674) != 0 {
			yyv3674 = yyv3674[:0]
			yyc3674 = true
		}
	} else if yyl3674 > 0 {

		if yyl3674 > cap(yyv3674) {
			yyrl3674, yyrt3674 = z.DecInferLen(yyl3674, z.DecBasicHandle().MaxInitLen, 216)
			yyv3674 = make([]Secret, yyrl3674)
			yyc3674 = true

			yyrr3674 = len(yyv3674)
		} else if yyl3674 != len(yyv3674) {
			yyv3674 = yyv3674[:yyl3674]
			yyc3674 = true
		}
		yyj3674 := 0
		for ; yyj3674 < yyrr3674; yyj3674++ {
			if r.TryDecodeAsNil() {
				yyv3674[yyj3674] = Secret{}
			} else {
				yyv3675 := &yyv3674[yyj3674]
				yyv3675.CodecDecodeSelf(d)
			}

		}
		if yyrt3674 {
			for ; yyj3674 < yyl3674; yyj3674++ {
				yyv3674 = append(yyv3674, Secret{})
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = Secret{}
				} else {
					yyv3676 := &yyv3674[yyj3674]
					yyv3676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3674 := 0; !r.CheckBreak(); yyj3674++ {
			if yyj3674 >= len(yyv3674) {
				yyv3674 = append(yyv3674, Secret{}) // var yyz3674 Secret
				yyc3674 = true
			}

			if yyj3674 < len(yyv3674) {
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = Secret{}
				} else {
					yyv3677 := &yyv3674[yyj3674]
					yyv3677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3674.End()
	}
	if yyc3674 {
		*v = yyv3674
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3678 := range v {
		yy3679 := &yyv3678
		yy3679.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3680 := *v
	yyh3680, yyl3680 := z.DecSliceHelperStart()

	var yyrr3680, yyrl3680 int
	var yyc3680, yyrt3680 bool
	_, _, _ = yyc3680, yyrt3680, yyrl3680
	yyrr3680 = yyl3680

	if yyv3680 == nil {
		if yyrl3680, yyrt3680 = z.DecInferLen(yyl3680, z.DecBasicHandle().MaxInitLen, 64); yyrt3680 {
			yyrr3680 = yyrl3680
		}
		yyv3680 = make([]ComponentCondition, yyrl3680)
		yyc3680 = true
	}

	if yyl3680 == 0 {
		if len(yyv3680) != 0 {
			yyv3680 = yyv3680[:0]
			yyc3680 = true
		}
	} else if yyl3680 > 0 {

		if yyl3680 > cap(yyv3680) {
			yyrl3680, yyrt3680 = z.DecInferLen(yyl3680, z.DecBasicHandle().MaxInitLen, 64)
			yyv3680 = make([]ComponentCondition, yyrl3680)
			yyc3680 = true

			yyrr3680 = len(yyv3680)
		} else if yyl3680 != len(yyv3680) {
			yyv3680 = yyv3680[:yyl3680]
			yyc3680 = true
		}
		yyj3680 := 0
		for ; yyj3680 < yyrr3680; yyj3680++ {
			if r.TryDecodeAsNil() {
				yyv3680[yyj3680] = ComponentCondition{}
			} else {
				yyv3681 := &yyv3680[yyj3680]
				yyv3681.CodecDecodeSelf(d)
			}

		}
		if yyrt3680 {
			for ; yyj3680 < yyl3680; yyj3680++ {
				yyv3680 = append(yyv3680, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = ComponentCondition{}
				} else {
					yyv3682 := &yyv3680[yyj3680]
					yyv3682.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3680 := 0; !r.CheckBreak(); yyj3680++ {
			if yyj3680 >= len(yyv3680) {
				yyv3680 = append(yyv3680, ComponentCondition{}) // var yyz3680 ComponentCondition
				yyc3680 = true
			}

			if yyj3680 < len(yyv3680) {
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = ComponentCondition{}
				} else {
					yyv3683 := &yyv3680[yyj3680]
					yyv3683.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3680.End()
	}
	if yyc3680 {
		*v = yyv3680
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3684 := range v {
		yy3685 := &yyv3684
		yy3685.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3686 := *v
	yyh3686, yyl3686 := z.DecSliceHelperStart()

	var yyrr3686, yyrl3686 int
	var yyc3686, yyrt3686 bool
	_, _, _ = yyc3686, yyrt3686, yyrl3686
	yyrr3686 = yyl3686

	if yyv3686 == nil {
		if yyrl3686, yyrt3686 = z.DecInferLen(yyl3686, z.DecBasicHandle().MaxInitLen, 216); yyrt3686 {
			yyrr3686 = yyrl3686
		}
		yyv3686 = make([]ComponentStatus, yyrl3686)
		yyc3686 = true
	}

	if yyl3686 == 0 {
		if len(yyv3686) != 0 {
			yyv3686 = yyv3686[:0]
			yyc3686 = true
		}
	} else if yyl3686 > 0 {

		if yyl3686 > cap(yyv3686) {
			yyrl3686, yyrt3686 = z.DecInferLen(yyl3686, z.DecBasicHandle().MaxInitLen, 216)
			yyv3686 = make([]ComponentStatus, yyrl3686)
			yyc3686 = true

			yyrr3686 = len(yyv3686)
		} else if yyl3686 != len(yyv3686) {
			yyv3686 = yyv3686[:yyl3686]
			yyc3686 = true
		}
		yyj3686 := 0
		for ; yyj3686 < yyrr3686; yyj3686++ {
			if r.TryDecodeAsNil() {
				yyv3686[yyj3686] = ComponentStatus{}
			} else {
				yyv3687 := &yyv3686[yyj3686]
				yyv3687.CodecDecodeSelf(d)
			}

		}
		if yyrt3686 {
			for ; yyj3686 < yyl3686; yyj3686++ {
				yyv3686 = append(yyv3686, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = ComponentStatus{}
				} else {
					yyv3688 := &yyv3686[yyj3686]
					yyv3688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3686 := 0; !r.CheckBreak(); yyj3686++ {
			if yyj3686 >= len(yyv3686) {
				yyv3686 = append(yyv3686, ComponentStatus{}) // var yyz3686 ComponentStatus
				yyc3686 = true
			}

			if yyj3686 < len(yyv3686) {
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = ComponentStatus{}
				} else {
					yyv3689 := &yyv3686[yyj3686]
					yyv3689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3686.End()
	}
	if yyc3686 {
		*v = yyv3686
	}

}
