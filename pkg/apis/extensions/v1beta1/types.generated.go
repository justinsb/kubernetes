/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg6_util.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadEnd()
	}
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadEnd()
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				var yynn13 int = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
			}
			if yyr13 || yy2arr13 {
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yysep13 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	if !yyhl22 {
		r.ReadEnd()
	}
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	r.ReadEnd()
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				var yynn31 int = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
			}
			if yyr31 || yy2arr31 {
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yysep31 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	if !yyhl51 {
		r.ReadEnd()
	}
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				var yynn66 int = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
			}
			if yyr66 || yy2arr66 {
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yysep66 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	if !yyhl75 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	r.ReadEnd()
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [5]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = x.Kind != ""
			yyq82[1] = x.Namespace != ""
			yyq82[2] = x.Name != ""
			yyq82[3] = x.APIVersion != ""
			yyq82[4] = x.Subresource != ""
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(5)
			} else {
				var yynn82 int = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				if yyq82[0] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[1] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[3] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[4] {
					yym96 := z.EncBinary()
					_ = yym96
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					yym97 := z.EncBinary()
					_ = yym97
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym98 := z.DecBinary()
	_ = yym98
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl99 := r.ReadMapStart()
			if yyl99 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl99, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl99 := r.ReadArrayStart()
			if yyl99 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl99, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys100Slc
	var yyhl100 bool = l >= 0
	for yyj100 := 0; ; yyj100++ {
		if yyhl100 {
			if yyj100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys100Slc = r.DecodeBytes(yys100Slc, true, true)
		yys100 := string(yys100Slc)
		switch yys100 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys100)
		} // end switch yys100
	} // end for yyj100
	if !yyhl100 {
		r.ReadEnd()
	}
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj106 int
	var yyb106 bool
	var yyhl106 bool = l >= 0
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj106++
		if yyhl106 {
			yyb106 = yyj106 > l
		} else {
			yyb106 = r.CheckBreak()
		}
		if yyb106 {
			break
		}
		z.DecStructFieldNotFound(yyj106-1, "")
	}
	r.ReadEnd()
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym112 := z.EncBinary()
		_ = yym112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep113 := !z.EncBinary()
			yy2arr113 := z.EncBasicHandle().StructToArray
			var yyq113 [1]bool
			_, _, _ = yysep113, yyq113, yy2arr113
			const yyr113 bool = false
			if yyr113 || yy2arr113 {
				r.EncodeArrayStart(1)
			} else {
				var yynn113 int = 1
				for _, b := range yyq113 {
					if b {
						yynn113++
					}
				}
				r.EncodeMapStart(yynn113)
			}
			if yyr113 || yy2arr113 {
				yym115 := z.EncBinary()
				_ = yym115
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				yym116 := z.EncBinary()
				_ = yym116
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yysep113 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym117 := z.DecBinary()
	_ = yym117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl118 := r.ReadMapStart()
			if yyl118 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl118, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl118 := r.ReadArrayStart()
			if yyl118 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys119Slc
	var yyhl119 bool = l >= 0
	for yyj119 := 0; ; yyj119++ {
		if yyhl119 {
			if yyj119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys119Slc = r.DecodeBytes(yys119Slc, true, true)
		yys119 := string(yys119Slc)
		switch yys119 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys119)
		} // end switch yys119
	} // end for yyj119
	if !yyhl119 {
		r.ReadEnd()
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj121 int
	var yyb121 bool
	var yyhl121 bool = l >= 0
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj121++
		if yyhl121 {
			yyb121 = yyj121 > l
		} else {
			yyb121 = r.CheckBreak()
		}
		if yyb121 {
			break
		}
		z.DecStructFieldNotFound(yyj121-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym123 := z.EncBinary()
		_ = yym123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep124 := !z.EncBinary()
			yy2arr124 := z.EncBasicHandle().StructToArray
			var yyq124 [4]bool
			_, _, _ = yysep124, yyq124, yy2arr124
			const yyr124 bool = false
			yyq124[1] = x.MinReplicas != nil
			yyq124[3] = x.CPUUtilization != nil
			if yyr124 || yy2arr124 {
				r.EncodeArrayStart(4)
			} else {
				var yynn124 int = 2
				for _, b := range yyq124 {
					if b {
						yynn124++
					}
				}
				r.EncodeMapStart(yynn124)
			}
			if yyr124 || yy2arr124 {
				yy126 := &x.ScaleRef
				yy126.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				yy127 := &x.ScaleRef
				yy127.CodecEncodeSelf(e)
			}
			if yyr124 || yy2arr124 {
				if yyq124[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy129 := *x.MinReplicas
						yym130 := z.EncBinary()
						_ = yym130
						if false {
						} else {
							r.EncodeInt(int64(yy129))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq124[1] {
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy131 := *x.MinReplicas
						yym132 := z.EncBinary()
						_ = yym132
						if false {
						} else {
							r.EncodeInt(int64(yy131))
						}
					}
				}
			}
			if yyr124 || yy2arr124 {
				yym134 := z.EncBinary()
				_ = yym134
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				yym135 := z.EncBinary()
				_ = yym135
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr124 || yy2arr124 {
				if yyq124[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq124[3] {
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yysep124 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym137 := z.DecBinary()
	_ = yym137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl138 := r.ReadMapStart()
			if yyl138 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl138, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl138 := r.ReadArrayStart()
			if yyl138 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys139Slc
	var yyhl139 bool = l >= 0
	for yyj139 := 0; ; yyj139++ {
		if yyhl139 {
			if yyj139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys139Slc = r.DecodeBytes(yys139Slc, true, true)
		yys139 := string(yys139Slc)
		switch yys139 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv140 := &x.ScaleRef
				yyv140.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym142 := z.DecBinary()
				_ = yym142
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys139)
		} // end switch yys139
	} // end for yyj139
	if !yyhl139 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj145 int
	var yyb145 bool
	var yyhl145 bool = l >= 0
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv146 := &x.ScaleRef
		yyv146.CodecDecodeSelf(d)
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym148 := z.DecBinary()
		_ = yym148
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj145++
		if yyhl145 {
			yyb145 = yyj145 > l
		} else {
			yyb145 = r.CheckBreak()
		}
		if yyb145 {
			break
		}
		z.DecStructFieldNotFound(yyj145-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym151 := z.EncBinary()
		_ = yym151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep152 := !z.EncBinary()
			yy2arr152 := z.EncBasicHandle().StructToArray
			var yyq152 [5]bool
			_, _, _ = yysep152, yyq152, yy2arr152
			const yyr152 bool = false
			yyq152[0] = x.ObservedGeneration != nil
			yyq152[1] = x.LastScaleTime != nil
			yyq152[4] = x.CurrentCPUUtilizationPercentage != nil
			if yyr152 || yy2arr152 {
				r.EncodeArrayStart(5)
			} else {
				var yynn152 int = 2
				for _, b := range yyq152 {
					if b {
						yynn152++
					}
				}
				r.EncodeMapStart(yynn152)
			}
			if yyr152 || yy2arr152 {
				if yyq152[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy154 := *x.ObservedGeneration
						yym155 := z.EncBinary()
						_ = yym155
						if false {
						} else {
							r.EncodeInt(int64(yy154))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq152[0] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy156 := *x.ObservedGeneration
						yym157 := z.EncBinary()
						_ = yym157
						if false {
						} else {
							r.EncodeInt(int64(yy156))
						}
					}
				}
			}
			if yyr152 || yy2arr152 {
				if yyq152[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym159 := z.EncBinary()
						_ = yym159
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym159 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym159 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq152[1] {
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym160 := z.EncBinary()
						_ = yym160
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym160 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym160 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr152 || yy2arr152 {
				yym162 := z.EncBinary()
				_ = yym162
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				yym163 := z.EncBinary()
				_ = yym163
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr152 || yy2arr152 {
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				yym166 := z.EncBinary()
				_ = yym166
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr152 || yy2arr152 {
				if yyq152[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy168 := *x.CurrentCPUUtilizationPercentage
						yym169 := z.EncBinary()
						_ = yym169
						if false {
						} else {
							r.EncodeInt(int64(yy168))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq152[4] {
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy170 := *x.CurrentCPUUtilizationPercentage
						yym171 := z.EncBinary()
						_ = yym171
						if false {
						} else {
							r.EncodeInt(int64(yy170))
						}
					}
				}
			}
			if yysep152 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym172 := z.DecBinary()
	_ = yym172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl173 := r.ReadMapStart()
			if yyl173 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl173, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl173 := r.ReadArrayStart()
			if yyl173 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys174Slc
	var yyhl174 bool = l >= 0
	for yyj174 := 0; ; yyj174++ {
		if yyhl174 {
			if yyj174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys174Slc = r.DecodeBytes(yys174Slc, true, true)
		yys174 := string(yys174Slc)
		switch yys174 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym176 := z.DecBinary()
				_ = yym176
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym178 := z.DecBinary()
				_ = yym178
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym178 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym178 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym182 := z.DecBinary()
				_ = yym182
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys174)
		} // end switch yys174
	} // end for yyj174
	if !yyhl174 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj183 int
	var yyb183 bool
	var yyhl183 bool = l >= 0
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym185 := z.DecBinary()
		_ = yym185
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym187 := z.DecBinary()
		_ = yym187
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym187 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym187 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym191 := z.DecBinary()
		_ = yym191
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj183++
		if yyhl183 {
			yyb183 = yyj183 > l
		} else {
			yyb183 = r.CheckBreak()
		}
		if yyb183 {
			break
		}
		z.DecStructFieldNotFound(yyj183-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym192 := z.EncBinary()
		_ = yym192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep193 := !z.EncBinary()
			yy2arr193 := z.EncBasicHandle().StructToArray
			var yyq193 [5]bool
			_, _, _ = yysep193, yyq193, yy2arr193
			const yyr193 bool = false
			yyq193[0] = x.Kind != ""
			yyq193[1] = x.APIVersion != ""
			yyq193[2] = true
			yyq193[3] = true
			yyq193[4] = true
			if yyr193 || yy2arr193 {
				r.EncodeArrayStart(5)
			} else {
				var yynn193 int = 0
				for _, b := range yyq193 {
					if b {
						yynn193++
					}
				}
				r.EncodeMapStart(yynn193)
			}
			if yyr193 || yy2arr193 {
				if yyq193[0] {
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq193[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym196 := z.EncBinary()
					_ = yym196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[1] {
					yym198 := z.EncBinary()
					_ = yym198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq193[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[2] {
					yy201 := &x.ObjectMeta
					yym202 := z.EncBinary()
					_ = yym202
					if false {
					} else if z.HasExtensions() && z.EncExt(yy201) {
					} else {
						z.EncFallback(yy201)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq193[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy203 := &x.ObjectMeta
					yym204 := z.EncBinary()
					_ = yym204
					if false {
					} else if z.HasExtensions() && z.EncExt(yy203) {
					} else {
						z.EncFallback(yy203)
					}
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[3] {
					yy206 := &x.Spec
					yy206.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq193[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy207 := &x.Spec
					yy207.CodecEncodeSelf(e)
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[4] {
					yy209 := &x.Status
					yy209.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq193[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy210 := &x.Status
					yy210.CodecEncodeSelf(e)
				}
			}
			if yysep193 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym211 := z.DecBinary()
	_ = yym211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl212 := r.ReadMapStart()
			if yyl212 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl212, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl212 := r.ReadArrayStart()
			if yyl212 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys213Slc
	var yyhl213 bool = l >= 0
	for yyj213 := 0; ; yyj213++ {
		if yyhl213 {
			if yyj213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys213Slc = r.DecodeBytes(yys213Slc, true, true)
		yys213 := string(yys213Slc)
		switch yys213 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv216 := &x.ObjectMeta
				yym217 := z.DecBinary()
				_ = yym217
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv216) {
				} else {
					z.DecFallback(yyv216, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv218 := &x.Spec
				yyv218.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv219 := &x.Status
				yyv219.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys213)
		} // end switch yys213
	} // end for yyj213
	if !yyhl213 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj220 int
	var yyb220 bool
	var yyhl220 bool = l >= 0
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv223 := &x.ObjectMeta
		yym224 := z.DecBinary()
		_ = yym224
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv223) {
		} else {
			z.DecFallback(yyv223, false)
		}
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv225 := &x.Spec
		yyv225.CodecDecodeSelf(d)
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv226 := &x.Status
		yyv226.CodecDecodeSelf(d)
	}
	for {
		yyj220++
		if yyhl220 {
			yyb220 = yyj220 > l
		} else {
			yyb220 = r.CheckBreak()
		}
		if yyb220 {
			break
		}
		z.DecStructFieldNotFound(yyj220-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym227 := z.EncBinary()
		_ = yym227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep228 := !z.EncBinary()
			yy2arr228 := z.EncBasicHandle().StructToArray
			var yyq228 [4]bool
			_, _, _ = yysep228, yyq228, yy2arr228
			const yyr228 bool = false
			yyq228[0] = x.Kind != ""
			yyq228[1] = x.APIVersion != ""
			yyq228[2] = true
			if yyr228 || yy2arr228 {
				r.EncodeArrayStart(4)
			} else {
				var yynn228 int = 1
				for _, b := range yyq228 {
					if b {
						yynn228++
					}
				}
				r.EncodeMapStart(yynn228)
			}
			if yyr228 || yy2arr228 {
				if yyq228[0] {
					yym230 := z.EncBinary()
					_ = yym230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq228[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym231 := z.EncBinary()
					_ = yym231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr228 || yy2arr228 {
				if yyq228[1] {
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq228[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr228 || yy2arr228 {
				if yyq228[2] {
					yy236 := &x.ListMeta
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy236) {
					} else {
						z.EncFallback(yy236)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy238 := &x.ListMeta
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else if z.HasExtensions() && z.EncExt(yy238) {
					} else {
						z.EncFallback(yy238)
					}
				}
			}
			if yyr228 || yy2arr228 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym241 := z.EncBinary()
					_ = yym241
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym242 := z.EncBinary()
					_ = yym242
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep228 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym243 := z.DecBinary()
	_ = yym243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl244 := r.ReadMapStart()
			if yyl244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl244, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl244 := r.ReadArrayStart()
			if yyl244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys245Slc
	var yyhl245 bool = l >= 0
	for yyj245 := 0; ; yyj245++ {
		if yyhl245 {
			if yyj245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys245Slc = r.DecodeBytes(yys245Slc, true, true)
		yys245 := string(yys245Slc)
		switch yys245 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv248 := &x.ListMeta
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv248) {
				} else {
					z.DecFallback(yyv248, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv250 := &x.Items
				yym251 := z.DecBinary()
				_ = yym251
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv250), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys245)
		} // end switch yys245
	} // end for yyj245
	if !yyhl245 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj252 int
	var yyb252 bool
	var yyhl252 bool = l >= 0
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv255 := &x.ListMeta
		yym256 := z.DecBinary()
		_ = yym256
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv255) {
		} else {
			z.DecFallback(yyv255, false)
		}
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv257 := &x.Items
		yym258 := z.DecBinary()
		_ = yym258
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv257), d)
		}
	}
	for {
		yyj252++
		if yyhl252 {
			yyb252 = yyj252 > l
		} else {
			yyb252 = r.CheckBreak()
		}
		if yyb252 {
			break
		}
		z.DecStructFieldNotFound(yyj252-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym259 := z.EncBinary()
		_ = yym259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep260 := !z.EncBinary()
			yy2arr260 := z.EncBasicHandle().StructToArray
			var yyq260 [5]bool
			_, _, _ = yysep260, yyq260, yy2arr260
			const yyr260 bool = false
			yyq260[0] = x.Kind != ""
			yyq260[1] = x.APIVersion != ""
			yyq260[2] = true
			yyq260[3] = x.Description != ""
			yyq260[4] = len(x.Versions) != 0
			if yyr260 || yy2arr260 {
				r.EncodeArrayStart(5)
			} else {
				var yynn260 int = 0
				for _, b := range yyq260 {
					if b {
						yynn260++
					}
				}
				r.EncodeMapStart(yynn260)
			}
			if yyr260 || yy2arr260 {
				if yyq260[0] {
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym263 := z.EncBinary()
					_ = yym263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[1] {
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[2] {
					yy268 := &x.ObjectMeta
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy268) {
					} else {
						z.EncFallback(yy268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq260[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy270 := &x.ObjectMeta
					yym271 := z.EncBinary()
					_ = yym271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy270) {
					} else {
						z.EncFallback(yy270)
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[3] {
					yym273 := z.EncBinary()
					_ = yym273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[3] {
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					yym274 := z.EncBinary()
					_ = yym274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym276 := z.EncBinary()
						_ = yym276
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq260[4] {
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym277 := z.EncBinary()
						_ = yym277
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep260 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym278 := z.DecBinary()
	_ = yym278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl279 := r.ReadMapStart()
			if yyl279 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl279, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl279 := r.ReadArrayStart()
			if yyl279 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys280Slc
	var yyhl280 bool = l >= 0
	for yyj280 := 0; ; yyj280++ {
		if yyhl280 {
			if yyj280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys280Slc = r.DecodeBytes(yys280Slc, true, true)
		yys280 := string(yys280Slc)
		switch yys280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv283 := &x.ObjectMeta
				yym284 := z.DecBinary()
				_ = yym284
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv283) {
				} else {
					z.DecFallback(yyv283, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv286 := &x.Versions
				yym287 := z.DecBinary()
				_ = yym287
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv286), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys280)
		} // end switch yys280
	} // end for yyj280
	if !yyhl280 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj288 int
	var yyb288 bool
	var yyhl288 bool = l >= 0
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv291 := &x.ObjectMeta
		yym292 := z.DecBinary()
		_ = yym292
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv291) {
		} else {
			z.DecFallback(yyv291, false)
		}
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv294 := &x.Versions
		yym295 := z.DecBinary()
		_ = yym295
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv294), d)
		}
	}
	for {
		yyj288++
		if yyhl288 {
			yyb288 = yyj288 > l
		} else {
			yyb288 = r.CheckBreak()
		}
		if yyb288 {
			break
		}
		z.DecStructFieldNotFound(yyj288-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [4]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(4)
			} else {
				var yynn297 int = 1
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
			}
			if yyr297 || yy2arr297 {
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				if yyq297[2] {
					yy305 := &x.ListMeta
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy305) {
					} else {
						z.EncFallback(yy305)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy307 := &x.ListMeta
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else if z.HasExtensions() && z.EncExt(yy307) {
					} else {
						z.EncFallback(yy307)
					}
				}
			}
			if yyr297 || yy2arr297 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym310 := z.EncBinary()
					_ = yym310
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep297 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym312 := z.DecBinary()
	_ = yym312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl313 := r.ReadMapStart()
			if yyl313 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl313, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl313 := r.ReadArrayStart()
			if yyl313 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys314Slc
	var yyhl314 bool = l >= 0
	for yyj314 := 0; ; yyj314++ {
		if yyhl314 {
			if yyj314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys314Slc = r.DecodeBytes(yys314Slc, true, true)
		yys314 := string(yys314Slc)
		switch yys314 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv317 := &x.ListMeta
				yym318 := z.DecBinary()
				_ = yym318
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv317) {
				} else {
					z.DecFallback(yyv317, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv319 := &x.Items
				yym320 := z.DecBinary()
				_ = yym320
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv319), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys314)
		} // end switch yys314
	} // end for yyj314
	if !yyhl314 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv324 := &x.ListMeta
		yym325 := z.DecBinary()
		_ = yym325
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv324) {
		} else {
			z.DecFallback(yyv324, false)
		}
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv326 := &x.Items
		yym327 := z.DecBinary()
		_ = yym327
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv326), d)
		}
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	r.ReadEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [2]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Name != ""
			yyq329[1] = x.APIGroup != ""
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(2)
			} else {
				var yynn329 int = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
			}
			if yyr329 || yy2arr329 {
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr329 || yy2arr329 {
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep329 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl337 := r.ReadMapStart()
			if yyl337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl337, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl337 := r.ReadArrayStart()
			if yyl337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys338Slc
	var yyhl338 bool = l >= 0
	for yyj338 := 0; ; yyj338++ {
		if yyhl338 {
			if yyj338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys338Slc = r.DecodeBytes(yys338Slc, true, true)
		yys338 := string(yys338Slc)
		switch yys338 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys338)
		} // end switch yys338
	} // end for yyj338
	if !yyhl338 {
		r.ReadEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj341 int
	var yyb341 bool
	var yyhl341 bool = l >= 0
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj341++
		if yyhl341 {
			yyb341 = yyj341 > l
		} else {
			yyb341 = r.CheckBreak()
		}
		if yyb341 {
			break
		}
		z.DecStructFieldNotFound(yyj341-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym344 := z.EncBinary()
		_ = yym344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep345 := !z.EncBinary()
			yy2arr345 := z.EncBasicHandle().StructToArray
			var yyq345 [4]bool
			_, _, _ = yysep345, yyq345, yy2arr345
			const yyr345 bool = false
			yyq345[0] = x.Kind != ""
			yyq345[1] = x.APIVersion != ""
			yyq345[2] = true
			yyq345[3] = len(x.Data) != 0
			if yyr345 || yy2arr345 {
				r.EncodeArrayStart(4)
			} else {
				var yynn345 int = 0
				for _, b := range yyq345 {
					if b {
						yynn345++
					}
				}
				r.EncodeMapStart(yynn345)
			}
			if yyr345 || yy2arr345 {
				if yyq345[0] {
					yym347 := z.EncBinary()
					_ = yym347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq345[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym348 := z.EncBinary()
					_ = yym348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr345 || yy2arr345 {
				if yyq345[1] {
					yym350 := z.EncBinary()
					_ = yym350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq345[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr345 || yy2arr345 {
				if yyq345[2] {
					yy353 := &x.ObjectMeta
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy353) {
					} else {
						z.EncFallback(yy353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq345[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy355 := &x.ObjectMeta
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy355) {
					} else {
						z.EncFallback(yy355)
					}
				}
			}
			if yyr345 || yy2arr345 {
				if yyq345[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym358 := z.EncBinary()
						_ = yym358
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq345[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym359 := z.EncBinary()
						_ = yym359
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep345 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym360 := z.DecBinary()
	_ = yym360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl361 := r.ReadMapStart()
			if yyl361 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl361, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl361 := r.ReadArrayStart()
			if yyl361 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys362Slc
	var yyhl362 bool = l >= 0
	for yyj362 := 0; ; yyj362++ {
		if yyhl362 {
			if yyj362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys362Slc = r.DecodeBytes(yys362Slc, true, true)
		yys362 := string(yys362Slc)
		switch yys362 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv365 := &x.ObjectMeta
				yym366 := z.DecBinary()
				_ = yym366
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv365) {
				} else {
					z.DecFallback(yyv365, false)
				}
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv367 := &x.Data
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					*yyv367 = r.DecodeBytes(*(*[]byte)(yyv367), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys362)
		} // end switch yys362
	} // end for yyj362
	if !yyhl362 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj369 int
	var yyb369 bool
	var yyhl369 bool = l >= 0
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv372 := &x.ObjectMeta
		yym373 := z.DecBinary()
		_ = yym373
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv372) {
		} else {
			z.DecFallback(yyv372, false)
		}
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv374 := &x.Data
		yym375 := z.DecBinary()
		_ = yym375
		if false {
		} else {
			*yyv374 = r.DecodeBytes(*(*[]byte)(yyv374), false, false)
		}
	}
	for {
		yyj369++
		if yyhl369 {
			yyb369 = yyj369 > l
		} else {
			yyb369 = r.CheckBreak()
		}
		if yyb369 {
			break
		}
		z.DecStructFieldNotFound(yyj369-1, "")
	}
	r.ReadEnd()
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym376 := z.EncBinary()
		_ = yym376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep377 := !z.EncBinary()
			yy2arr377 := z.EncBasicHandle().StructToArray
			var yyq377 [5]bool
			_, _, _ = yysep377, yyq377, yy2arr377
			const yyr377 bool = false
			yyq377[0] = x.Kind != ""
			yyq377[1] = x.APIVersion != ""
			yyq377[2] = true
			yyq377[3] = true
			yyq377[4] = true
			if yyr377 || yy2arr377 {
				r.EncodeArrayStart(5)
			} else {
				var yynn377 int = 0
				for _, b := range yyq377 {
					if b {
						yynn377++
					}
				}
				r.EncodeMapStart(yynn377)
			}
			if yyr377 || yy2arr377 {
				if yyq377[0] {
					yym379 := z.EncBinary()
					_ = yym379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq377[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[1] {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq377[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[2] {
					yy385 := &x.ObjectMeta
					yym386 := z.EncBinary()
					_ = yym386
					if false {
					} else if z.HasExtensions() && z.EncExt(yy385) {
					} else {
						z.EncFallback(yy385)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq377[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy387 := &x.ObjectMeta
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else if z.HasExtensions() && z.EncExt(yy387) {
					} else {
						z.EncFallback(yy387)
					}
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[3] {
					yy390 := &x.Spec
					yy390.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq377[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy391 := &x.Spec
					yy391.CodecEncodeSelf(e)
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[4] {
					yy393 := &x.Status
					yy393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq377[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy394 := &x.Status
					yy394.CodecEncodeSelf(e)
				}
			}
			if yysep377 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym395 := z.DecBinary()
	_ = yym395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl396 := r.ReadMapStart()
			if yyl396 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl396, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl396 := r.ReadArrayStart()
			if yyl396 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys397Slc
	var yyhl397 bool = l >= 0
	for yyj397 := 0; ; yyj397++ {
		if yyhl397 {
			if yyj397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys397Slc = r.DecodeBytes(yys397Slc, true, true)
		yys397 := string(yys397Slc)
		switch yys397 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv400 := &x.ObjectMeta
				yym401 := z.DecBinary()
				_ = yym401
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv400) {
				} else {
					z.DecFallback(yyv400, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv402 := &x.Spec
				yyv402.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv403 := &x.Status
				yyv403.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys397)
		} // end switch yys397
	} // end for yyj397
	if !yyhl397 {
		r.ReadEnd()
	}
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj404 int
	var yyb404 bool
	var yyhl404 bool = l >= 0
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv407 := &x.ObjectMeta
		yym408 := z.DecBinary()
		_ = yym408
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv407) {
		} else {
			z.DecFallback(yyv407, false)
		}
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv409 := &x.Spec
		yyv409.CodecDecodeSelf(d)
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv410 := &x.Status
		yyv410.CodecDecodeSelf(d)
	}
	for {
		yyj404++
		if yyhl404 {
			yyb404 = yyj404 > l
		} else {
			yyb404 = r.CheckBreak()
		}
		if yyb404 {
			break
		}
		z.DecStructFieldNotFound(yyj404-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym411 := z.EncBinary()
		_ = yym411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep412 := !z.EncBinary()
			yy2arr412 := z.EncBasicHandle().StructToArray
			var yyq412 [5]bool
			_, _, _ = yysep412, yyq412, yy2arr412
			const yyr412 bool = false
			yyq412[0] = x.Replicas != nil
			yyq412[1] = len(x.Selector) != 0
			yyq412[2] = x.Template != nil
			yyq412[3] = true
			yyq412[4] = x.UniqueLabelKey != nil
			if yyr412 || yy2arr412 {
				r.EncodeArrayStart(5)
			} else {
				var yynn412 int = 0
				for _, b := range yyq412 {
					if b {
						yynn412++
					}
				}
				r.EncodeMapStart(yynn412)
			}
			if yyr412 || yy2arr412 {
				if yyq412[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy414 := *x.Replicas
						yym415 := z.EncBinary()
						_ = yym415
						if false {
						} else {
							r.EncodeInt(int64(yy414))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy416 := *x.Replicas
						yym417 := z.EncBinary()
						_ = yym417
						if false {
						} else {
							r.EncodeInt(int64(yy416))
						}
					}
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym419 := z.EncBinary()
						_ = yym419
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym422 := z.EncBinary()
						_ = yym422
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym423 := z.EncBinary()
						_ = yym423
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[3] {
					yy425 := &x.Strategy
					yy425.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[3] {
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					yy426 := &x.Strategy
					yy426.CodecEncodeSelf(e)
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[4] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy428 := *x.UniqueLabelKey
						yym429 := z.EncBinary()
						_ = yym429
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy428))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy430 := *x.UniqueLabelKey
						yym431 := z.EncBinary()
						_ = yym431
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy430))
						}
					}
				}
			}
			if yysep412 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym432 := z.DecBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl433 := r.ReadMapStart()
			if yyl433 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl433, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl433 := r.ReadArrayStart()
			if yyl433 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys434Slc
	var yyhl434 bool = l >= 0
	for yyj434 := 0; ; yyj434++ {
		if yyhl434 {
			if yyj434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys434Slc = r.DecodeBytes(yys434Slc, true, true)
		yys434 := string(yys434Slc)
		switch yys434 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym436 := z.DecBinary()
				_ = yym436
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv437 := &x.Selector
				yym438 := z.DecBinary()
				_ = yym438
				if false {
				} else {
					z.F.DecMapStringStringX(yyv437, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				yym440 := z.DecBinary()
				_ = yym440
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv441 := &x.Strategy
				yyv441.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys434)
		} // end switch yys434
	} // end for yyj434
	if !yyhl434 {
		r.ReadEnd()
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym446 := z.DecBinary()
		_ = yym446
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv447 := &x.Selector
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else {
			z.F.DecMapStringStringX(yyv447, false, d)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv451 := &x.Strategy
		yyv451.CodecDecodeSelf(d)
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym453 := z.DecBinary()
		_ = yym453
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym454 := z.EncBinary()
		_ = yym454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep455 := !z.EncBinary()
			yy2arr455 := z.EncBasicHandle().StructToArray
			var yyq455 [2]bool
			_, _, _ = yysep455, yyq455, yy2arr455
			const yyr455 bool = false
			yyq455[0] = x.Type != ""
			yyq455[1] = x.RollingUpdate != nil
			if yyr455 || yy2arr455 {
				r.EncodeArrayStart(2)
			} else {
				var yynn455 int = 0
				for _, b := range yyq455 {
					if b {
						yynn455++
					}
				}
				r.EncodeMapStart(yynn455)
			}
			if yyr455 || yy2arr455 {
				if yyq455[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq455[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr455 || yy2arr455 {
				if yyq455[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq455[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yysep455 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym458 := z.DecBinary()
	_ = yym458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl459 := r.ReadMapStart()
			if yyl459 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl459, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl459 := r.ReadArrayStart()
			if yyl459 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys460Slc
	var yyhl460 bool = l >= 0
	for yyj460 := 0; ; yyj460++ {
		if yyhl460 {
			if yyj460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys460Slc = r.DecodeBytes(yys460Slc, true, true)
		yys460 := string(yys460Slc)
		switch yys460 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys460)
		} // end switch yys460
	} // end for yyj460
	if !yyhl460 {
		r.ReadEnd()
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj463 int
	var yyb463 bool
	var yyhl463 bool = l >= 0
	yyj463++
	if yyhl463 {
		yyb463 = yyj463 > l
	} else {
		yyb463 = r.CheckBreak()
	}
	if yyb463 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj463++
	if yyhl463 {
		yyb463 = yyj463 > l
	} else {
		yyb463 = r.CheckBreak()
	}
	if yyb463 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj463++
		if yyhl463 {
			yyb463 = yyj463 > l
		} else {
			yyb463 = r.CheckBreak()
		}
		if yyb463 {
			break
		}
		z.DecStructFieldNotFound(yyj463-1, "")
	}
	r.ReadEnd()
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym466 := z.EncBinary()
	_ = yym466
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym467 := z.DecBinary()
	_ = yym467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym468 := z.EncBinary()
		_ = yym468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep469 := !z.EncBinary()
			yy2arr469 := z.EncBasicHandle().StructToArray
			var yyq469 [3]bool
			_, _, _ = yysep469, yyq469, yy2arr469
			const yyr469 bool = false
			yyq469[0] = x.MaxUnavailable != nil
			yyq469[1] = x.MaxSurge != nil
			yyq469[2] = x.MinReadySeconds != 0
			if yyr469 || yy2arr469 {
				r.EncodeArrayStart(3)
			} else {
				var yynn469 int = 0
				for _, b := range yyq469 {
					if b {
						yynn469++
					}
				}
				r.EncodeMapStart(yynn469)
			}
			if yyr469 || yy2arr469 {
				if yyq469[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym471 := z.EncBinary()
						_ = yym471
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym471 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[0] {
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym472 := z.EncBinary()
						_ = yym472
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym472 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr469 || yy2arr469 {
				if yyq469[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym474 := z.EncBinary()
						_ = yym474
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym474 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[1] {
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym475 := z.EncBinary()
						_ = yym475
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym475 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr469 || yy2arr469 {
				if yyq469[2] {
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq469[2] {
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yysep469 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym479 := z.DecBinary()
	_ = yym479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl480 := r.ReadMapStart()
			if yyl480 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl480, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl480 := r.ReadArrayStart()
			if yyl480 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl480, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys481Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys481Slc
	var yyhl481 bool = l >= 0
	for yyj481 := 0; ; yyj481++ {
		if yyhl481 {
			if yyj481 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys481Slc = r.DecodeBytes(yys481Slc, true, true)
		yys481 := string(yys481Slc)
		switch yys481 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_util.IntOrString)
				}
				yym483 := z.DecBinary()
				_ = yym483
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym483 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg6_util.IntOrString)
				}
				yym485 := z.DecBinary()
				_ = yym485
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym485 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys481)
		} // end switch yys481
	} // end for yyj481
	if !yyhl481 {
		r.ReadEnd()
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj487 int
	var yyb487 bool
	var yyhl487 bool = l >= 0
	yyj487++
	if yyhl487 {
		yyb487 = yyj487 > l
	} else {
		yyb487 = r.CheckBreak()
	}
	if yyb487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_util.IntOrString)
		}
		yym489 := z.DecBinary()
		_ = yym489
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym489 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj487++
	if yyhl487 {
		yyb487 = yyj487 > l
	} else {
		yyb487 = r.CheckBreak()
	}
	if yyb487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg6_util.IntOrString)
		}
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym491 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	yyj487++
	if yyhl487 {
		yyb487 = yyj487 > l
	} else {
		yyb487 = r.CheckBreak()
	}
	if yyb487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj487++
		if yyhl487 {
			yyb487 = yyj487 > l
		} else {
			yyb487 = r.CheckBreak()
		}
		if yyb487 {
			break
		}
		z.DecStructFieldNotFound(yyj487-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym493 := z.EncBinary()
		_ = yym493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep494 := !z.EncBinary()
			yy2arr494 := z.EncBasicHandle().StructToArray
			var yyq494 [2]bool
			_, _, _ = yysep494, yyq494, yy2arr494
			const yyr494 bool = false
			yyq494[0] = x.Replicas != 0
			yyq494[1] = x.UpdatedReplicas != 0
			if yyr494 || yy2arr494 {
				r.EncodeArrayStart(2)
			} else {
				var yynn494 int = 0
				for _, b := range yyq494 {
					if b {
						yynn494++
					}
				}
				r.EncodeMapStart(yynn494)
			}
			if yyr494 || yy2arr494 {
				if yyq494[0] {
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq494[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr494 || yy2arr494 {
				if yyq494[1] {
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq494[1] {
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yysep494 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym501 := z.DecBinary()
	_ = yym501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl502 := r.ReadMapStart()
			if yyl502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl502, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl502 := r.ReadArrayStart()
			if yyl502 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys503Slc
	var yyhl503 bool = l >= 0
	for yyj503 := 0; ; yyj503++ {
		if yyhl503 {
			if yyj503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys503Slc = r.DecodeBytes(yys503Slc, true, true)
		yys503 := string(yys503Slc)
		switch yys503 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys503)
		} // end switch yys503
	} // end for yyj503
	if !yyhl503 {
		r.ReadEnd()
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj506 int
	var yyb506 bool
	var yyhl506 bool = l >= 0
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj506++
		if yyhl506 {
			yyb506 = yyj506 > l
		} else {
			yyb506 = r.CheckBreak()
		}
		if yyb506 {
			break
		}
		z.DecStructFieldNotFound(yyj506-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym509 := z.EncBinary()
		_ = yym509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep510 := !z.EncBinary()
			yy2arr510 := z.EncBasicHandle().StructToArray
			var yyq510 [4]bool
			_, _, _ = yysep510, yyq510, yy2arr510
			const yyr510 bool = false
			yyq510[0] = x.Kind != ""
			yyq510[1] = x.APIVersion != ""
			yyq510[2] = true
			if yyr510 || yy2arr510 {
				r.EncodeArrayStart(4)
			} else {
				var yynn510 int = 1
				for _, b := range yyq510 {
					if b {
						yynn510++
					}
				}
				r.EncodeMapStart(yynn510)
			}
			if yyr510 || yy2arr510 {
				if yyq510[0] {
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq510[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr510 || yy2arr510 {
				if yyq510[1] {
					yym515 := z.EncBinary()
					_ = yym515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq510[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr510 || yy2arr510 {
				if yyq510[2] {
					yy518 := &x.ListMeta
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else if z.HasExtensions() && z.EncExt(yy518) {
					} else {
						z.EncFallback(yy518)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq510[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy520 := &x.ListMeta
					yym521 := z.EncBinary()
					_ = yym521
					if false {
					} else if z.HasExtensions() && z.EncExt(yy520) {
					} else {
						z.EncFallback(yy520)
					}
				}
			}
			if yyr510 || yy2arr510 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym524 := z.EncBinary()
					_ = yym524
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yysep510 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl526 := r.ReadMapStart()
			if yyl526 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl526, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl526 := r.ReadArrayStart()
			if yyl526 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys527Slc
	var yyhl527 bool = l >= 0
	for yyj527 := 0; ; yyj527++ {
		if yyhl527 {
			if yyj527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys527Slc = r.DecodeBytes(yys527Slc, true, true)
		yys527 := string(yys527Slc)
		switch yys527 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv530 := &x.ListMeta
				yym531 := z.DecBinary()
				_ = yym531
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv530) {
				} else {
					z.DecFallback(yyv530, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv532 := &x.Items
				yym533 := z.DecBinary()
				_ = yym533
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv532), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys527)
		} // end switch yys527
	} // end for yyj527
	if !yyhl527 {
		r.ReadEnd()
	}
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj534 int
	var yyb534 bool
	var yyhl534 bool = l >= 0
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv537 := &x.ListMeta
		yym538 := z.DecBinary()
		_ = yym538
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv537) {
		} else {
			z.DecFallback(yyv537, false)
		}
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv539 := &x.Items
		yym540 := z.DecBinary()
		_ = yym540
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv539), d)
		}
	}
	for {
		yyj534++
		if yyhl534 {
			yyb534 = yyj534 > l
		} else {
			yyb534 = r.CheckBreak()
		}
		if yyb534 {
			break
		}
		z.DecStructFieldNotFound(yyj534-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym541 := z.EncBinary()
		_ = yym541
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep542 := !z.EncBinary()
			yy2arr542 := z.EncBasicHandle().StructToArray
			var yyq542 [2]bool
			_, _, _ = yysep542, yyq542, yy2arr542
			const yyr542 bool = false
			yyq542[0] = len(x.Selector) != 0
			yyq542[1] = x.Template != nil
			if yyr542 || yy2arr542 {
				r.EncodeArrayStart(2)
			} else {
				var yynn542 int = 0
				for _, b := range yyq542 {
					if b {
						yynn542++
					}
				}
				r.EncodeMapStart(yynn542)
			}
			if yyr542 || yy2arr542 {
				if yyq542[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym544 := z.EncBinary()
						_ = yym544
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq542[0] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym545 := z.EncBinary()
						_ = yym545
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr542 || yy2arr542 {
				if yyq542[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym547 := z.EncBinary()
						_ = yym547
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq542[1] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym548 := z.EncBinary()
						_ = yym548
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yysep542 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym549 := z.DecBinary()
	_ = yym549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl550 := r.ReadMapStart()
			if yyl550 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl550, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl550 := r.ReadArrayStart()
			if yyl550 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys551Slc
	var yyhl551 bool = l >= 0
	for yyj551 := 0; ; yyj551++ {
		if yyhl551 {
			if yyj551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys551Slc = r.DecodeBytes(yys551Slc, true, true)
		yys551 := string(yys551Slc)
		switch yys551 {
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv552 := &x.Selector
				yym553 := z.DecBinary()
				_ = yym553
				if false {
				} else {
					z.F.DecMapStringStringX(yyv552, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				yym555 := z.DecBinary()
				_ = yym555
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys551)
		} // end switch yys551
	} // end for yyj551
	if !yyhl551 {
		r.ReadEnd()
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj556 int
	var yyb556 bool
	var yyhl556 bool = l >= 0
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv557 := &x.Selector
		yym558 := z.DecBinary()
		_ = yym558
		if false {
		} else {
			z.F.DecMapStringStringX(yyv557, false, d)
		}
	}
	yyj556++
	if yyhl556 {
		yyb556 = yyj556 > l
	} else {
		yyb556 = r.CheckBreak()
	}
	if yyb556 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		yym560 := z.DecBinary()
		_ = yym560
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	for {
		yyj556++
		if yyhl556 {
			yyb556 = yyj556 > l
		} else {
			yyb556 = r.CheckBreak()
		}
		if yyb556 {
			break
		}
		z.DecStructFieldNotFound(yyj556-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym561 := z.EncBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep562 := !z.EncBinary()
			yy2arr562 := z.EncBasicHandle().StructToArray
			var yyq562 [3]bool
			_, _, _ = yysep562, yyq562, yy2arr562
			const yyr562 bool = false
			if yyr562 || yy2arr562 {
				r.EncodeArrayStart(3)
			} else {
				var yynn562 int = 3
				for _, b := range yyq562 {
					if b {
						yynn562++
					}
				}
				r.EncodeMapStart(yynn562)
			}
			if yyr562 || yy2arr562 {
				yym564 := z.EncBinary()
				_ = yym564
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr562 || yy2arr562 {
				yym567 := z.EncBinary()
				_ = yym567
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				yym568 := z.EncBinary()
				_ = yym568
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr562 || yy2arr562 {
				yym570 := z.EncBinary()
				_ = yym570
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yysep562 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym572 := z.DecBinary()
	_ = yym572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl573 := r.ReadMapStart()
			if yyl573 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl573, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl573 := r.ReadArrayStart()
			if yyl573 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl573, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys574Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys574Slc
	var yyhl574 bool = l >= 0
	for yyj574 := 0; ; yyj574++ {
		if yyhl574 {
			if yyj574 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys574Slc = r.DecodeBytes(yys574Slc, true, true)
		yys574 := string(yys574Slc)
		switch yys574 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys574)
		} // end switch yys574
	} // end for yyj574
	if !yyhl574 {
		r.ReadEnd()
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym582 := z.EncBinary()
		_ = yym582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep583 := !z.EncBinary()
			yy2arr583 := z.EncBasicHandle().StructToArray
			var yyq583 [5]bool
			_, _, _ = yysep583, yyq583, yy2arr583
			const yyr583 bool = false
			yyq583[0] = x.Kind != ""
			yyq583[1] = x.APIVersion != ""
			yyq583[2] = true
			yyq583[3] = true
			yyq583[4] = true
			if yyr583 || yy2arr583 {
				r.EncodeArrayStart(5)
			} else {
				var yynn583 int = 0
				for _, b := range yyq583 {
					if b {
						yynn583++
					}
				}
				r.EncodeMapStart(yynn583)
			}
			if yyr583 || yy2arr583 {
				if yyq583[0] {
					yym585 := z.EncBinary()
					_ = yym585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq583[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr583 || yy2arr583 {
				if yyq583[1] {
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq583[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr583 || yy2arr583 {
				if yyq583[2] {
					yy591 := &x.ObjectMeta
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else if z.HasExtensions() && z.EncExt(yy591) {
					} else {
						z.EncFallback(yy591)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq583[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy593 := &x.ObjectMeta
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else if z.HasExtensions() && z.EncExt(yy593) {
					} else {
						z.EncFallback(yy593)
					}
				}
			}
			if yyr583 || yy2arr583 {
				if yyq583[3] {
					yy596 := &x.Spec
					yy596.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq583[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy597 := &x.Spec
					yy597.CodecEncodeSelf(e)
				}
			}
			if yyr583 || yy2arr583 {
				if yyq583[4] {
					yy599 := &x.Status
					yy599.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq583[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy600 := &x.Status
					yy600.CodecEncodeSelf(e)
				}
			}
			if yysep583 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl602 := r.ReadMapStart()
			if yyl602 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl602, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl602 := r.ReadArrayStart()
			if yyl602 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys603Slc
	var yyhl603 bool = l >= 0
	for yyj603 := 0; ; yyj603++ {
		if yyhl603 {
			if yyj603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys603Slc = r.DecodeBytes(yys603Slc, true, true)
		yys603 := string(yys603Slc)
		switch yys603 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv606 := &x.ObjectMeta
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv606) {
				} else {
					z.DecFallback(yyv606, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv608 := &x.Spec
				yyv608.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv609 := &x.Status
				yyv609.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys603)
		} // end switch yys603
	} // end for yyj603
	if !yyhl603 {
		r.ReadEnd()
	}
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj610 int
	var yyb610 bool
	var yyhl610 bool = l >= 0
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv613 := &x.ObjectMeta
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv613) {
		} else {
			z.DecFallback(yyv613, false)
		}
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv615 := &x.Spec
		yyv615.CodecDecodeSelf(d)
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv616 := &x.Status
		yyv616.CodecDecodeSelf(d)
	}
	for {
		yyj610++
		if yyhl610 {
			yyb610 = yyj610 > l
		} else {
			yyb610 = r.CheckBreak()
		}
		if yyb610 {
			break
		}
		z.DecStructFieldNotFound(yyj610-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym617 := z.EncBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep618 := !z.EncBinary()
			yy2arr618 := z.EncBasicHandle().StructToArray
			var yyq618 [4]bool
			_, _, _ = yysep618, yyq618, yy2arr618
			const yyr618 bool = false
			yyq618[0] = x.Kind != ""
			yyq618[1] = x.APIVersion != ""
			yyq618[2] = true
			if yyr618 || yy2arr618 {
				r.EncodeArrayStart(4)
			} else {
				var yynn618 int = 1
				for _, b := range yyq618 {
					if b {
						yynn618++
					}
				}
				r.EncodeMapStart(yynn618)
			}
			if yyr618 || yy2arr618 {
				if yyq618[0] {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr618 || yy2arr618 {
				if yyq618[1] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr618 || yy2arr618 {
				if yyq618[2] {
					yy626 := &x.ListMeta
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy626) {
					} else {
						z.EncFallback(yy626)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq618[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy628 := &x.ListMeta
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else if z.HasExtensions() && z.EncExt(yy628) {
					} else {
						z.EncFallback(yy628)
					}
				}
			}
			if yyr618 || yy2arr618 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yysep618 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym633 := z.DecBinary()
	_ = yym633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl634 := r.ReadMapStart()
			if yyl634 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl634, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl634 := r.ReadArrayStart()
			if yyl634 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys635Slc
	var yyhl635 bool = l >= 0
	for yyj635 := 0; ; yyj635++ {
		if yyhl635 {
			if yyj635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys635Slc = r.DecodeBytes(yys635Slc, true, true)
		yys635 := string(yys635Slc)
		switch yys635 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv638 := &x.ListMeta
				yym639 := z.DecBinary()
				_ = yym639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv638) {
				} else {
					z.DecFallback(yyv638, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv640 := &x.Items
				yym641 := z.DecBinary()
				_ = yym641
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv640), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys635)
		} // end switch yys635
	} // end for yyj635
	if !yyhl635 {
		r.ReadEnd()
	}
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj642 int
	var yyb642 bool
	var yyhl642 bool = l >= 0
	yyj642++
	if yyhl642 {
		yyb642 = yyj642 > l
	} else {
		yyb642 = r.CheckBreak()
	}
	if yyb642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj642++
	if yyhl642 {
		yyb642 = yyj642 > l
	} else {
		yyb642 = r.CheckBreak()
	}
	if yyb642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj642++
	if yyhl642 {
		yyb642 = yyj642 > l
	} else {
		yyb642 = r.CheckBreak()
	}
	if yyb642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv645 := &x.ListMeta
		yym646 := z.DecBinary()
		_ = yym646
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv645) {
		} else {
			z.DecFallback(yyv645, false)
		}
	}
	yyj642++
	if yyhl642 {
		yyb642 = yyj642 > l
	} else {
		yyb642 = r.CheckBreak()
	}
	if yyb642 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv647 := &x.Items
		yym648 := z.DecBinary()
		_ = yym648
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv647), d)
		}
	}
	for {
		yyj642++
		if yyhl642 {
			yyb642 = yyj642 > l
		} else {
			yyb642 = r.CheckBreak()
		}
		if yyb642 {
			break
		}
		z.DecStructFieldNotFound(yyj642-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym649 := z.EncBinary()
		_ = yym649
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep650 := !z.EncBinary()
			yy2arr650 := z.EncBasicHandle().StructToArray
			var yyq650 [4]bool
			_, _, _ = yysep650, yyq650, yy2arr650
			const yyr650 bool = false
			yyq650[0] = x.Kind != ""
			yyq650[1] = x.APIVersion != ""
			yyq650[2] = true
			if yyr650 || yy2arr650 {
				r.EncodeArrayStart(4)
			} else {
				var yynn650 int = 1
				for _, b := range yyq650 {
					if b {
						yynn650++
					}
				}
				r.EncodeMapStart(yynn650)
			}
			if yyr650 || yy2arr650 {
				if yyq650[0] {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq650[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr650 || yy2arr650 {
				if yyq650[1] {
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq650[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr650 || yy2arr650 {
				if yyq650[2] {
					yy658 := &x.ListMeta
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else if z.HasExtensions() && z.EncExt(yy658) {
					} else {
						z.EncFallback(yy658)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq650[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy660 := &x.ListMeta
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else if z.HasExtensions() && z.EncExt(yy660) {
					} else {
						z.EncFallback(yy660)
					}
				}
			}
			if yyr650 || yy2arr650 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym664 := z.EncBinary()
					_ = yym664
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yysep650 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym665 := z.DecBinary()
	_ = yym665
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl666 := r.ReadMapStart()
			if yyl666 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl666, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl666 := r.ReadArrayStart()
			if yyl666 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl666, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys667Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys667Slc
	var yyhl667 bool = l >= 0
	for yyj667 := 0; ; yyj667++ {
		if yyhl667 {
			if yyj667 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys667Slc = r.DecodeBytes(yys667Slc, true, true)
		yys667 := string(yys667Slc)
		switch yys667 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv670 := &x.ListMeta
				yym671 := z.DecBinary()
				_ = yym671
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv670) {
				} else {
					z.DecFallback(yyv670, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv672 := &x.Items
				yym673 := z.DecBinary()
				_ = yym673
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv672), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys667)
		} // end switch yys667
	} // end for yyj667
	if !yyhl667 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv677 := &x.ListMeta
		yym678 := z.DecBinary()
		_ = yym678
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv677) {
		} else {
			z.DecFallback(yyv677, false)
		}
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv679 := &x.Items
		yym680 := z.DecBinary()
		_ = yym680
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv679), d)
		}
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym681 := z.EncBinary()
		_ = yym681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep682 := !z.EncBinary()
			yy2arr682 := z.EncBasicHandle().StructToArray
			var yyq682 [5]bool
			_, _, _ = yysep682, yyq682, yy2arr682
			const yyr682 bool = false
			yyq682[0] = x.Kind != ""
			yyq682[1] = x.APIVersion != ""
			yyq682[2] = true
			yyq682[3] = true
			yyq682[4] = true
			if yyr682 || yy2arr682 {
				r.EncodeArrayStart(5)
			} else {
				var yynn682 int = 0
				for _, b := range yyq682 {
					if b {
						yynn682++
					}
				}
				r.EncodeMapStart(yynn682)
			}
			if yyr682 || yy2arr682 {
				if yyq682[0] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq682[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr682 || yy2arr682 {
				if yyq682[1] {
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq682[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr682 || yy2arr682 {
				if yyq682[2] {
					yy690 := &x.ObjectMeta
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else if z.HasExtensions() && z.EncExt(yy690) {
					} else {
						z.EncFallback(yy690)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq682[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy692 := &x.ObjectMeta
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else if z.HasExtensions() && z.EncExt(yy692) {
					} else {
						z.EncFallback(yy692)
					}
				}
			}
			if yyr682 || yy2arr682 {
				if yyq682[3] {
					yy695 := &x.Spec
					yy695.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq682[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy696 := &x.Spec
					yy696.CodecEncodeSelf(e)
				}
			}
			if yyr682 || yy2arr682 {
				if yyq682[4] {
					yy698 := &x.Status
					yy698.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq682[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy699 := &x.Status
					yy699.CodecEncodeSelf(e)
				}
			}
			if yysep682 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym700 := z.DecBinary()
	_ = yym700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl701 := r.ReadMapStart()
			if yyl701 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl701, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl701 := r.ReadArrayStart()
			if yyl701 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys702Slc
	var yyhl702 bool = l >= 0
	for yyj702 := 0; ; yyj702++ {
		if yyhl702 {
			if yyj702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys702Slc = r.DecodeBytes(yys702Slc, true, true)
		yys702 := string(yys702Slc)
		switch yys702 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv705 := &x.ObjectMeta
				yym706 := z.DecBinary()
				_ = yym706
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv705) {
				} else {
					z.DecFallback(yyv705, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv707 := &x.Spec
				yyv707.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv708 := &x.Status
				yyv708.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys702)
		} // end switch yys702
	} // end for yyj702
	if !yyhl702 {
		r.ReadEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj709 int
	var yyb709 bool
	var yyhl709 bool = l >= 0
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv712 := &x.ObjectMeta
		yym713 := z.DecBinary()
		_ = yym713
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv712) {
		} else {
			z.DecFallback(yyv712, false)
		}
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv714 := &x.Spec
		yyv714.CodecDecodeSelf(d)
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv715 := &x.Status
		yyv715.CodecDecodeSelf(d)
	}
	for {
		yyj709++
		if yyhl709 {
			yyb709 = yyj709 > l
		} else {
			yyb709 = r.CheckBreak()
		}
		if yyb709 {
			break
		}
		z.DecStructFieldNotFound(yyj709-1, "")
	}
	r.ReadEnd()
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym716 := z.EncBinary()
		_ = yym716
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep717 := !z.EncBinary()
			yy2arr717 := z.EncBasicHandle().StructToArray
			var yyq717 [4]bool
			_, _, _ = yysep717, yyq717, yy2arr717
			const yyr717 bool = false
			yyq717[0] = x.Kind != ""
			yyq717[1] = x.APIVersion != ""
			yyq717[2] = true
			if yyr717 || yy2arr717 {
				r.EncodeArrayStart(4)
			} else {
				var yynn717 int = 1
				for _, b := range yyq717 {
					if b {
						yynn717++
					}
				}
				r.EncodeMapStart(yynn717)
			}
			if yyr717 || yy2arr717 {
				if yyq717[0] {
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq717[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr717 || yy2arr717 {
				if yyq717[1] {
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq717[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr717 || yy2arr717 {
				if yyq717[2] {
					yy725 := &x.ListMeta
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else if z.HasExtensions() && z.EncExt(yy725) {
					} else {
						z.EncFallback(yy725)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq717[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy727 := &x.ListMeta
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else if z.HasExtensions() && z.EncExt(yy727) {
					} else {
						z.EncFallback(yy727)
					}
				}
			}
			if yyr717 || yy2arr717 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yysep717 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym732 := z.DecBinary()
	_ = yym732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl733 := r.ReadMapStart()
			if yyl733 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl733, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl733 := r.ReadArrayStart()
			if yyl733 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys734Slc
	var yyhl734 bool = l >= 0
	for yyj734 := 0; ; yyj734++ {
		if yyhl734 {
			if yyj734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys734Slc = r.DecodeBytes(yys734Slc, true, true)
		yys734 := string(yys734Slc)
		switch yys734 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv737 := &x.ListMeta
				yym738 := z.DecBinary()
				_ = yym738
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv737) {
				} else {
					z.DecFallback(yyv737, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv739 := &x.Items
				yym740 := z.DecBinary()
				_ = yym740
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv739), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys734)
		} // end switch yys734
	} // end for yyj734
	if !yyhl734 {
		r.ReadEnd()
	}
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj741 int
	var yyb741 bool
	var yyhl741 bool = l >= 0
	yyj741++
	if yyhl741 {
		yyb741 = yyj741 > l
	} else {
		yyb741 = r.CheckBreak()
	}
	if yyb741 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj741++
	if yyhl741 {
		yyb741 = yyj741 > l
	} else {
		yyb741 = r.CheckBreak()
	}
	if yyb741 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj741++
	if yyhl741 {
		yyb741 = yyj741 > l
	} else {
		yyb741 = r.CheckBreak()
	}
	if yyb741 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv744 := &x.ListMeta
		yym745 := z.DecBinary()
		_ = yym745
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv744) {
		} else {
			z.DecFallback(yyv744, false)
		}
	}
	yyj741++
	if yyhl741 {
		yyb741 = yyj741 > l
	} else {
		yyb741 = r.CheckBreak()
	}
	if yyb741 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv746 := &x.Items
		yym747 := z.DecBinary()
		_ = yym747
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv746), d)
		}
	}
	for {
		yyj741++
		if yyhl741 {
			yyb741 = yyj741 > l
		} else {
			yyb741 = r.CheckBreak()
		}
		if yyb741 {
			break
		}
		z.DecStructFieldNotFound(yyj741-1, "")
	}
	r.ReadEnd()
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym748 := z.EncBinary()
		_ = yym748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep749 := !z.EncBinary()
			yy2arr749 := z.EncBasicHandle().StructToArray
			var yyq749 [4]bool
			_, _, _ = yysep749, yyq749, yy2arr749
			const yyr749 bool = false
			yyq749[0] = x.Parallelism != nil
			yyq749[1] = x.Completions != nil
			yyq749[2] = x.Selector != nil
			if yyr749 || yy2arr749 {
				r.EncodeArrayStart(4)
			} else {
				var yynn749 int = 1
				for _, b := range yyq749 {
					if b {
						yynn749++
					}
				}
				r.EncodeMapStart(yynn749)
			}
			if yyr749 || yy2arr749 {
				if yyq749[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy751 := *x.Parallelism
						yym752 := z.EncBinary()
						_ = yym752
						if false {
						} else {
							r.EncodeInt(int64(yy751))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq749[0] {
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy753 := *x.Parallelism
						yym754 := z.EncBinary()
						_ = yym754
						if false {
						} else {
							r.EncodeInt(int64(yy753))
						}
					}
				}
			}
			if yyr749 || yy2arr749 {
				if yyq749[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy756 := *x.Completions
						yym757 := z.EncBinary()
						_ = yym757
						if false {
						} else {
							r.EncodeInt(int64(yy756))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq749[1] {
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy758 := *x.Completions
						yym759 := z.EncBinary()
						_ = yym759
						if false {
						} else {
							r.EncodeInt(int64(yy758))
						}
					}
				}
			}
			if yyr749 || yy2arr749 {
				if yyq749[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq749[2] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr749 || yy2arr749 {
				yy762 := &x.Template
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else if z.HasExtensions() && z.EncExt(yy762) {
				} else {
					z.EncFallback(yy762)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy764 := &x.Template
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else if z.HasExtensions() && z.EncExt(yy764) {
				} else {
					z.EncFallback(yy764)
				}
			}
			if yysep749 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl767 := r.ReadMapStart()
			if yyl767 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl767, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl767 := r.ReadArrayStart()
			if yyl767 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys768Slc
	var yyhl768 bool = l >= 0
	for yyj768 := 0; ; yyj768++ {
		if yyhl768 {
			if yyj768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys768Slc = r.DecodeBytes(yys768Slc, true, true)
		yys768 := string(yys768Slc)
		switch yys768 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym770 := z.DecBinary()
				_ = yym770
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym772 := z.DecBinary()
				_ = yym772
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv774 := &x.Template
				yym775 := z.DecBinary()
				_ = yym775
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv774) {
				} else {
					z.DecFallback(yyv774, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys768)
		} // end switch yys768
	} // end for yyj768
	if !yyhl768 {
		r.ReadEnd()
	}
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj776 int
	var yyb776 bool
	var yyhl776 bool = l >= 0
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym778 := z.DecBinary()
		_ = yym778
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym780 := z.DecBinary()
		_ = yym780
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj776++
	if yyhl776 {
		yyb776 = yyj776 > l
	} else {
		yyb776 = r.CheckBreak()
	}
	if yyb776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv782 := &x.Template
		yym783 := z.DecBinary()
		_ = yym783
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv782) {
		} else {
			z.DecFallback(yyv782, false)
		}
	}
	for {
		yyj776++
		if yyhl776 {
			yyb776 = yyj776 > l
		} else {
			yyb776 = r.CheckBreak()
		}
		if yyb776 {
			break
		}
		z.DecStructFieldNotFound(yyj776-1, "")
	}
	r.ReadEnd()
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [6]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[0] = len(x.Conditions) != 0
			yyq785[1] = x.StartTime != nil
			yyq785[2] = x.CompletionTime != nil
			yyq785[3] = x.Active != 0
			yyq785[4] = x.Succeeded != 0
			yyq785[5] = x.Failed != 0
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(6)
			} else {
				var yynn785 int = 0
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if yyq785[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym787 := z.EncBinary()
						_ = yym787
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq785[0] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym788 := z.EncBinary()
						_ = yym788
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym790 := z.EncBinary()
						_ = yym790
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym790 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym790 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq785[1] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym791 := z.EncBinary()
						_ = yym791
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym791 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym791 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym793 := z.EncBinary()
						_ = yym793
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym793 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym793 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq785[2] {
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym794 := z.EncBinary()
						_ = yym794
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym794 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym794 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[4] {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq785[4] {
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[5] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq785[5] {
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym804 := z.DecBinary()
	_ = yym804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl805 := r.ReadMapStart()
			if yyl805 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl805, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl805 := r.ReadArrayStart()
			if yyl805 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl805, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys806Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys806Slc
	var yyhl806 bool = l >= 0
	for yyj806 := 0; ; yyj806++ {
		if yyhl806 {
			if yyj806 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys806Slc = r.DecodeBytes(yys806Slc, true, true)
		yys806 := string(yys806Slc)
		switch yys806 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv807 := &x.Conditions
				yym808 := z.DecBinary()
				_ = yym808
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv807), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym810 := z.DecBinary()
				_ = yym810
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym810 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym810 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym812 := z.DecBinary()
				_ = yym812
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym812 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym812 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys806)
		} // end switch yys806
	} // end for yyj806
	if !yyhl806 {
		r.ReadEnd()
	}
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj816 int
	var yyb816 bool
	var yyhl816 bool = l >= 0
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv817 := &x.Conditions
		yym818 := z.DecBinary()
		_ = yym818
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv817), d)
		}
	}
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym820 := z.DecBinary()
		_ = yym820
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym820 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym820 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym822 := z.DecBinary()
		_ = yym822
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym822 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym822 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj816++
	if yyhl816 {
		yyb816 = yyj816 > l
	} else {
		yyb816 = r.CheckBreak()
	}
	if yyb816 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj816++
		if yyhl816 {
			yyb816 = yyj816 > l
		} else {
			yyb816 = r.CheckBreak()
		}
		if yyb816 {
			break
		}
		z.DecStructFieldNotFound(yyj816-1, "")
	}
	r.ReadEnd()
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym826 := z.EncBinary()
	_ = yym826
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym827 := z.DecBinary()
	_ = yym827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym828 := z.EncBinary()
		_ = yym828
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep829 := !z.EncBinary()
			yy2arr829 := z.EncBasicHandle().StructToArray
			var yyq829 [6]bool
			_, _, _ = yysep829, yyq829, yy2arr829
			const yyr829 bool = false
			yyq829[2] = true
			yyq829[3] = true
			yyq829[4] = x.Reason != ""
			yyq829[5] = x.Message != ""
			if yyr829 || yy2arr829 {
				r.EncodeArrayStart(6)
			} else {
				var yynn829 int = 2
				for _, b := range yyq829 {
					if b {
						yynn829++
					}
				}
				r.EncodeMapStart(yynn829)
			}
			if yyr829 || yy2arr829 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr829 || yy2arr829 {
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr829 || yy2arr829 {
				if yyq829[2] {
					yy835 := &x.LastProbeTime
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else if z.HasExtensions() && z.EncExt(yy835) {
					} else if yym836 {
						z.EncBinaryMarshal(yy835)
					} else if !yym836 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy835)
					} else {
						z.EncFallback(yy835)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq829[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy837 := &x.LastProbeTime
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else if z.HasExtensions() && z.EncExt(yy837) {
					} else if yym838 {
						z.EncBinaryMarshal(yy837)
					} else if !yym838 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy837)
					} else {
						z.EncFallback(yy837)
					}
				}
			}
			if yyr829 || yy2arr829 {
				if yyq829[3] {
					yy840 := &x.LastTransitionTime
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else if z.HasExtensions() && z.EncExt(yy840) {
					} else if yym841 {
						z.EncBinaryMarshal(yy840)
					} else if !yym841 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy840)
					} else {
						z.EncFallback(yy840)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq829[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy842 := &x.LastTransitionTime
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else if z.HasExtensions() && z.EncExt(yy842) {
					} else if yym843 {
						z.EncBinaryMarshal(yy842)
					} else if !yym843 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy842)
					} else {
						z.EncFallback(yy842)
					}
				}
			}
			if yyr829 || yy2arr829 {
				if yyq829[4] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq829[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr829 || yy2arr829 {
				if yyq829[5] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq829[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep829 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym850 := z.DecBinary()
	_ = yym850
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl851 := r.ReadMapStart()
			if yyl851 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl851, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl851 := r.ReadArrayStart()
			if yyl851 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl851, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys852Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys852Slc
	var yyhl852 bool = l >= 0
	for yyj852 := 0; ; yyj852++ {
		if yyhl852 {
			if yyj852 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys852Slc = r.DecodeBytes(yys852Slc, true, true)
		yys852 := string(yys852Slc)
		switch yys852 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv855 := &x.LastProbeTime
				yym856 := z.DecBinary()
				_ = yym856
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv855) {
				} else if yym856 {
					z.DecBinaryUnmarshal(yyv855)
				} else if !yym856 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv855)
				} else {
					z.DecFallback(yyv855, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv857 := &x.LastTransitionTime
				yym858 := z.DecBinary()
				_ = yym858
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv857) {
				} else if yym858 {
					z.DecBinaryUnmarshal(yyv857)
				} else if !yym858 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv857)
				} else {
					z.DecFallback(yyv857, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys852)
		} // end switch yys852
	} // end for yyj852
	if !yyhl852 {
		r.ReadEnd()
	}
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj861 int
	var yyb861 bool
	var yyhl861 bool = l >= 0
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv864 := &x.LastProbeTime
		yym865 := z.DecBinary()
		_ = yym865
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv864) {
		} else if yym865 {
			z.DecBinaryUnmarshal(yyv864)
		} else if !yym865 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv864)
		} else {
			z.DecFallback(yyv864, false)
		}
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv866 := &x.LastTransitionTime
		yym867 := z.DecBinary()
		_ = yym867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv866) {
		} else if yym867 {
			z.DecBinaryUnmarshal(yyv866)
		} else if !yym867 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv866)
		} else {
			z.DecFallback(yyv866, false)
		}
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj861++
		if yyhl861 {
			yyb861 = yyj861 > l
		} else {
			yyb861 = r.CheckBreak()
		}
		if yyb861 {
			break
		}
		z.DecStructFieldNotFound(yyj861-1, "")
	}
	r.ReadEnd()
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym870 := z.EncBinary()
		_ = yym870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep871 := !z.EncBinary()
			yy2arr871 := z.EncBasicHandle().StructToArray
			var yyq871 [5]bool
			_, _, _ = yysep871, yyq871, yy2arr871
			const yyr871 bool = false
			yyq871[0] = x.Kind != ""
			yyq871[1] = x.APIVersion != ""
			yyq871[2] = true
			yyq871[3] = true
			yyq871[4] = true
			if yyr871 || yy2arr871 {
				r.EncodeArrayStart(5)
			} else {
				var yynn871 int = 0
				for _, b := range yyq871 {
					if b {
						yynn871++
					}
				}
				r.EncodeMapStart(yynn871)
			}
			if yyr871 || yy2arr871 {
				if yyq871[0] {
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr871 || yy2arr871 {
				if yyq871[1] {
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr871 || yy2arr871 {
				if yyq871[2] {
					yy879 := &x.ObjectMeta
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else if z.HasExtensions() && z.EncExt(yy879) {
					} else {
						z.EncFallback(yy879)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq871[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy881 := &x.ObjectMeta
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else if z.HasExtensions() && z.EncExt(yy881) {
					} else {
						z.EncFallback(yy881)
					}
				}
			}
			if yyr871 || yy2arr871 {
				if yyq871[3] {
					yy884 := &x.Spec
					yy884.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq871[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy885 := &x.Spec
					yy885.CodecEncodeSelf(e)
				}
			}
			if yyr871 || yy2arr871 {
				if yyq871[4] {
					yy887 := &x.Status
					yy887.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq871[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy888 := &x.Status
					yy888.CodecEncodeSelf(e)
				}
			}
			if yysep871 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym889 := z.DecBinary()
	_ = yym889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl890 := r.ReadMapStart()
			if yyl890 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl890, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl890 := r.ReadArrayStart()
			if yyl890 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys891Slc
	var yyhl891 bool = l >= 0
	for yyj891 := 0; ; yyj891++ {
		if yyhl891 {
			if yyj891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys891Slc = r.DecodeBytes(yys891Slc, true, true)
		yys891 := string(yys891Slc)
		switch yys891 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv894 := &x.ObjectMeta
				yym895 := z.DecBinary()
				_ = yym895
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv894) {
				} else {
					z.DecFallback(yyv894, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv896 := &x.Spec
				yyv896.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv897 := &x.Status
				yyv897.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys891)
		} // end switch yys891
	} // end for yyj891
	if !yyhl891 {
		r.ReadEnd()
	}
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj898 int
	var yyb898 bool
	var yyhl898 bool = l >= 0
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv901 := &x.ObjectMeta
		yym902 := z.DecBinary()
		_ = yym902
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv901) {
		} else {
			z.DecFallback(yyv901, false)
		}
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv903 := &x.Spec
		yyv903.CodecDecodeSelf(d)
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv904 := &x.Status
		yyv904.CodecDecodeSelf(d)
	}
	for {
		yyj898++
		if yyhl898 {
			yyb898 = yyj898 > l
		} else {
			yyb898 = r.CheckBreak()
		}
		if yyb898 {
			break
		}
		z.DecStructFieldNotFound(yyj898-1, "")
	}
	r.ReadEnd()
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym905 := z.EncBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep906 := !z.EncBinary()
			yy2arr906 := z.EncBasicHandle().StructToArray
			var yyq906 [4]bool
			_, _, _ = yysep906, yyq906, yy2arr906
			const yyr906 bool = false
			yyq906[0] = x.Kind != ""
			yyq906[1] = x.APIVersion != ""
			yyq906[2] = true
			if yyr906 || yy2arr906 {
				r.EncodeArrayStart(4)
			} else {
				var yynn906 int = 1
				for _, b := range yyq906 {
					if b {
						yynn906++
					}
				}
				r.EncodeMapStart(yynn906)
			}
			if yyr906 || yy2arr906 {
				if yyq906[0] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr906 || yy2arr906 {
				if yyq906[1] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr906 || yy2arr906 {
				if yyq906[2] {
					yy914 := &x.ListMeta
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else if z.HasExtensions() && z.EncExt(yy914) {
					} else {
						z.EncFallback(yy914)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy916 := &x.ListMeta
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else if z.HasExtensions() && z.EncExt(yy916) {
					} else {
						z.EncFallback(yy916)
					}
				}
			}
			if yyr906 || yy2arr906 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yysep906 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym921 := z.DecBinary()
	_ = yym921
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl922 := r.ReadMapStart()
			if yyl922 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl922, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl922 := r.ReadArrayStart()
			if yyl922 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl922, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys923Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys923Slc
	var yyhl923 bool = l >= 0
	for yyj923 := 0; ; yyj923++ {
		if yyhl923 {
			if yyj923 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys923Slc = r.DecodeBytes(yys923Slc, true, true)
		yys923 := string(yys923Slc)
		switch yys923 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv926 := &x.ListMeta
				yym927 := z.DecBinary()
				_ = yym927
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv926) {
				} else {
					z.DecFallback(yyv926, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv928 := &x.Items
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv928), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys923)
		} // end switch yys923
	} // end for yyj923
	if !yyhl923 {
		r.ReadEnd()
	}
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv933 := &x.ListMeta
		yym934 := z.DecBinary()
		_ = yym934
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv933) {
		} else {
			z.DecFallback(yyv933, false)
		}
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv935 := &x.Items
		yym936 := z.DecBinary()
		_ = yym936
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv935), d)
		}
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	r.ReadEnd()
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym937 := z.EncBinary()
		_ = yym937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep938 := !z.EncBinary()
			yy2arr938 := z.EncBasicHandle().StructToArray
			var yyq938 [2]bool
			_, _, _ = yysep938, yyq938, yy2arr938
			const yyr938 bool = false
			yyq938[0] = x.Backend != nil
			yyq938[1] = len(x.Rules) != 0
			if yyr938 || yy2arr938 {
				r.EncodeArrayStart(2)
			} else {
				var yynn938 int = 0
				for _, b := range yyq938 {
					if b {
						yynn938++
					}
				}
				r.EncodeMapStart(yynn938)
			}
			if yyr938 || yy2arr938 {
				if yyq938[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[0] {
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr938 || yy2arr938 {
				if yyq938[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym941 := z.EncBinary()
						_ = yym941
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym942 := z.EncBinary()
						_ = yym942
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yysep938 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym943 := z.DecBinary()
	_ = yym943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl944 := r.ReadMapStart()
			if yyl944 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl944, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl944 := r.ReadArrayStart()
			if yyl944 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys945Slc
	var yyhl945 bool = l >= 0
	for yyj945 := 0; ; yyj945++ {
		if yyhl945 {
			if yyj945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys945Slc = r.DecodeBytes(yys945Slc, true, true)
		yys945 := string(yys945Slc)
		switch yys945 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv947 := &x.Rules
				yym948 := z.DecBinary()
				_ = yym948
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv947), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys945)
		} // end switch yys945
	} // end for yyj945
	if !yyhl945 {
		r.ReadEnd()
	}
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj949 int
	var yyb949 bool
	var yyhl949 bool = l >= 0
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv951 := &x.Rules
		yym952 := z.DecBinary()
		_ = yym952
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv951), d)
		}
	}
	for {
		yyj949++
		if yyhl949 {
			yyb949 = yyj949 > l
		} else {
			yyb949 = r.CheckBreak()
		}
		if yyb949 {
			break
		}
		z.DecStructFieldNotFound(yyj949-1, "")
	}
	r.ReadEnd()
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym953 := z.EncBinary()
		_ = yym953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep954 := !z.EncBinary()
			yy2arr954 := z.EncBasicHandle().StructToArray
			var yyq954 [1]bool
			_, _, _ = yysep954, yyq954, yy2arr954
			const yyr954 bool = false
			yyq954[0] = true
			if yyr954 || yy2arr954 {
				r.EncodeArrayStart(1)
			} else {
				var yynn954 int = 0
				for _, b := range yyq954 {
					if b {
						yynn954++
					}
				}
				r.EncodeMapStart(yynn954)
			}
			if yyr954 || yy2arr954 {
				if yyq954[0] {
					yy956 := &x.LoadBalancer
					yym957 := z.EncBinary()
					_ = yym957
					if false {
					} else if z.HasExtensions() && z.EncExt(yy956) {
					} else {
						z.EncFallback(yy956)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq954[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy958 := &x.LoadBalancer
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else if z.HasExtensions() && z.EncExt(yy958) {
					} else {
						z.EncFallback(yy958)
					}
				}
			}
			if yysep954 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv963 := &x.LoadBalancer
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv963) {
				} else {
					z.DecFallback(yyv963, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv966 := &x.LoadBalancer
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv966) {
		} else {
			z.DecFallback(yyv966, false)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [2]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Host != ""
			yyq969[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(2)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			if yyr969 || yy2arr969 {
				if yyq969[0] {
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn973 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn973 = true
				goto LABEL973
			}
		LABEL973:
			if yyr969 || yy2arr969 {
				if yyn973 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if yyn973 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym974 := z.DecBinary()
	_ = yym974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl975 := r.ReadMapStart()
			if yyl975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl975, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl975 := r.ReadArrayStart()
			if yyl975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys976Slc
	var yyhl976 bool = l >= 0
	for yyj976 := 0; ; yyj976++ {
		if yyhl976 {
			if yyj976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys976Slc = r.DecodeBytes(yys976Slc, true, true)
		yys976 := string(yys976Slc)
		switch yys976 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys976)
		} // end switch yys976
	} // end for yyj976
	if !yyhl976 {
		r.ReadEnd()
	}
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym982 := z.EncBinary()
		_ = yym982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep983 := !z.EncBinary()
			yy2arr983 := z.EncBasicHandle().StructToArray
			var yyq983 [1]bool
			_, _, _ = yysep983, yyq983, yy2arr983
			const yyr983 bool = false
			yyq983[0] = x.HTTP != nil
			if yyr983 || yy2arr983 {
				r.EncodeArrayStart(1)
			} else {
				var yynn983 int = 0
				for _, b := range yyq983 {
					if b {
						yynn983++
					}
				}
				r.EncodeMapStart(yynn983)
			}
			if yyr983 || yy2arr983 {
				if yyq983[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq983[0] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yysep983 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym985 := z.DecBinary()
	_ = yym985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl986 := r.ReadMapStart()
			if yyl986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl986, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl986 := r.ReadArrayStart()
			if yyl986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys987Slc
	var yyhl987 bool = l >= 0
	for yyj987 := 0; ; yyj987++ {
		if yyhl987 {
			if yyj987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys987Slc = r.DecodeBytes(yys987Slc, true, true)
		yys987 := string(yys987Slc)
		switch yys987 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys987)
		} // end switch yys987
	} // end for yyj987
	if !yyhl987 {
		r.ReadEnd()
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj989 int
	var yyb989 bool
	var yyhl989 bool = l >= 0
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj989++
		if yyhl989 {
			yyb989 = yyj989 > l
		} else {
			yyb989 = r.CheckBreak()
		}
		if yyb989 {
			break
		}
		z.DecStructFieldNotFound(yyj989-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym991 := z.EncBinary()
		_ = yym991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep992 := !z.EncBinary()
			yy2arr992 := z.EncBasicHandle().StructToArray
			var yyq992 [1]bool
			_, _, _ = yysep992, yyq992, yy2arr992
			const yyr992 bool = false
			if yyr992 || yy2arr992 {
				r.EncodeArrayStart(1)
			} else {
				var yynn992 int = 1
				for _, b := range yyq992 {
					if b {
						yynn992++
					}
				}
				r.EncodeMapStart(yynn992)
			}
			if yyr992 || yy2arr992 {
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yysep992 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl997 := r.ReadMapStart()
			if yyl997 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl997, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl997 := r.ReadArrayStart()
			if yyl997 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl997, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys998Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys998Slc
	var yyhl998 bool = l >= 0
	for yyj998 := 0; ; yyj998++ {
		if yyhl998 {
			if yyj998 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys998Slc = r.DecodeBytes(yys998Slc, true, true)
		yys998 := string(yys998Slc)
		switch yys998 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv999 := &x.Paths
				yym1000 := z.DecBinary()
				_ = yym1000
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv999), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys998)
		} // end switch yys998
	} // end for yyj998
	if !yyhl998 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1001 int
	var yyb1001 bool
	var yyhl1001 bool = l >= 0
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1002 := &x.Paths
		yym1003 := z.DecBinary()
		_ = yym1003
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1002), d)
		}
	}
	for {
		yyj1001++
		if yyhl1001 {
			yyb1001 = yyj1001 > l
		} else {
			yyb1001 = r.CheckBreak()
		}
		if yyb1001 {
			break
		}
		z.DecStructFieldNotFound(yyj1001-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1004 := z.EncBinary()
		_ = yym1004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1005 := !z.EncBinary()
			yy2arr1005 := z.EncBasicHandle().StructToArray
			var yyq1005 [2]bool
			_, _, _ = yysep1005, yyq1005, yy2arr1005
			const yyr1005 bool = false
			yyq1005[0] = x.Path != ""
			if yyr1005 || yy2arr1005 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1005 int = 1
				for _, b := range yyq1005 {
					if b {
						yynn1005++
					}
				}
				r.EncodeMapStart(yynn1005)
			}
			if yyr1005 || yy2arr1005 {
				if yyq1005[0] {
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1005[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1005 || yy2arr1005 {
				yy1010 := &x.Backend
				yy1010.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				yy1011 := &x.Backend
				yy1011.CodecEncodeSelf(e)
			}
			if yysep1005 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1012 := z.DecBinary()
	_ = yym1012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1013 := r.ReadMapStart()
			if yyl1013 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1013, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1013 := r.ReadArrayStart()
			if yyl1013 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1014Slc
	var yyhl1014 bool = l >= 0
	for yyj1014 := 0; ; yyj1014++ {
		if yyhl1014 {
			if yyj1014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1014Slc = r.DecodeBytes(yys1014Slc, true, true)
		yys1014 := string(yys1014Slc)
		switch yys1014 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1016 := &x.Backend
				yyv1016.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1014)
		} // end switch yys1014
	} // end for yyj1014
	if !yyhl1014 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1017 int
	var yyb1017 bool
	var yyhl1017 bool = l >= 0
	yyj1017++
	if yyhl1017 {
		yyb1017 = yyj1017 > l
	} else {
		yyb1017 = r.CheckBreak()
	}
	if yyb1017 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1017++
	if yyhl1017 {
		yyb1017 = yyj1017 > l
	} else {
		yyb1017 = r.CheckBreak()
	}
	if yyb1017 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1019 := &x.Backend
		yyv1019.CodecDecodeSelf(d)
	}
	for {
		yyj1017++
		if yyhl1017 {
			yyb1017 = yyj1017 > l
		} else {
			yyb1017 = r.CheckBreak()
		}
		if yyb1017 {
			break
		}
		z.DecStructFieldNotFound(yyj1017-1, "")
	}
	r.ReadEnd()
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1020 := z.EncBinary()
		_ = yym1020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1021 := !z.EncBinary()
			yy2arr1021 := z.EncBasicHandle().StructToArray
			var yyq1021 [2]bool
			_, _, _ = yysep1021, yyq1021, yy2arr1021
			const yyr1021 bool = false
			if yyr1021 || yy2arr1021 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1021 int = 2
				for _, b := range yyq1021 {
					if b {
						yynn1021++
					}
				}
				r.EncodeMapStart(yynn1021)
			}
			if yyr1021 || yy2arr1021 {
				yym1023 := z.EncBinary()
				_ = yym1023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1021 || yy2arr1021 {
				yy1026 := &x.ServicePort
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1026) {
				} else if !yym1027 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1026)
				} else {
					z.EncFallback(yy1026)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				yy1028 := &x.ServicePort
				yym1029 := z.EncBinary()
				_ = yym1029
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1028) {
				} else if !yym1029 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1028)
				} else {
					z.EncFallback(yy1028)
				}
			}
			if yysep1021 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1030 := z.DecBinary()
	_ = yym1030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1031 := r.ReadMapStart()
			if yyl1031 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1031, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1031 := r.ReadArrayStart()
			if yyl1031 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1032Slc
	var yyhl1032 bool = l >= 0
	for yyj1032 := 0; ; yyj1032++ {
		if yyhl1032 {
			if yyj1032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1032Slc = r.DecodeBytes(yys1032Slc, true, true)
		yys1032 := string(yys1032Slc)
		switch yys1032 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_util.IntOrString{}
			} else {
				yyv1034 := &x.ServicePort
				yym1035 := z.DecBinary()
				_ = yym1035
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1034) {
				} else if !yym1035 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1034)
				} else {
					z.DecFallback(yyv1034, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1032)
		} // end switch yys1032
	} // end for yyj1032
	if !yyhl1032 {
		r.ReadEnd()
	}
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1036 int
	var yyb1036 bool
	var yyhl1036 bool = l >= 0
	yyj1036++
	if yyhl1036 {
		yyb1036 = yyj1036 > l
	} else {
		yyb1036 = r.CheckBreak()
	}
	if yyb1036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1036++
	if yyhl1036 {
		yyb1036 = yyj1036 > l
	} else {
		yyb1036 = r.CheckBreak()
	}
	if yyb1036 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_util.IntOrString{}
	} else {
		yyv1038 := &x.ServicePort
		yym1039 := z.DecBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1038) {
		} else if !yym1039 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1038)
		} else {
			z.DecFallback(yyv1038, false)
		}
	}
	for {
		yyj1036++
		if yyhl1036 {
			yyb1036 = yyj1036 > l
		} else {
			yyb1036 = r.CheckBreak()
		}
		if yyb1036 {
			break
		}
		z.DecStructFieldNotFound(yyj1036-1, "")
	}
	r.ReadEnd()
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1040 := z.EncBinary()
	_ = yym1040
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1041 := z.DecBinary()
	_ = yym1041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1042 := z.EncBinary()
		_ = yym1042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1043 := !z.EncBinary()
			yy2arr1043 := z.EncBasicHandle().StructToArray
			var yyq1043 [2]bool
			_, _, _ = yysep1043, yyq1043, yy2arr1043
			const yyr1043 bool = false
			if yyr1043 || yy2arr1043 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1043 int = 2
				for _, b := range yyq1043 {
					if b {
						yynn1043++
					}
				}
				r.EncodeMapStart(yynn1043)
			}
			if yyr1043 || yy2arr1043 {
				x.Resource.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1043 || yy2arr1043 {
				yym1046 := z.EncBinary()
				_ = yym1046
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				yym1047 := z.EncBinary()
				_ = yym1047
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yysep1043 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1049 := r.ReadMapStart()
			if yyl1049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1049, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1049 := r.ReadArrayStart()
			if yyl1049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1050Slc
	var yyhl1050 bool = l >= 0
	for yyj1050 := 0; ; yyj1050++ {
		if yyhl1050 {
			if yyj1050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1050Slc = r.DecodeBytes(yys1050Slc, true, true)
		yys1050 := string(yys1050Slc)
		switch yys1050 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1050)
		} // end switch yys1050
	} // end for yyj1050
	if !yyhl1050 {
		r.ReadEnd()
	}
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1053 int
	var yyb1053 bool
	var yyhl1053 bool = l >= 0
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1053++
		if yyhl1053 {
			yyb1053 = yyj1053 > l
		} else {
			yyb1053 = r.CheckBreak()
		}
		if yyb1053 {
			break
		}
		z.DecStructFieldNotFound(yyj1053-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1056 := z.EncBinary()
		_ = yym1056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1057 := !z.EncBinary()
			yy2arr1057 := z.EncBasicHandle().StructToArray
			var yyq1057 [3]bool
			_, _, _ = yysep1057, yyq1057, yy2arr1057
			const yyr1057 bool = false
			if yyr1057 || yy2arr1057 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1057 int = 3
				for _, b := range yyq1057 {
					if b {
						yynn1057++
					}
				}
				r.EncodeMapStart(yynn1057)
			}
			if yyr1057 || yy2arr1057 {
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				yym1060 := z.EncBinary()
				_ = yym1060
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1057 || yy2arr1057 {
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				yym1063 := z.EncBinary()
				_ = yym1063
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1057 || yy2arr1057 {
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yysep1057 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1067 := z.DecBinary()
	_ = yym1067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1068 := r.ReadMapStart()
			if yyl1068 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1068, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1068 := r.ReadArrayStart()
			if yyl1068 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1069Slc
	var yyhl1069 bool = l >= 0
	for yyj1069 := 0; ; yyj1069++ {
		if yyhl1069 {
			if yyj1069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1069Slc = r.DecodeBytes(yys1069Slc, true, true)
		yys1069 := string(yys1069Slc)
		switch yys1069 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1072 := &x.TargetUtilization
				yym1073 := z.DecBinary()
				_ = yym1073
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1072), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1069)
		} // end switch yys1069
	} // end for yyj1069
	if !yyhl1069 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1074 int
	var yyb1074 bool
	var yyhl1074 bool = l >= 0
	yyj1074++
	if yyhl1074 {
		yyb1074 = yyj1074 > l
	} else {
		yyb1074 = r.CheckBreak()
	}
	if yyb1074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1074++
	if yyhl1074 {
		yyb1074 = yyj1074 > l
	} else {
		yyb1074 = r.CheckBreak()
	}
	if yyb1074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1074++
	if yyhl1074 {
		yyb1074 = yyj1074 > l
	} else {
		yyb1074 = r.CheckBreak()
	}
	if yyb1074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1077 := &x.TargetUtilization
		yym1078 := z.DecBinary()
		_ = yym1078
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1077), d)
		}
	}
	for {
		yyj1074++
		if yyhl1074 {
			yyb1074 = yyj1074 > l
		} else {
			yyb1074 = r.CheckBreak()
		}
		if yyb1074 {
			break
		}
		z.DecStructFieldNotFound(yyj1074-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1079 := z.EncBinary()
		_ = yym1079
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1080 := !z.EncBinary()
			yy2arr1080 := z.EncBasicHandle().StructToArray
			var yyq1080 [4]bool
			_, _, _ = yysep1080, yyq1080, yy2arr1080
			const yyr1080 bool = false
			yyq1080[0] = x.Kind != ""
			yyq1080[1] = x.APIVersion != ""
			yyq1080[2] = true
			yyq1080[3] = true
			if yyr1080 || yy2arr1080 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1080 int = 0
				for _, b := range yyq1080 {
					if b {
						yynn1080++
					}
				}
				r.EncodeMapStart(yynn1080)
			}
			if yyr1080 || yy2arr1080 {
				if yyq1080[0] {
					yym1082 := z.EncBinary()
					_ = yym1082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1080[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1083 := z.EncBinary()
					_ = yym1083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1080 || yy2arr1080 {
				if yyq1080[1] {
					yym1085 := z.EncBinary()
					_ = yym1085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1080[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1086 := z.EncBinary()
					_ = yym1086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1080 || yy2arr1080 {
				if yyq1080[2] {
					yy1088 := &x.ObjectMeta
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1088) {
					} else {
						z.EncFallback(yy1088)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1080[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1090 := &x.ObjectMeta
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1090) {
					} else {
						z.EncFallback(yy1090)
					}
				}
			}
			if yyr1080 || yy2arr1080 {
				if yyq1080[3] {
					yy1093 := &x.Spec
					yy1093.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1080[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1094 := &x.Spec
					yy1094.CodecEncodeSelf(e)
				}
			}
			if yysep1080 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1095 := z.DecBinary()
	_ = yym1095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1096 := r.ReadMapStart()
			if yyl1096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1096, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1096 := r.ReadArrayStart()
			if yyl1096 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1096, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1097Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1097Slc
	var yyhl1097 bool = l >= 0
	for yyj1097 := 0; ; yyj1097++ {
		if yyhl1097 {
			if yyj1097 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1097Slc = r.DecodeBytes(yys1097Slc, true, true)
		yys1097 := string(yys1097Slc)
		switch yys1097 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1100 := &x.ObjectMeta
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1100) {
				} else {
					z.DecFallback(yyv1100, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1102 := &x.Spec
				yyv1102.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1097)
		} // end switch yys1097
	} // end for yyj1097
	if !yyhl1097 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1103 int
	var yyb1103 bool
	var yyhl1103 bool = l >= 0
	yyj1103++
	if yyhl1103 {
		yyb1103 = yyj1103 > l
	} else {
		yyb1103 = r.CheckBreak()
	}
	if yyb1103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1103++
	if yyhl1103 {
		yyb1103 = yyj1103 > l
	} else {
		yyb1103 = r.CheckBreak()
	}
	if yyb1103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1103++
	if yyhl1103 {
		yyb1103 = yyj1103 > l
	} else {
		yyb1103 = r.CheckBreak()
	}
	if yyb1103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1106 := &x.ObjectMeta
		yym1107 := z.DecBinary()
		_ = yym1107
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1106) {
		} else {
			z.DecFallback(yyv1106, false)
		}
	}
	yyj1103++
	if yyhl1103 {
		yyb1103 = yyj1103 > l
	} else {
		yyb1103 = r.CheckBreak()
	}
	if yyb1103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1108 := &x.Spec
		yyv1108.CodecDecodeSelf(d)
	}
	for {
		yyj1103++
		if yyhl1103 {
			yyb1103 = yyj1103 > l
		} else {
			yyb1103 = r.CheckBreak()
		}
		if yyb1103 {
			break
		}
		z.DecStructFieldNotFound(yyj1103-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1109 := z.EncBinary()
		_ = yym1109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1110 := !z.EncBinary()
			yy2arr1110 := z.EncBasicHandle().StructToArray
			var yyq1110 [4]bool
			_, _, _ = yysep1110, yyq1110, yy2arr1110
			const yyr1110 bool = false
			yyq1110[0] = x.Kind != ""
			yyq1110[1] = x.APIVersion != ""
			yyq1110[2] = true
			if yyr1110 || yy2arr1110 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1110 int = 1
				for _, b := range yyq1110 {
					if b {
						yynn1110++
					}
				}
				r.EncodeMapStart(yynn1110)
			}
			if yyr1110 || yy2arr1110 {
				if yyq1110[0] {
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1110[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1110 || yy2arr1110 {
				if yyq1110[1] {
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1110[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1110 || yy2arr1110 {
				if yyq1110[2] {
					yy1118 := &x.ListMeta
					yym1119 := z.EncBinary()
					_ = yym1119
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1118) {
					} else {
						z.EncFallback(yy1118)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1110[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1120 := &x.ListMeta
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1120) {
					} else {
						z.EncFallback(yy1120)
					}
				}
			}
			if yyr1110 || yy2arr1110 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep1110 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1126 := r.ReadMapStart()
			if yyl1126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1126, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1126 := r.ReadArrayStart()
			if yyl1126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1127Slc
	var yyhl1127 bool = l >= 0
	for yyj1127 := 0; ; yyj1127++ {
		if yyhl1127 {
			if yyj1127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1127Slc = r.DecodeBytes(yys1127Slc, true, true)
		yys1127 := string(yys1127Slc)
		switch yys1127 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1130 := &x.ListMeta
				yym1131 := z.DecBinary()
				_ = yym1131
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1130) {
				} else {
					z.DecFallback(yyv1130, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1132 := &x.Items
				yym1133 := z.DecBinary()
				_ = yym1133
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1132), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1127)
		} // end switch yys1127
	} // end for yyj1127
	if !yyhl1127 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1134 int
	var yyb1134 bool
	var yyhl1134 bool = l >= 0
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1137 := &x.ListMeta
		yym1138 := z.DecBinary()
		_ = yym1138
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1137) {
		} else {
			z.DecFallback(yyv1137, false)
		}
	}
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1139 := &x.Items
		yym1140 := z.DecBinary()
		_ = yym1140
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1139), d)
		}
	}
	for {
		yyj1134++
		if yyhl1134 {
			yyb1134 = yyj1134 > l
		} else {
			yyb1134 = r.CheckBreak()
		}
		if yyb1134 {
			break
		}
		z.DecStructFieldNotFound(yyj1134-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1141 := z.EncBinary()
		_ = yym1141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1142 := !z.EncBinary()
			yy2arr1142 := z.EncBasicHandle().StructToArray
			var yyq1142 [2]bool
			_, _, _ = yysep1142, yyq1142, yy2arr1142
			const yyr1142 bool = false
			yyq1142[0] = len(x.MatchLabels) != 0
			yyq1142[1] = len(x.MatchExpressions) != 0
			if yyr1142 || yy2arr1142 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1142 int = 0
				for _, b := range yyq1142 {
					if b {
						yynn1142++
					}
				}
				r.EncodeMapStart(yynn1142)
			}
			if yyr1142 || yy2arr1142 {
				if yyq1142[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1144 := z.EncBinary()
						_ = yym1144
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1142[0] {
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1145 := z.EncBinary()
						_ = yym1145
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1142 || yy2arr1142 {
				if yyq1142[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1147 := z.EncBinary()
						_ = yym1147
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1142[1] {
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1148 := z.EncBinary()
						_ = yym1148
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yysep1142 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1149 := z.DecBinary()
	_ = yym1149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1150 := r.ReadMapStart()
			if yyl1150 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1150, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1150 := r.ReadArrayStart()
			if yyl1150 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1151Slc
	var yyhl1151 bool = l >= 0
	for yyj1151 := 0; ; yyj1151++ {
		if yyhl1151 {
			if yyj1151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1151Slc = r.DecodeBytes(yys1151Slc, true, true)
		yys1151 := string(yys1151Slc)
		switch yys1151 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1152 := &x.MatchLabels
				yym1153 := z.DecBinary()
				_ = yym1153
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1152, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1154 := &x.MatchExpressions
				yym1155 := z.DecBinary()
				_ = yym1155
				if false {
				} else {
					h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1154), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1151)
		} // end switch yys1151
	} // end for yyj1151
	if !yyhl1151 {
		r.ReadEnd()
	}
}

func (x *PodSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1156 int
	var yyb1156 bool
	var yyhl1156 bool = l >= 0
	yyj1156++
	if yyhl1156 {
		yyb1156 = yyj1156 > l
	} else {
		yyb1156 = r.CheckBreak()
	}
	if yyb1156 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1157 := &x.MatchLabels
		yym1158 := z.DecBinary()
		_ = yym1158
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1157, false, d)
		}
	}
	yyj1156++
	if yyhl1156 {
		yyb1156 = yyj1156 > l
	} else {
		yyb1156 = r.CheckBreak()
	}
	if yyb1156 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1159 := &x.MatchExpressions
		yym1160 := z.DecBinary()
		_ = yym1160
		if false {
		} else {
			h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1159), d)
		}
	}
	for {
		yyj1156++
		if yyhl1156 {
			yyb1156 = yyj1156 > l
		} else {
			yyb1156 = r.CheckBreak()
		}
		if yyb1156 {
			break
		}
		z.DecStructFieldNotFound(yyj1156-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1161 := z.EncBinary()
		_ = yym1161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1162 := !z.EncBinary()
			yy2arr1162 := z.EncBasicHandle().StructToArray
			var yyq1162 [3]bool
			_, _, _ = yysep1162, yyq1162, yy2arr1162
			const yyr1162 bool = false
			yyq1162[2] = len(x.Values) != 0
			if yyr1162 || yy2arr1162 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1162 int = 2
				for _, b := range yyq1162 {
					if b {
						yynn1162++
					}
				}
				r.EncodeMapStart(yynn1162)
			}
			if yyr1162 || yy2arr1162 {
				yym1164 := z.EncBinary()
				_ = yym1164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				yym1165 := z.EncBinary()
				_ = yym1165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1162 || yy2arr1162 {
				x.Operator.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1162 || yy2arr1162 {
				if yyq1162[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1168 := z.EncBinary()
						_ = yym1168
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1162[2] {
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1169 := z.EncBinary()
						_ = yym1169
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yysep1162 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1170 := z.DecBinary()
	_ = yym1170
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1171 := r.ReadMapStart()
			if yyl1171 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1171, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1171 := r.ReadArrayStart()
			if yyl1171 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1171, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1172Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1172Slc
	var yyhl1172 bool = l >= 0
	for yyj1172 := 0; ; yyj1172++ {
		if yyhl1172 {
			if yyj1172 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1172Slc = r.DecodeBytes(yys1172Slc, true, true)
		yys1172 := string(yys1172Slc)
		switch yys1172 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = PodSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1175 := &x.Values
				yym1176 := z.DecBinary()
				_ = yym1176
				if false {
				} else {
					z.F.DecSliceStringX(yyv1175, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1172)
		} // end switch yys1172
	} // end for yyj1172
	if !yyhl1172 {
		r.ReadEnd()
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1177 int
	var yyb1177 bool
	var yyhl1177 bool = l >= 0
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = PodSelectorOperator(r.DecodeString())
	}
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1180 := &x.Values
		yym1181 := z.DecBinary()
		_ = yym1181
		if false {
		} else {
			z.F.DecSliceStringX(yyv1180, false, d)
		}
	}
	for {
		yyj1177++
		if yyhl1177 {
			yyb1177 = yyj1177 > l
		} else {
			yyb1177 = r.CheckBreak()
		}
		if yyb1177 {
			break
		}
		z.DecStructFieldNotFound(yyj1177-1, "")
	}
	r.ReadEnd()
}

func (x PodSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1182 := z.EncBinary()
	_ = yym1182
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1183 := z.DecBinary()
	_ = yym1183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1184 := range v {
		yy1185 := &yyv1184
		yy1185.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1186 := *v
	yyh1186, yyl1186 := z.DecSliceHelperStart()

	var yyrr1186, yyrl1186 int
	var yyc1186, yyrt1186 bool
	_, _, _ = yyc1186, yyrt1186, yyrl1186
	yyrr1186 = yyl1186

	if yyv1186 == nil {
		if yyrl1186, yyrt1186 = z.DecInferLen(yyl1186, z.DecBasicHandle().MaxInitLen, 336); yyrt1186 {
			yyrr1186 = yyrl1186
		}
		yyv1186 = make([]HorizontalPodAutoscaler, yyrl1186)
		yyc1186 = true
	}

	if yyl1186 == 0 {
		if len(yyv1186) != 0 {
			yyv1186 = yyv1186[:0]
			yyc1186 = true
		}
	} else if yyl1186 > 0 {

		if yyl1186 > cap(yyv1186) {
			yyrl1186, yyrt1186 = z.DecInferLen(yyl1186, z.DecBasicHandle().MaxInitLen, 336)
			yyv1186 = make([]HorizontalPodAutoscaler, yyrl1186)
			yyc1186 = true

			yyrr1186 = len(yyv1186)
		} else if yyl1186 != len(yyv1186) {
			yyv1186 = yyv1186[:yyl1186]
			yyc1186 = true
		}
		yyj1186 := 0
		for ; yyj1186 < yyrr1186; yyj1186++ {
			if r.TryDecodeAsNil() {
				yyv1186[yyj1186] = HorizontalPodAutoscaler{}
			} else {
				yyv1187 := &yyv1186[yyj1186]
				yyv1187.CodecDecodeSelf(d)
			}

		}
		if yyrt1186 {
			for ; yyj1186 < yyl1186; yyj1186++ {
				yyv1186 = append(yyv1186, HorizontalPodAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1186[yyj1186] = HorizontalPodAutoscaler{}
				} else {
					yyv1188 := &yyv1186[yyj1186]
					yyv1188.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1186 := 0; !r.CheckBreak(); yyj1186++ {
			if yyj1186 >= len(yyv1186) {
				yyv1186 = append(yyv1186, HorizontalPodAutoscaler{}) // var yyz1186 HorizontalPodAutoscaler
				yyc1186 = true
			}

			if yyj1186 < len(yyv1186) {
				if r.TryDecodeAsNil() {
					yyv1186[yyj1186] = HorizontalPodAutoscaler{}
				} else {
					yyv1189 := &yyv1186[yyj1186]
					yyv1189.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1186.End()
	}
	if yyc1186 {
		*v = yyv1186
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1190 := range v {
		yy1191 := &yyv1190
		yy1191.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1192 := *v
	yyh1192, yyl1192 := z.DecSliceHelperStart()

	var yyrr1192, yyrl1192 int
	var yyc1192, yyrt1192 bool
	_, _, _ = yyc1192, yyrt1192, yyrl1192
	yyrr1192 = yyl1192

	if yyv1192 == nil {
		if yyrl1192, yyrt1192 = z.DecInferLen(yyl1192, z.DecBasicHandle().MaxInitLen, 32); yyrt1192 {
			yyrr1192 = yyrl1192
		}
		yyv1192 = make([]APIVersion, yyrl1192)
		yyc1192 = true
	}

	if yyl1192 == 0 {
		if len(yyv1192) != 0 {
			yyv1192 = yyv1192[:0]
			yyc1192 = true
		}
	} else if yyl1192 > 0 {

		if yyl1192 > cap(yyv1192) {
			yyrl1192, yyrt1192 = z.DecInferLen(yyl1192, z.DecBasicHandle().MaxInitLen, 32)
			yyv1192 = make([]APIVersion, yyrl1192)
			yyc1192 = true

			yyrr1192 = len(yyv1192)
		} else if yyl1192 != len(yyv1192) {
			yyv1192 = yyv1192[:yyl1192]
			yyc1192 = true
		}
		yyj1192 := 0
		for ; yyj1192 < yyrr1192; yyj1192++ {
			if r.TryDecodeAsNil() {
				yyv1192[yyj1192] = APIVersion{}
			} else {
				yyv1193 := &yyv1192[yyj1192]
				yyv1193.CodecDecodeSelf(d)
			}

		}
		if yyrt1192 {
			for ; yyj1192 < yyl1192; yyj1192++ {
				yyv1192 = append(yyv1192, APIVersion{})
				if r.TryDecodeAsNil() {
					yyv1192[yyj1192] = APIVersion{}
				} else {
					yyv1194 := &yyv1192[yyj1192]
					yyv1194.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1192 := 0; !r.CheckBreak(); yyj1192++ {
			if yyj1192 >= len(yyv1192) {
				yyv1192 = append(yyv1192, APIVersion{}) // var yyz1192 APIVersion
				yyc1192 = true
			}

			if yyj1192 < len(yyv1192) {
				if r.TryDecodeAsNil() {
					yyv1192[yyj1192] = APIVersion{}
				} else {
					yyv1195 := &yyv1192[yyj1192]
					yyv1195.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1192.End()
	}
	if yyc1192 {
		*v = yyv1192
	}

}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1196 := range v {
		yy1197 := &yyv1196
		yy1197.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1198 := *v
	yyh1198, yyl1198 := z.DecSliceHelperStart()

	var yyrr1198, yyrl1198 int
	var yyc1198, yyrt1198 bool
	_, _, _ = yyc1198, yyrt1198, yyrl1198
	yyrr1198 = yyl1198

	if yyv1198 == nil {
		if yyrl1198, yyrt1198 = z.DecInferLen(yyl1198, z.DecBasicHandle().MaxInitLen, 232); yyrt1198 {
			yyrr1198 = yyrl1198
		}
		yyv1198 = make([]ThirdPartyResource, yyrl1198)
		yyc1198 = true
	}

	if yyl1198 == 0 {
		if len(yyv1198) != 0 {
			yyv1198 = yyv1198[:0]
			yyc1198 = true
		}
	} else if yyl1198 > 0 {

		if yyl1198 > cap(yyv1198) {
			yyrl1198, yyrt1198 = z.DecInferLen(yyl1198, z.DecBasicHandle().MaxInitLen, 232)
			yyv1198 = make([]ThirdPartyResource, yyrl1198)
			yyc1198 = true

			yyrr1198 = len(yyv1198)
		} else if yyl1198 != len(yyv1198) {
			yyv1198 = yyv1198[:yyl1198]
			yyc1198 = true
		}
		yyj1198 := 0
		for ; yyj1198 < yyrr1198; yyj1198++ {
			if r.TryDecodeAsNil() {
				yyv1198[yyj1198] = ThirdPartyResource{}
			} else {
				yyv1199 := &yyv1198[yyj1198]
				yyv1199.CodecDecodeSelf(d)
			}

		}
		if yyrt1198 {
			for ; yyj1198 < yyl1198; yyj1198++ {
				yyv1198 = append(yyv1198, ThirdPartyResource{})
				if r.TryDecodeAsNil() {
					yyv1198[yyj1198] = ThirdPartyResource{}
				} else {
					yyv1200 := &yyv1198[yyj1198]
					yyv1200.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1198 := 0; !r.CheckBreak(); yyj1198++ {
			if yyj1198 >= len(yyv1198) {
				yyv1198 = append(yyv1198, ThirdPartyResource{}) // var yyz1198 ThirdPartyResource
				yyc1198 = true
			}

			if yyj1198 < len(yyv1198) {
				if r.TryDecodeAsNil() {
					yyv1198[yyj1198] = ThirdPartyResource{}
				} else {
					yyv1201 := &yyv1198[yyj1198]
					yyv1201.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1198.End()
	}
	if yyc1198 {
		*v = yyv1198
	}

}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1202 := range v {
		yy1203 := &yyv1202
		yy1203.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1204 := *v
	yyh1204, yyl1204 := z.DecSliceHelperStart()

	var yyrr1204, yyrl1204 int
	var yyc1204, yyrt1204 bool
	_, _, _ = yyc1204, yyrt1204, yyrl1204
	yyrr1204 = yyl1204

	if yyv1204 == nil {
		if yyrl1204, yyrt1204 = z.DecInferLen(yyl1204, z.DecBasicHandle().MaxInitLen, 264); yyrt1204 {
			yyrr1204 = yyrl1204
		}
		yyv1204 = make([]Deployment, yyrl1204)
		yyc1204 = true
	}

	if yyl1204 == 0 {
		if len(yyv1204) != 0 {
			yyv1204 = yyv1204[:0]
			yyc1204 = true
		}
	} else if yyl1204 > 0 {

		if yyl1204 > cap(yyv1204) {
			yyrl1204, yyrt1204 = z.DecInferLen(yyl1204, z.DecBasicHandle().MaxInitLen, 264)
			yyv1204 = make([]Deployment, yyrl1204)
			yyc1204 = true

			yyrr1204 = len(yyv1204)
		} else if yyl1204 != len(yyv1204) {
			yyv1204 = yyv1204[:yyl1204]
			yyc1204 = true
		}
		yyj1204 := 0
		for ; yyj1204 < yyrr1204; yyj1204++ {
			if r.TryDecodeAsNil() {
				yyv1204[yyj1204] = Deployment{}
			} else {
				yyv1205 := &yyv1204[yyj1204]
				yyv1205.CodecDecodeSelf(d)
			}

		}
		if yyrt1204 {
			for ; yyj1204 < yyl1204; yyj1204++ {
				yyv1204 = append(yyv1204, Deployment{})
				if r.TryDecodeAsNil() {
					yyv1204[yyj1204] = Deployment{}
				} else {
					yyv1206 := &yyv1204[yyj1204]
					yyv1206.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1204 := 0; !r.CheckBreak(); yyj1204++ {
			if yyj1204 >= len(yyv1204) {
				yyv1204 = append(yyv1204, Deployment{}) // var yyz1204 Deployment
				yyc1204 = true
			}

			if yyj1204 < len(yyv1204) {
				if r.TryDecodeAsNil() {
					yyv1204[yyj1204] = Deployment{}
				} else {
					yyv1207 := &yyv1204[yyj1204]
					yyv1207.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1204.End()
	}
	if yyc1204 {
		*v = yyv1204
	}

}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1208 := range v {
		yy1209 := &yyv1208
		yy1209.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1210 := *v
	yyh1210, yyl1210 := z.DecSliceHelperStart()

	var yyrr1210, yyrl1210 int
	var yyc1210, yyrt1210 bool
	_, _, _ = yyc1210, yyrt1210, yyrl1210
	yyrr1210 = yyl1210

	if yyv1210 == nil {
		if yyrl1210, yyrt1210 = z.DecInferLen(yyl1210, z.DecBasicHandle().MaxInitLen, 232); yyrt1210 {
			yyrr1210 = yyrl1210
		}
		yyv1210 = make([]DaemonSet, yyrl1210)
		yyc1210 = true
	}

	if yyl1210 == 0 {
		if len(yyv1210) != 0 {
			yyv1210 = yyv1210[:0]
			yyc1210 = true
		}
	} else if yyl1210 > 0 {

		if yyl1210 > cap(yyv1210) {
			yyrl1210, yyrt1210 = z.DecInferLen(yyl1210, z.DecBasicHandle().MaxInitLen, 232)
			yyv1210 = make([]DaemonSet, yyrl1210)
			yyc1210 = true

			yyrr1210 = len(yyv1210)
		} else if yyl1210 != len(yyv1210) {
			yyv1210 = yyv1210[:yyl1210]
			yyc1210 = true
		}
		yyj1210 := 0
		for ; yyj1210 < yyrr1210; yyj1210++ {
			if r.TryDecodeAsNil() {
				yyv1210[yyj1210] = DaemonSet{}
			} else {
				yyv1211 := &yyv1210[yyj1210]
				yyv1211.CodecDecodeSelf(d)
			}

		}
		if yyrt1210 {
			for ; yyj1210 < yyl1210; yyj1210++ {
				yyv1210 = append(yyv1210, DaemonSet{})
				if r.TryDecodeAsNil() {
					yyv1210[yyj1210] = DaemonSet{}
				} else {
					yyv1212 := &yyv1210[yyj1210]
					yyv1212.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1210 := 0; !r.CheckBreak(); yyj1210++ {
			if yyj1210 >= len(yyv1210) {
				yyv1210 = append(yyv1210, DaemonSet{}) // var yyz1210 DaemonSet
				yyc1210 = true
			}

			if yyj1210 < len(yyv1210) {
				if r.TryDecodeAsNil() {
					yyv1210[yyj1210] = DaemonSet{}
				} else {
					yyv1213 := &yyv1210[yyj1210]
					yyv1213.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1210.End()
	}
	if yyc1210 {
		*v = yyv1210
	}

}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1214 := range v {
		yy1215 := &yyv1214
		yy1215.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1216 := *v
	yyh1216, yyl1216 := z.DecSliceHelperStart()

	var yyrr1216, yyrl1216 int
	var yyc1216, yyrt1216 bool
	_, _, _ = yyc1216, yyrt1216, yyrl1216
	yyrr1216 = yyl1216

	if yyv1216 == nil {
		if yyrl1216, yyrt1216 = z.DecInferLen(yyl1216, z.DecBasicHandle().MaxInitLen, 216); yyrt1216 {
			yyrr1216 = yyrl1216
		}
		yyv1216 = make([]ThirdPartyResourceData, yyrl1216)
		yyc1216 = true
	}

	if yyl1216 == 0 {
		if len(yyv1216) != 0 {
			yyv1216 = yyv1216[:0]
			yyc1216 = true
		}
	} else if yyl1216 > 0 {

		if yyl1216 > cap(yyv1216) {
			yyrl1216, yyrt1216 = z.DecInferLen(yyl1216, z.DecBasicHandle().MaxInitLen, 216)
			yyv1216 = make([]ThirdPartyResourceData, yyrl1216)
			yyc1216 = true

			yyrr1216 = len(yyv1216)
		} else if yyl1216 != len(yyv1216) {
			yyv1216 = yyv1216[:yyl1216]
			yyc1216 = true
		}
		yyj1216 := 0
		for ; yyj1216 < yyrr1216; yyj1216++ {
			if r.TryDecodeAsNil() {
				yyv1216[yyj1216] = ThirdPartyResourceData{}
			} else {
				yyv1217 := &yyv1216[yyj1216]
				yyv1217.CodecDecodeSelf(d)
			}

		}
		if yyrt1216 {
			for ; yyj1216 < yyl1216; yyj1216++ {
				yyv1216 = append(yyv1216, ThirdPartyResourceData{})
				if r.TryDecodeAsNil() {
					yyv1216[yyj1216] = ThirdPartyResourceData{}
				} else {
					yyv1218 := &yyv1216[yyj1216]
					yyv1218.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1216 := 0; !r.CheckBreak(); yyj1216++ {
			if yyj1216 >= len(yyv1216) {
				yyv1216 = append(yyv1216, ThirdPartyResourceData{}) // var yyz1216 ThirdPartyResourceData
				yyc1216 = true
			}

			if yyj1216 < len(yyv1216) {
				if r.TryDecodeAsNil() {
					yyv1216[yyj1216] = ThirdPartyResourceData{}
				} else {
					yyv1219 := &yyv1216[yyj1216]
					yyv1219.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1216.End()
	}
	if yyc1216 {
		*v = yyv1216
	}

}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1220 := range v {
		yy1221 := &yyv1220
		yy1221.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1222 := *v
	yyh1222, yyl1222 := z.DecSliceHelperStart()

	var yyrr1222, yyrl1222 int
	var yyc1222, yyrt1222 bool
	_, _, _ = yyc1222, yyrt1222, yyrl1222
	yyrr1222 = yyl1222

	if yyv1222 == nil {
		if yyrl1222, yyrt1222 = z.DecInferLen(yyl1222, z.DecBasicHandle().MaxInitLen, 632); yyrt1222 {
			yyrr1222 = yyrl1222
		}
		yyv1222 = make([]Job, yyrl1222)
		yyc1222 = true
	}

	if yyl1222 == 0 {
		if len(yyv1222) != 0 {
			yyv1222 = yyv1222[:0]
			yyc1222 = true
		}
	} else if yyl1222 > 0 {

		if yyl1222 > cap(yyv1222) {
			yyrl1222, yyrt1222 = z.DecInferLen(yyl1222, z.DecBasicHandle().MaxInitLen, 632)
			yyv1222 = make([]Job, yyrl1222)
			yyc1222 = true

			yyrr1222 = len(yyv1222)
		} else if yyl1222 != len(yyv1222) {
			yyv1222 = yyv1222[:yyl1222]
			yyc1222 = true
		}
		yyj1222 := 0
		for ; yyj1222 < yyrr1222; yyj1222++ {
			if r.TryDecodeAsNil() {
				yyv1222[yyj1222] = Job{}
			} else {
				yyv1223 := &yyv1222[yyj1222]
				yyv1223.CodecDecodeSelf(d)
			}

		}
		if yyrt1222 {
			for ; yyj1222 < yyl1222; yyj1222++ {
				yyv1222 = append(yyv1222, Job{})
				if r.TryDecodeAsNil() {
					yyv1222[yyj1222] = Job{}
				} else {
					yyv1224 := &yyv1222[yyj1222]
					yyv1224.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1222 := 0; !r.CheckBreak(); yyj1222++ {
			if yyj1222 >= len(yyv1222) {
				yyv1222 = append(yyv1222, Job{}) // var yyz1222 Job
				yyc1222 = true
			}

			if yyj1222 < len(yyv1222) {
				if r.TryDecodeAsNil() {
					yyv1222[yyj1222] = Job{}
				} else {
					yyv1225 := &yyv1222[yyj1222]
					yyv1225.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1222.End()
	}
	if yyc1222 {
		*v = yyv1222
	}

}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1226 := range v {
		yy1227 := &yyv1226
		yy1227.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1228 := *v
	yyh1228, yyl1228 := z.DecSliceHelperStart()

	var yyrr1228, yyrl1228 int
	var yyc1228, yyrt1228 bool
	_, _, _ = yyc1228, yyrt1228, yyrl1228
	yyrr1228 = yyl1228

	if yyv1228 == nil {
		if yyrl1228, yyrt1228 = z.DecInferLen(yyl1228, z.DecBasicHandle().MaxInitLen, 112); yyrt1228 {
			yyrr1228 = yyrl1228
		}
		yyv1228 = make([]JobCondition, yyrl1228)
		yyc1228 = true
	}

	if yyl1228 == 0 {
		if len(yyv1228) != 0 {
			yyv1228 = yyv1228[:0]
			yyc1228 = true
		}
	} else if yyl1228 > 0 {

		if yyl1228 > cap(yyv1228) {
			yyrl1228, yyrt1228 = z.DecInferLen(yyl1228, z.DecBasicHandle().MaxInitLen, 112)
			yyv1228 = make([]JobCondition, yyrl1228)
			yyc1228 = true

			yyrr1228 = len(yyv1228)
		} else if yyl1228 != len(yyv1228) {
			yyv1228 = yyv1228[:yyl1228]
			yyc1228 = true
		}
		yyj1228 := 0
		for ; yyj1228 < yyrr1228; yyj1228++ {
			if r.TryDecodeAsNil() {
				yyv1228[yyj1228] = JobCondition{}
			} else {
				yyv1229 := &yyv1228[yyj1228]
				yyv1229.CodecDecodeSelf(d)
			}

		}
		if yyrt1228 {
			for ; yyj1228 < yyl1228; yyj1228++ {
				yyv1228 = append(yyv1228, JobCondition{})
				if r.TryDecodeAsNil() {
					yyv1228[yyj1228] = JobCondition{}
				} else {
					yyv1230 := &yyv1228[yyj1228]
					yyv1230.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1228 := 0; !r.CheckBreak(); yyj1228++ {
			if yyj1228 >= len(yyv1228) {
				yyv1228 = append(yyv1228, JobCondition{}) // var yyz1228 JobCondition
				yyc1228 = true
			}

			if yyj1228 < len(yyv1228) {
				if r.TryDecodeAsNil() {
					yyv1228[yyj1228] = JobCondition{}
				} else {
					yyv1231 := &yyv1228[yyj1228]
					yyv1231.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1228.End()
	}
	if yyc1228 {
		*v = yyv1228
	}

}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1232 := range v {
		yy1233 := &yyv1232
		yy1233.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1234 := *v
	yyh1234, yyl1234 := z.DecSliceHelperStart()

	var yyrr1234, yyrl1234 int
	var yyc1234, yyrt1234 bool
	_, _, _ = yyc1234, yyrt1234, yyrl1234
	yyrr1234 = yyl1234

	if yyv1234 == nil {
		if yyrl1234, yyrt1234 = z.DecInferLen(yyl1234, z.DecBasicHandle().MaxInitLen, 248); yyrt1234 {
			yyrr1234 = yyrl1234
		}
		yyv1234 = make([]Ingress, yyrl1234)
		yyc1234 = true
	}

	if yyl1234 == 0 {
		if len(yyv1234) != 0 {
			yyv1234 = yyv1234[:0]
			yyc1234 = true
		}
	} else if yyl1234 > 0 {

		if yyl1234 > cap(yyv1234) {
			yyrl1234, yyrt1234 = z.DecInferLen(yyl1234, z.DecBasicHandle().MaxInitLen, 248)
			yyv1234 = make([]Ingress, yyrl1234)
			yyc1234 = true

			yyrr1234 = len(yyv1234)
		} else if yyl1234 != len(yyv1234) {
			yyv1234 = yyv1234[:yyl1234]
			yyc1234 = true
		}
		yyj1234 := 0
		for ; yyj1234 < yyrr1234; yyj1234++ {
			if r.TryDecodeAsNil() {
				yyv1234[yyj1234] = Ingress{}
			} else {
				yyv1235 := &yyv1234[yyj1234]
				yyv1235.CodecDecodeSelf(d)
			}

		}
		if yyrt1234 {
			for ; yyj1234 < yyl1234; yyj1234++ {
				yyv1234 = append(yyv1234, Ingress{})
				if r.TryDecodeAsNil() {
					yyv1234[yyj1234] = Ingress{}
				} else {
					yyv1236 := &yyv1234[yyj1234]
					yyv1236.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1234 := 0; !r.CheckBreak(); yyj1234++ {
			if yyj1234 >= len(yyv1234) {
				yyv1234 = append(yyv1234, Ingress{}) // var yyz1234 Ingress
				yyc1234 = true
			}

			if yyj1234 < len(yyv1234) {
				if r.TryDecodeAsNil() {
					yyv1234[yyj1234] = Ingress{}
				} else {
					yyv1237 := &yyv1234[yyj1234]
					yyv1237.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1234.End()
	}
	if yyc1234 {
		*v = yyv1234
	}

}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1238 := range v {
		yy1239 := &yyv1238
		yy1239.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1240 := *v
	yyh1240, yyl1240 := z.DecSliceHelperStart()

	var yyrr1240, yyrl1240 int
	var yyc1240, yyrt1240 bool
	_, _, _ = yyc1240, yyrt1240, yyrl1240
	yyrr1240 = yyl1240

	if yyv1240 == nil {
		if yyrl1240, yyrt1240 = z.DecInferLen(yyl1240, z.DecBasicHandle().MaxInitLen, 24); yyrt1240 {
			yyrr1240 = yyrl1240
		}
		yyv1240 = make([]IngressRule, yyrl1240)
		yyc1240 = true
	}

	if yyl1240 == 0 {
		if len(yyv1240) != 0 {
			yyv1240 = yyv1240[:0]
			yyc1240 = true
		}
	} else if yyl1240 > 0 {

		if yyl1240 > cap(yyv1240) {
			yyrl1240, yyrt1240 = z.DecInferLen(yyl1240, z.DecBasicHandle().MaxInitLen, 24)
			yyv1240 = make([]IngressRule, yyrl1240)
			yyc1240 = true

			yyrr1240 = len(yyv1240)
		} else if yyl1240 != len(yyv1240) {
			yyv1240 = yyv1240[:yyl1240]
			yyc1240 = true
		}
		yyj1240 := 0
		for ; yyj1240 < yyrr1240; yyj1240++ {
			if r.TryDecodeAsNil() {
				yyv1240[yyj1240] = IngressRule{}
			} else {
				yyv1241 := &yyv1240[yyj1240]
				yyv1241.CodecDecodeSelf(d)
			}

		}
		if yyrt1240 {
			for ; yyj1240 < yyl1240; yyj1240++ {
				yyv1240 = append(yyv1240, IngressRule{})
				if r.TryDecodeAsNil() {
					yyv1240[yyj1240] = IngressRule{}
				} else {
					yyv1242 := &yyv1240[yyj1240]
					yyv1242.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1240 := 0; !r.CheckBreak(); yyj1240++ {
			if yyj1240 >= len(yyv1240) {
				yyv1240 = append(yyv1240, IngressRule{}) // var yyz1240 IngressRule
				yyc1240 = true
			}

			if yyj1240 < len(yyv1240) {
				if r.TryDecodeAsNil() {
					yyv1240[yyj1240] = IngressRule{}
				} else {
					yyv1243 := &yyv1240[yyj1240]
					yyv1243.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1240.End()
	}
	if yyc1240 {
		*v = yyv1240
	}

}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1244 := range v {
		yy1245 := &yyv1244
		yy1245.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1246 := *v
	yyh1246, yyl1246 := z.DecSliceHelperStart()

	var yyrr1246, yyrl1246 int
	var yyc1246, yyrt1246 bool
	_, _, _ = yyc1246, yyrt1246, yyrl1246
	yyrr1246 = yyl1246

	if yyv1246 == nil {
		if yyrl1246, yyrt1246 = z.DecInferLen(yyl1246, z.DecBasicHandle().MaxInitLen, 64); yyrt1246 {
			yyrr1246 = yyrl1246
		}
		yyv1246 = make([]HTTPIngressPath, yyrl1246)
		yyc1246 = true
	}

	if yyl1246 == 0 {
		if len(yyv1246) != 0 {
			yyv1246 = yyv1246[:0]
			yyc1246 = true
		}
	} else if yyl1246 > 0 {

		if yyl1246 > cap(yyv1246) {
			yyrl1246, yyrt1246 = z.DecInferLen(yyl1246, z.DecBasicHandle().MaxInitLen, 64)
			yyv1246 = make([]HTTPIngressPath, yyrl1246)
			yyc1246 = true

			yyrr1246 = len(yyv1246)
		} else if yyl1246 != len(yyv1246) {
			yyv1246 = yyv1246[:yyl1246]
			yyc1246 = true
		}
		yyj1246 := 0
		for ; yyj1246 < yyrr1246; yyj1246++ {
			if r.TryDecodeAsNil() {
				yyv1246[yyj1246] = HTTPIngressPath{}
			} else {
				yyv1247 := &yyv1246[yyj1246]
				yyv1247.CodecDecodeSelf(d)
			}

		}
		if yyrt1246 {
			for ; yyj1246 < yyl1246; yyj1246++ {
				yyv1246 = append(yyv1246, HTTPIngressPath{})
				if r.TryDecodeAsNil() {
					yyv1246[yyj1246] = HTTPIngressPath{}
				} else {
					yyv1248 := &yyv1246[yyj1246]
					yyv1248.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1246 := 0; !r.CheckBreak(); yyj1246++ {
			if yyj1246 >= len(yyv1246) {
				yyv1246 = append(yyv1246, HTTPIngressPath{}) // var yyz1246 HTTPIngressPath
				yyc1246 = true
			}

			if yyj1246 < len(yyv1246) {
				if r.TryDecodeAsNil() {
					yyv1246[yyj1246] = HTTPIngressPath{}
				} else {
					yyv1249 := &yyv1246[yyj1246]
					yyv1249.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1246.End()
	}
	if yyc1246 {
		*v = yyv1246
	}

}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1250 := range v {
		yy1251 := &yyv1250
		yy1251.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1252 := *v
	yyh1252, yyl1252 := z.DecSliceHelperStart()

	var yyrr1252, yyrl1252 int
	var yyc1252, yyrt1252 bool
	_, _, _ = yyc1252, yyrt1252, yyrl1252
	yyrr1252 = yyl1252

	if yyv1252 == nil {
		if yyrl1252, yyrt1252 = z.DecInferLen(yyl1252, z.DecBasicHandle().MaxInitLen, 24); yyrt1252 {
			yyrr1252 = yyrl1252
		}
		yyv1252 = make([]NodeUtilization, yyrl1252)
		yyc1252 = true
	}

	if yyl1252 == 0 {
		if len(yyv1252) != 0 {
			yyv1252 = yyv1252[:0]
			yyc1252 = true
		}
	} else if yyl1252 > 0 {

		if yyl1252 > cap(yyv1252) {
			yyrl1252, yyrt1252 = z.DecInferLen(yyl1252, z.DecBasicHandle().MaxInitLen, 24)
			yyv1252 = make([]NodeUtilization, yyrl1252)
			yyc1252 = true

			yyrr1252 = len(yyv1252)
		} else if yyl1252 != len(yyv1252) {
			yyv1252 = yyv1252[:yyl1252]
			yyc1252 = true
		}
		yyj1252 := 0
		for ; yyj1252 < yyrr1252; yyj1252++ {
			if r.TryDecodeAsNil() {
				yyv1252[yyj1252] = NodeUtilization{}
			} else {
				yyv1253 := &yyv1252[yyj1252]
				yyv1253.CodecDecodeSelf(d)
			}

		}
		if yyrt1252 {
			for ; yyj1252 < yyl1252; yyj1252++ {
				yyv1252 = append(yyv1252, NodeUtilization{})
				if r.TryDecodeAsNil() {
					yyv1252[yyj1252] = NodeUtilization{}
				} else {
					yyv1254 := &yyv1252[yyj1252]
					yyv1254.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1252 := 0; !r.CheckBreak(); yyj1252++ {
			if yyj1252 >= len(yyv1252) {
				yyv1252 = append(yyv1252, NodeUtilization{}) // var yyz1252 NodeUtilization
				yyc1252 = true
			}

			if yyj1252 < len(yyv1252) {
				if r.TryDecodeAsNil() {
					yyv1252[yyj1252] = NodeUtilization{}
				} else {
					yyv1255 := &yyv1252[yyj1252]
					yyv1255.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1252.End()
	}
	if yyc1252 {
		*v = yyv1252
	}

}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1256 := range v {
		yy1257 := &yyv1256
		yy1257.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1258 := *v
	yyh1258, yyl1258 := z.DecSliceHelperStart()

	var yyrr1258, yyrl1258 int
	var yyc1258, yyrt1258 bool
	_, _, _ = yyc1258, yyrt1258, yyrl1258
	yyrr1258 = yyl1258

	if yyv1258 == nil {
		if yyrl1258, yyrt1258 = z.DecInferLen(yyl1258, z.DecBasicHandle().MaxInitLen, 232); yyrt1258 {
			yyrr1258 = yyrl1258
		}
		yyv1258 = make([]ClusterAutoscaler, yyrl1258)
		yyc1258 = true
	}

	if yyl1258 == 0 {
		if len(yyv1258) != 0 {
			yyv1258 = yyv1258[:0]
			yyc1258 = true
		}
	} else if yyl1258 > 0 {

		if yyl1258 > cap(yyv1258) {
			yyrl1258, yyrt1258 = z.DecInferLen(yyl1258, z.DecBasicHandle().MaxInitLen, 232)
			yyv1258 = make([]ClusterAutoscaler, yyrl1258)
			yyc1258 = true

			yyrr1258 = len(yyv1258)
		} else if yyl1258 != len(yyv1258) {
			yyv1258 = yyv1258[:yyl1258]
			yyc1258 = true
		}
		yyj1258 := 0
		for ; yyj1258 < yyrr1258; yyj1258++ {
			if r.TryDecodeAsNil() {
				yyv1258[yyj1258] = ClusterAutoscaler{}
			} else {
				yyv1259 := &yyv1258[yyj1258]
				yyv1259.CodecDecodeSelf(d)
			}

		}
		if yyrt1258 {
			for ; yyj1258 < yyl1258; yyj1258++ {
				yyv1258 = append(yyv1258, ClusterAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1258[yyj1258] = ClusterAutoscaler{}
				} else {
					yyv1260 := &yyv1258[yyj1258]
					yyv1260.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1258 := 0; !r.CheckBreak(); yyj1258++ {
			if yyj1258 >= len(yyv1258) {
				yyv1258 = append(yyv1258, ClusterAutoscaler{}) // var yyz1258 ClusterAutoscaler
				yyc1258 = true
			}

			if yyj1258 < len(yyv1258) {
				if r.TryDecodeAsNil() {
					yyv1258[yyj1258] = ClusterAutoscaler{}
				} else {
					yyv1261 := &yyv1258[yyj1258]
					yyv1261.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1258.End()
	}
	if yyc1258 {
		*v = yyv1258
	}

}

func (x codecSelfer1234) encSlicePodSelectorRequirement(v []PodSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1262 := range v {
		yy1263 := &yyv1262
		yy1263.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodSelectorRequirement(v *[]PodSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1264 := *v
	yyh1264, yyl1264 := z.DecSliceHelperStart()

	var yyrr1264, yyrl1264 int
	var yyc1264, yyrt1264 bool
	_, _, _ = yyc1264, yyrt1264, yyrl1264
	yyrr1264 = yyl1264

	if yyv1264 == nil {
		if yyrl1264, yyrt1264 = z.DecInferLen(yyl1264, z.DecBasicHandle().MaxInitLen, 56); yyrt1264 {
			yyrr1264 = yyrl1264
		}
		yyv1264 = make([]PodSelectorRequirement, yyrl1264)
		yyc1264 = true
	}

	if yyl1264 == 0 {
		if len(yyv1264) != 0 {
			yyv1264 = yyv1264[:0]
			yyc1264 = true
		}
	} else if yyl1264 > 0 {

		if yyl1264 > cap(yyv1264) {
			yyrl1264, yyrt1264 = z.DecInferLen(yyl1264, z.DecBasicHandle().MaxInitLen, 56)
			yyv1264 = make([]PodSelectorRequirement, yyrl1264)
			yyc1264 = true

			yyrr1264 = len(yyv1264)
		} else if yyl1264 != len(yyv1264) {
			yyv1264 = yyv1264[:yyl1264]
			yyc1264 = true
		}
		yyj1264 := 0
		for ; yyj1264 < yyrr1264; yyj1264++ {
			if r.TryDecodeAsNil() {
				yyv1264[yyj1264] = PodSelectorRequirement{}
			} else {
				yyv1265 := &yyv1264[yyj1264]
				yyv1265.CodecDecodeSelf(d)
			}

		}
		if yyrt1264 {
			for ; yyj1264 < yyl1264; yyj1264++ {
				yyv1264 = append(yyv1264, PodSelectorRequirement{})
				if r.TryDecodeAsNil() {
					yyv1264[yyj1264] = PodSelectorRequirement{}
				} else {
					yyv1266 := &yyv1264[yyj1264]
					yyv1266.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1264 := 0; !r.CheckBreak(); yyj1264++ {
			if yyj1264 >= len(yyv1264) {
				yyv1264 = append(yyv1264, PodSelectorRequirement{}) // var yyz1264 PodSelectorRequirement
				yyc1264 = true
			}

			if yyj1264 < len(yyv1264) {
				if r.TryDecodeAsNil() {
					yyv1264[yyj1264] = PodSelectorRequirement{}
				} else {
					yyv1267 := &yyv1264[yyj1264]
					yyv1267.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1264.End()
	}
	if yyc1264 {
		*v = yyv1264
	}

}
